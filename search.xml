<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++相关知识</title>
    <url>/2019/05/30/C++%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="1、预处理器指示符"><a href="#1、预处理器指示符" class="headerlink" title="1、预处理器指示符"></a>1、预处理器指示符</h3><p>当嵌套包含文件时可以用如下代码避免重复编译。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BOOKSTORE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BOOKSTORE_H</span></span><br><span class="line"><span class="comment">/* Bookstore.h 的内容 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#ifndef x	判断x是否被定义，若x未被定义则为真，否则为假。</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">#endif	标志#ifndef的结束</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#ifdef x 	判断x是否被定义，若x未被定义则为假，否则为真。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#define x	定义x。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>一些预定义名字：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">__cplusplus：编译 C++程序时 编译器自动定义的名字，用来判断该程序是不是C++程序。</span></span><br><span class="line"><span class="comment">__STDC__：在编译标准 C 时 编译器将自动定义的名字，用来判断该程序是不是C程序。</span></span><br><span class="line"><span class="comment">__LINE__：记录文件已经被编译的行数。</span></span><br><span class="line"><span class="comment">__FILE__：包含正在被编译的文件的名字。</span></span><br><span class="line"><span class="comment">__TIME__：当前被编译文件的编译时间</span></span><br><span class="line"><span class="comment">__DATE__：当前被编译文件的编译日期</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">若当前处理的行或文件发生变化 则__LINE__和__FILE__的值将分别被改变 其他四个</span></span><br><span class="line"><span class="comment">预定义名字在编译期间保持不变 它们的值也不能被修改</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h3 id="2、二维数组指针"><a href="#2、二维数组指针" class="headerlink" title="2、二维数组指针"></a>2、二维数组指针</h3><p>二维数组 <code>a[2][3]</code> 指针表示</p>
<p>方法一：</p>
<p><code>int (*p)[3]=a</code>或<code>int (*p)[3]=&amp;a[0]</code></p>
<p>访问 <code>a[i][j]</code> 等价于 <code>p[i][j]</code> 或 <code>*(*(p+i)+j)</code></p>
<p>方法二：</p>
<p><code>int *p=a[0]=&amp;a[0][0]=*a</code></p>
<p>访问 <code>a[i][j]</code> 等价于 <code>*(p+i*C+j)</code> 或 <code>*(*(p+i)+j)</code></p>
<h3 id="3、pair-用法"><a href="#3、pair-用法" class="headerlink" title="3、pair 用法"></a>3、pair 用法</h3><p>类模板：<code>template&lt;class T1,class T2&gt; struct pair</code></p>
<p>参数：T1是第一个值的数据类型，T2是第二个值的数据类型。</p>
<p>功能：pair将一对值(T1和T2)组合成一个值，这一对值可以具有不同的数据类型（T1和T2）， 两个值可以分别用pair的两个公有函数first和second访问。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pair&lt;T1,T2&gt; p1; <span class="comment">//创建一个空的pair对象，元素类型分别为T1，T2。</span></span><br><span class="line">pair&lt;T1,T2&gt; p2(v1,v2);//创建一个pair对象，元素的值分别为v1，v2。</span><br><span class="line">make_pair(v1,v2);<span class="comment">//以v1，v2的值创建一个pair对象，类型分别为v1，v2的类型</span></span><br><span class="line">p1&lt;p2;<span class="comment">//小于比较，先first后second。</span></span><br><span class="line">p1==p2;<span class="comment">//等于比较，先first后second。</span></span><br><span class="line">p1.first;<span class="comment">//返回p1中的第一个值。</span></span><br><span class="line">p1.second;<span class="comment">//返回p1中的第二个值。</span></span><br></pre></td></tr></table></figure>

<p>可以预定义宏</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;T1,T2&gt; P;</span><br><span class="line"><span class="comment">//三种定义方式</span></span><br><span class="line"><span class="function">P <span class="title">p1</span><span class="params">(v1,v2)</span></span>;</span><br><span class="line">P p = P(v1,v2);</span><br><span class="line">P p = make_pair(v1,v2);</span><br></pre></td></tr></table></figure>

<p>可以通过<code>tie</code>获取pair元素值，<code>std::tie</code>位于<code>tuple</code>头文件中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;T1,T2&gt; P;</span><br><span class="line"><span class="function">P <span class="title">p</span><span class="params">(v1,v2)</span></span>;</span><br><span class="line">T1 v3;</span><br><span class="line">T2 v4;</span><br><span class="line">tie(v3,v4)=p;</span><br></pre></td></tr></table></figure>



<h3 id="4、队列-queue"><a href="#4、队列-queue" class="headerlink" title="4、队列(queue)"></a>4、队列(queue)</h3><p><code>std::queue</code>位于 <code>queue</code>头文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="built_in">queue</span>&lt;T&gt; Q; <span class="comment">//定义一个类型为T的队列</span></span><br><span class="line"><span class="comment">//常用函数</span></span><br><span class="line"><span class="comment">//访问第一个元素</span></span><br><span class="line">T e=Q.front();</span><br><span class="line"><span class="comment">//访问最后一个元素</span></span><br><span class="line">T e=Q.back();</span><br><span class="line"><span class="comment">//检查队列是否为空</span></span><br><span class="line"><span class="keyword">bool</span> b=Q.empty();</span><br><span class="line"><span class="comment">//返回队列中元素的个数</span></span><br><span class="line"><span class="keyword">int</span> s=Q.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">//将元素e插入队列尾部</span></span><br><span class="line">Q.push(e);</span><br><span class="line"><span class="comment">//删除栈顶元素 </span></span><br><span class="line">Q.pop();</span><br><span class="line"><span class="comment">//于尾部原位构造元素</span></span><br><span class="line">Q.emplace(e);</span><br></pre></td></tr></table></figure>



<h3 id="5、字符串-string"><a href="#5、字符串-string" class="headerlink" title="5、字符串(string)"></a>5、字符串(string)</h3><p><code>std::string</code> 位于<code>string</code>头文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//string 可以直接赋值</span></span><br><span class="line">str = <span class="string">"This is a string."</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问字符串元素</span></span><br><span class="line"><span class="keyword">char</span> ch = str[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取字符串长度</span></span><br><span class="line"><span class="keyword">int</span> l = str.length();</span><br><span class="line"></span><br><span class="line"><span class="comment">//向末尾添加</span></span><br><span class="line">str += <span class="string">"A new string."</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串比较(==,!=,&lt;,&gt;,&lt;=,&gt;=,&lt;=&gt;都可以直接使用)</span></span><br><span class="line">b = (str &lt;= <span class="string">"Another string."</span>);</span><br><span class="line">b = (str &gt;= <span class="string">"Another string."</span>);</span><br><span class="line">b = (str == <span class="string">"Another string."</span>);</span><br><span class="line"><span class="comment">//cpm &lt;0 : str的字典序小 cpm &gt;0 ：str的字典序大</span></span><br><span class="line"><span class="keyword">int</span> cpm = str.compare(<span class="string">"Another string."</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取子串(pos表示开始位置，count表示子串的长度)</span></span><br><span class="line"><span class="built_in">string</span> subs = str.substr(pos,count);</span><br><span class="line"></span><br><span class="line"><span class="comment">//string转char数组(count表示子串长度，pos表示开始位置)</span></span><br><span class="line">str.copy(s,count,pos);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找字符出现的位置(ch表示要搜索的字符，pos表示开始位置)返回ch第一次出现的位置，若没有则返回-1</span></span><br><span class="line">pos = str.<span class="built_in">find</span>(ch,pos);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入输出</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;<span class="built_in">string</span>; <span class="built_in">cout</span>&lt;&lt;<span class="built_in">string</span>;</span><br><span class="line"><span class="comment">//读取一整行(包含空格字符串)</span></span><br><span class="line">getline(<span class="built_in">cin</span>,<span class="built_in">string</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数值转换</span></span><br><span class="line"><span class="keyword">int</span> int1 = stoi(<span class="built_in">string</span>);</span><br><span class="line"><span class="keyword">long</span> long1 = stol(<span class="built_in">string</span>);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> long_long1 = stoll(<span class="built_in">string</span>);</span><br><span class="line"><span class="built_in">string</span> str1 = to_string(<span class="keyword">int</span>);</span><br><span class="line"><span class="built_in">string</span> str1 = to_string(<span class="keyword">double</span>);</span><br></pre></td></tr></table></figure>



<h3 id="6、映射-map"><a href="#6、映射-map" class="headerlink" title="6、映射(map)"></a>6、映射(map)</h3><p><code>std::map</code>在<code>map</code>头文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line">mp.<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//大小</span></span><br><span class="line">mp.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入键值对</span></span><br><span class="line">mp[key]=value;</span><br><span class="line"></span><br><span class="line"><span class="comment">//顺序遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = mp.<span class="built_in">begin</span>();it!=mp.<span class="built_in">end</span>();++it)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> key = it-&gt;first;</span><br><span class="line">    <span class="keyword">int</span> calue = it-&gt;second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断key是否在map中</span></span><br><span class="line"><span class="keyword">auto</span> it = mp.<span class="built_in">find</span>(key);</span><br><span class="line"><span class="keyword">if</span> (it!=mp.<span class="built_in">end</span>()) <span class="comment">//key在map中</span></span><br><span class="line"><span class="keyword">else</span> <span class="comment">//key不在map中，it即为其所在地址</span></span><br></pre></td></tr></table></figure>



<h3 id="7、cout用法"><a href="#7、cout用法" class="headerlink" title="7、cout用法"></a>7、cout用法</h3><h4 id="1、cout保留小数"><a href="#1、cout保留小数" class="headerlink" title="1、cout保留小数"></a>1、cout保留小数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//保留2位小数</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//保留2位有效数字</span></span><br></pre></td></tr></table></figure>



<h3 id="8、自定义结构体-struct"><a href="#8、自定义结构体-struct" class="headerlink" title="8、自定义结构体(struct)"></a>8、自定义结构体(struct)</h3><h4 id="1、结构体变量构造函数"><a href="#1、结构体变量构造函数" class="headerlink" title="1、结构体变量构造函数"></a>1、结构体变量构造函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">struct Student</span><br><span class="line">&#123;</span><br><span class="line">    char *name;</span><br><span class="line">    int age;</span><br><span class="line">    char *sex;</span><br><span class="line">    Student(char *name,int age,char *sex)</span><br><span class="line">    :name(name),age(age),sex(sex)&#123;&#125;</span><br><span class="line">    void print_info()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">"name: "</span>&lt;&lt;name&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">"age: "</span>&lt;&lt;age&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">"sex: "</span>&lt;&lt;sex&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Student stu = Student(<span class="string">"张三"</span>,<span class="number">18</span>,<span class="string">"男"</span>);</span><br><span class="line">stu.print_info();</span><br></pre></td></tr></table></figure>



<h3 id="9、STL中的二分查找"><a href="#9、STL中的二分查找" class="headerlink" title="9、STL中的二分查找"></a>9、STL中的二分查找</h3><h4 id="1、binary-search"><a href="#1、binary-search" class="headerlink" title="1、binary_search"></a>1、binary_search</h4><p>查找某个元素是否出现过。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="comment">// binary_search(开始位置,结束位置,要查找的值);</span></span><br><span class="line"><span class="keyword">bool</span> f = binary_search(a,a+<span class="number">8</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> f = binary_search(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>(),<span class="number">4</span>);</span><br></pre></td></tr></table></figure>



<h4 id="2、lower-bound"><a href="#2、lower-bound" class="headerlink" title="2、lower_bound"></a>2、lower_bound</h4><p>查找第一个大于等于某个元素的位置。如果没找到返回结束位置。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="comment">// lower_bound(开始位置,结束位置,要查找的值);</span></span><br><span class="line"><span class="keyword">int</span> pos = lower_bound(a,a+<span class="number">8</span>,<span class="number">7</span>)-a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> it= lower_bound(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>(),<span class="number">5</span>);</span><br></pre></td></tr></table></figure>



<h4 id="3、upper-bound"><a href="#3、upper-bound" class="headerlink" title="3、upper_bound"></a>3、upper_bound</h4><p>查找第一个大于某个元素的位置。如果没找到返回结束位置。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="comment">// upper_bound(开始位置,结束位置,要查找的值);</span></span><br><span class="line"><span class="keyword">int</span> pos = upper_bound(a,a+<span class="number">8</span>,<span class="number">11</span>)-a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">auto</span> it= upper_bound(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>(),<span class="number">5</span>);</span><br></pre></td></tr></table></figure>



<h3 id="10、读取一整行"><a href="#10、读取一整行" class="headerlink" title="10、读取一整行"></a>10、读取一整行</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>,str);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse个性化设置</title>
    <url>/2019/08/27/Eclipse%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="1、字体大小"><a href="#1、字体大小" class="headerlink" title="1、字体大小"></a>1、字体大小</h3><p>1、编辑区字体大小</p>
<p><code>Window -&gt; Preferences -&gt; General -&gt; Appearance -&gt; Colors and Fonts -&gt; Basic -&gt; Text Font</code> </p>
<a id="more"></a>

<p><img src="/2019/08/27/Eclipse%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/%E4%BF%AE%E6%94%B9%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F.png" alt="修改字体大小"></p>
<h3 id="2、主题皮肤"><a href="#2、主题皮肤" class="headerlink" title="2、主题皮肤"></a>2、主题皮肤</h3><p><code>Help -&gt; Eclipse -&gt;  Marketplace</code> ，搜索 <code>Theme</code> ，安装 <code>Darkest  Dark  Theme  With  DevStyle</code> 主题</p>
<h3 id="3、代码提示"><a href="#3、代码提示" class="headerlink" title="3、代码提示"></a>3、代码提示</h3><h4 id="1、设置代码提示"><a href="#1、设置代码提示" class="headerlink" title="1、设置代码提示"></a>1、设置代码提示</h4><p>菜单栏：<code>Window -&gt; Preferences -&gt; Java -&gt; Edit -&gt; Content Assist</code></p>
<p>在<code>Auto Action</code>面板中设置代码提示延时和触发。</p>
<p>延时<code>200ms</code>，触发：<code>.qwertyuiopasdfghjklzxcvbnm</code></p>
<img src="/2019/08/27/Eclipse%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/%E4%BB%A3%E7%A0%81%E6%8F%90%E7%A4%BA-1.png" alt="代码提示-1" style="zoom:67%;">



<h4 id="2、优化代码提示"><a href="#2、优化代码提示" class="headerlink" title="2、优化代码提示"></a>2、优化代码提示</h4><p>1、导入并修改源代码</p>
<p>菜单<code>Window -&gt; Show View -&gt; Other -&gt; Plug-ins</code> （如果没有 <code>Plug-ins</code> 则需要<a href="#install-1">安装 Plug-in Development 插件</a>）找到<code>org.eclipse.jface.text</code>，右键<code>Import As -&gt; Source Project</code>。</p>
<p>导入之后工作空间中就会有一个<code>org.eclipse.jface.text</code>项目，在项目中的 <code>src/org/eclipse/jface/text/contentassist/CompletionProposalPopup.java</code> 文件中找到下列语句（第1400行左右）</p>
<p><em>提示：如果导入的项目中没有源码则需要<a href="#install-2">安装 Eclipse Platform SDK 插件</a></em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> triggers = t.getTriggerCharacter();  </span><br><span class="line"><span class="keyword">if</span>(contains(triggers,key))</span><br></pre></td></tr></table></figure>

<p>修改<code>if</code>条件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(key!=<span class="number">0x20</span> &amp;&amp; key!=<span class="string">'='</span> &amp;&amp; key!=<span class="string">';'</span> &amp;&amp; contains(triggers,key))</span><br></pre></td></tr></table></figure>

<p>并将<code>if</code>语句上方的 <code>case &#39;\t&#39;</code> 语句替换：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">'\t'</span>:</span><br><span class="line">    e.doit= <span class="keyword">false</span>;</span><br><span class="line">    insertSelectedProposalWithMask(e.stateMask);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/2019/08/27/Eclipse%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/%E4%BF%AE%E6%94%B9%E6%BA%90%E7%A0%81.png" alt="修改源码"></p>
<p>2、导出 <code>jar</code> 包并替换</p>
<p>选中项目右键<code>Export -&gt; Deployable plug-ins and fragments</code>选择导出目录，导出后会得到Plug的文件夹，里面有一个<code>.jar</code>文件，将文件替换到 <code>eclipse/plugins/</code> 目录下。</p>
<p>如果 <code>eclipse/plugins/</code> 目录下没有文件，则放到 <code>C:/User/用户名/.p2/pool/plugins/</code> 目录下</p>
<hr>
<p><span id="install-1"><strong>安装 <code>Plug-in Development</code> 插件</strong> </span></p>
<p>菜单<code>Help -&gt; Install New Software..</code>，在<code>Work with</code>中输入<code>http://download.eclipse.org/releases/photon/201806271001</code>，搜索安装<code>Eclipse Plug-in Develoment Environment</code></p>
<p><span id="install-2"> <strong>安装 <code>Eclipse Platform SDK</code> 插件</strong></span> </p>
<p>同<code>1</code>中打开<code>Install New Software..</code>，在<code>Work with</code>中输入<code>http://download.eclipse.org/eclipse/updates/4.14(你的Eclipse版本号)</code>，搜索并安装<code>Eclipse Platform SDK</code></p>
<img src="/2019/08/27/Eclipse%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/%E4%BB%A3%E7%A0%81%E6%8F%90%E7%A4%BA-2.png" alt="代码提示-2" style="zoom:67%;">



<h3 id="4、遇到的问题"><a href="#4、遇到的问题" class="headerlink" title="4、遇到的问题"></a>4、遇到的问题</h3><h4 id="1、Market安装插件失败"><a href="#1、Market安装插件失败" class="headerlink" title="1、Market安装插件失败"></a>1、Market安装插件失败</h4><p><img src="/2019/08/27/Eclipse%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E5%A4%B1%E8%B4%A5-1.png" alt="安装插件失败-1"></p>
<p>在详细情况中可以看到有两个<code>jar</code>包下载失败</p>
<p>解决方法：手动下载这两个<code>jar</code>包，并放到<code>Eclip/plugins/</code>目录下(若<code>Eclip/plugins/</code>是空的就放到<code>C:/User/用户名/.p2/pool/plugins</code>目录下)，之后重启<code>Eclipse</code>重新安装插件</p>
]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 安装</title>
    <url>/2020/01/21/Hexo%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<div class="tabs" id="hexo_install"><ul class="nav-tabs"><li class="tab active"><a href="#hexo_install-1">Windows</a></li><li class="tab"><a href="#hexo_install-2">Linux</a></li></ul><div class="tab-content"><div class="tab-pane active" id="hexo_install-1"><h3 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装Git</h3><p> <a href="https://git-scm.com/" target="_blank" rel="noopener">Git 官网</a> 下载安装包进行安装</p>
<p>验证：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>



<h3 id="2、安装NodeJs"><a href="#2、安装NodeJs" class="headerlink" title="2、安装NodeJs"></a>2、安装NodeJs</h3><p><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">NodeJs 官网</a> 下载安装包进行安装</p>
<p>验证：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>



<h3 id="3、安装Hexo"><a href="#3、安装Hexo" class="headerlink" title="3、安装Hexo"></a>3、安装Hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>验证：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="hexo_install-2"><h3 id="1、安装git"><a href="#1、安装git" class="headerlink" title="1、安装git"></a>1、安装git</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">git --version</span><br></pre></td></tr></table></figure>



<h3 id="2、安装nodejs"><a href="#2、安装nodejs" class="headerlink" title="2、安装nodejs"></a>2、安装nodejs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证：</span></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>



<h3 id="3、安装hexo"><a href="#3、安装hexo" class="headerlink" title="3、安装hexo"></a>3、安装hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证：</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
      <categories>
        <category>Hexo 博客</category>
      </categories>
      <tags>
        <tag>Hexo 博客</tag>
      </tags>
  </entry>
  <entry>
    <title>CodeBlocks个性化设置</title>
    <url>/2019/08/08/CodeBlocks%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="0、配置文件路径"><a href="#0、配置文件路径" class="headerlink" title="0、配置文件路径"></a>0、配置文件路径</h3><p><code>default.conf</code>所在位置，若未打开过<code>CodeBlocks</code>先打开一次才会有</p>
<div class="tabs" id="conf_file"><ul class="nav-tabs"><li class="tab active"><a href="#conf_file-1">Windows</a></li><li class="tab"><a href="#conf_file-2">Linux</a></li></ul><div class="tab-content"><div class="tab-pane active" id="conf_file-1"><p><code>C:\Users\&quot;Username&quot;\AppData\Roaming\CodeBlocks\default.conf</code></p></div><div class="tab-pane" id="conf_file-2"><p><code>~/.config/codeblocks/default.conf</code></p></div></div></div>

<a id="more"></a>

<h3 id="1、主题和字体"><a href="#1、主题和字体" class="headerlink" title="1、主题和字体"></a>1、主题和字体</h3><h4 id="1、主题："><a href="#1、主题：" class="headerlink" title="1、主题："></a>1、主题：</h4><p><a href="http://wiki.codeblocks.org/index.php?title=Syntax_highlighting_custom_colour_themes" target="_blank" rel="noopener">官网主题</a></p>
<p>从官网上复制主题代码，将代码粘贴在<code>default.conf</code>文件中，覆盖<code>&lt;colour_sets&gt;</code>的代码段。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">colour_sets</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">cc</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">editor</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">keywords</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">SET4</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">str</span>&gt;</span></span><br><span class="line">							&lt;![CDATA[__cplusplus __GNUC__ __GNUG__]]&gt;</span><br><span class="line">						<span class="tag">&lt;/<span class="name">str</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">SET4</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">keywords</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">editor</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">NAME</span> <span class="attr">bool</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">cc</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">colour_sets</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>保存文件后打开 <code>Settings -&gt; Editor -&gt; Syntax highlighting -&gt; Color  theme</code>选择 <code>modnokai night shift v2</code> 主题，该主题的光标行为黑色，<code>Settings -&gt; Editor -&gt; Margins and caret -&gt; caret</code>将光标调为白色。</p>
<h4 id="2、字体设置："><a href="#2、字体设置：" class="headerlink" title="2、字体设置："></a>2、字体设置：</h4><p><code>Settings -&gt; Editor -&gt; General  settings -&gt; Font</code>选择<code>Courier  New</code> 字体。</p>
<h3 id="2、代码补全"><a href="#2、代码补全" class="headerlink" title="2、代码补全"></a>2、代码补全</h3><p><code>Settings -&gt; Editor -&gt; General  settings -&gt; Code  completion -&gt; Autolaunch  after  typing  #  letters</code>设置为 2​ ，选中 <code>Case  sensitive</code>。</p>
<p><code>Settings -&gt; Editor -&gt; Code  completion</code>  1~9 都选中，延时调到<code>200ms</code> 。</p>
<p><code>Settings -&gt; Editor -&gt; Browse  Tracker</code> 选中 <code>Enable  Browse  Tracker</code> 。</p>
<p><code>Setting -&gt; Editor -&gt; Syntax  highlighting -&gt; Key  Words</code> 将下面的单词复制进去一个空集合。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STANDARD_LIBRARY_NAMES abort ios_base accumulate isalpha allocator islower </span><br><span class="line">auto_ptr ispunct back_inserter isspace bad_alloc istream bad_cast </span><br><span class="line">istream_iterator bind2ndistringstream bitset isupper boolalpha left cerr </span><br><span class="line">less_equalcin list copy logic_error count lower_bound count_if make_pair cout </span><br><span class="line">map dec max deque min endl multimap ends multiset equal_range negate exception </span><br><span class="line">noboolalpha fill noshowbase fill_n noshowpoint find noskipws find_end not1 </span><br><span class="line">find_first_of nounitbuf fixed nouppercase flush nth_element for_each oct </span><br><span class="line">front_inserter of stream fstream ostream getline ostream_iterator hex</span><br><span class="line">ostringstream ifstream out_of_range inner_product pair inserter partial_sort </span><br><span class="line">internal plus priority_queuesqrt ptrdiff_t stable_sort queue stack range_error </span><br><span class="line">strcmp replace strcpy replace_copy string reverse_iterator stringstream right </span><br><span class="line">strlen runtime_error strncpy scientific terminate set tolower set_difference </span><br><span class="line">toupper set_intersection type_info set_union unexpected setfill </span><br><span class="line">uninitialized_copy setprecision unitbuf setw unique showbase unique_copy </span><br><span class="line">showpoint upper_bound size_t uppercase skipwsvector sort STRING_EXPORTS append </span><br><span class="line">assign at begin c_str capacity clear compare copy data empty end erase find </span><br><span class="line">find_first_not_of find_first_of find_last_not_of find_last_of getline insert </span><br><span class="line">length max_size push_back rbegin rend replace reserve resize rfind size substr </span><br><span class="line">swap CPP_ITERATOR size_type iterator const_iterator input_iterator </span><br><span class="line">output_iterator forward_iterator bidirectional_iterator random_iterator </span><br><span class="line">reverse_iterator CPP_USER T N Any fout fin algorithm ofstream regex regex_match </span><br><span class="line">cmatch smatch regex_search regex_replace STANDARD_C_I_O clearerr fclose feof </span><br><span class="line">ferror fflush fgetc fgetpos fgets fopenfprintf fputc fputs fread freopen fscanf </span><br><span class="line">fseek fsetpos ftell fwrite getc getchar gets perrorprintf putc putchar puts </span><br><span class="line">remove rename rewindscanf setbuf setvbuf sprintf sscanf tmpfile tmpnam ungetc </span><br><span class="line">vprintf vfprintf vsprintf STANDARD_C_STRING_AND_CHARACTER atof atoi atol isalnum</span><br><span class="line">isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit</span><br><span class="line">memchr memcmp memcpy memmove memset strcat strchr strcmp strcoll strcpy strcspn </span><br><span class="line">strerrorstrlen strncat strncmp strncpy strpbrk strrchr strspn strstr strtod </span><br><span class="line">strtok strtol strtoul strxfrmtolower toupper</span><br></pre></td></tr></table></figure>



<h3 id="3、自定义模板"><a href="#3、自定义模板" class="headerlink" title="3、自定义模板"></a>3、自定义模板</h3><p><code>Settings -&gt; Editor -&gt; Abbreviations</code>点击 <code>Add</code> 添加模板，将下面的代码复制到模板中。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Problem : `(Problem)</span></span><br><span class="line"><span class="comment">* Date : `NOW_L</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,s,e) for(int i=s;i&lt;=e;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i,s,e) for(int i=s;i&gt;=e;--i)</span></span><br><span class="line"><span class="comment">//using namespace std;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">namespace</span> ysf&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"___%d___\n"</span>,x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"___%d   %d___\n"</span>,x,y);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">(LL x)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"___%lld___\n"</span>,x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">(LL x,LL y)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"___%lld   %lld___\n"</span>,x,y);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"___%.10lf___\n"</span>,x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"___%.10lf   %.10lf___\n"</span>,x,y);&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> ysf::debug;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>,MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> LL INF=<span class="number">1</span>&lt;&lt;<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4、其他"><a href="#4、其他" class="headerlink" title="4、其他"></a>4、其他</h3><p>1、左边行数栏宽度设置：<code>Settings -&gt; Editor -&gt; Margins  and  caret -&gt; Left  margin</code> 设置为 <code>0</code> ，选中<code>Dynamic  setting</code></p>
<p>2、快速注释设置：</p>
<p><code>Settings -&gt; Editor -&gt; Keyboard  shortcuts -&gt; Edit -&gt; Comment</code> 设置为 <code>Ctrl + /</code> 。</p>
<p><code>Settings -&gt; Editor -&gt; Keyboard  shortcuts -&gt; Edit -&gt; Uncomment</code> 设置为 <code>Alt + /</code> 。</p>
<h3 id="5、关闭拼写检查"><a href="#5、关闭拼写检查" class="headerlink" title="5、关闭拼写检查"></a>5、关闭拼写检查</h3><p>1、打开插件管理器</p>
<p><code>Plugins -&gt; Manage  Plugins</code></p>
<p>2、在插件列表中找到 <code>Spell  check</code>并关闭</p>
<p><img src="/2019/08/08/CodeBlocks%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/%E5%85%B3%E9%97%AD%E6%8B%BC%E5%86%99%E6%A3%80%E6%9F%A5.png" alt="关闭拼写检查"></p>
<h3 id="6、个人配置"><a href="#6、个人配置" class="headerlink" title="6、个人配置"></a>6、个人配置</h3><div class="tabs" id="personal-conf"><ul class="nav-tabs"><li class="tab active"><a href="#personal-conf-1">Windows</a></li><li class="tab"><a href="#personal-conf-2">Linux</a></li></ul><div class="tab-content"><div class="tab-pane active" id="personal-conf-1"><p><a href="Windows.zip">配置文件下载(Windows)</a></p></div><div class="tab-pane" id="personal-conf-2"><p><a href="Linux.zip">配置文件下载(Linux)</a></p></div></div></div>]]></content>
      <categories>
        <category>Code Blocks</category>
      </categories>
      <tags>
        <tag>Code Blocks</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客美化</title>
    <url>/2020/02/20/Hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h3 id="1、修改博客中的个人信息"><a href="#1、修改博客中的个人信息" class="headerlink" title="1、修改博客中的个人信息"></a>1、修改博客中的个人信息</h3><p>修改博客跟目下的<code>_config.yml</code>配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Your</span> <span class="string">title</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">'Your subtitle'</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">'Your description'</span></span><br><span class="line"><span class="attr">keywords:</span> </span><br><span class="line"><span class="attr">author:</span> <span class="string">Your</span> <span class="string">name</span></span><br><span class="line"><span class="attr">email:</span> <span class="string">Your</span> <span class="string">email</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2、安装-NexT-主题"><a href="#2、安装-NexT-主题" class="headerlink" title="2、安装 NexT 主题"></a>2、安装 NexT 主题</h3><p><a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">Next官网</a></p>
<p>在博客根目录下从<code>GitHub</code>上克隆<code>NexT</code>主题。(网上的仓库地址是旧版本的)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>



<h3 id="3、配置-NexT主题"><a href="#3、配置-NexT主题" class="headerlink" title="3、配置 NexT主题"></a>3、配置 NexT主题</h3><h4 id="1、启用主题"><a href="#1、启用主题" class="headerlink" title="1、启用主题"></a>1、启用主题</h4><p>编辑站点配置文件<code>_config.yml</code>，</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>



<h4 id="2、选择-Scheme"><a href="#2、选择-Scheme" class="headerlink" title="2、选择 Scheme"></a>2、选择 Scheme</h4><p>编辑主题配置文件 <code>theme/next/_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Scheme Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
<li>Gemini - 在 Pisces 的基础上加上了边框，使得有层次感</li>
</ul>
<h4 id="3、设置语言"><a href="#3、设置语言" class="headerlink" title="3、设置语言"></a>3、设置语言</h4><p>编辑主题配置文件 <code>theme/next/_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br></pre></td></tr></table></figure>

<p>常用语言对应代码</p>
<table>
<thead>
<tr>
<th>语言</th>
<th>代码</th>
<th>设定示例</th>
</tr>
</thead>
<tbody><tr>
<td>English</td>
<td><code>en</code></td>
<td><code>language: en</code></td>
</tr>
<tr>
<td>简体中文</td>
<td><code>zh-Hans</code></td>
<td><code>language: zh-Hans</code></td>
</tr>
<tr>
<td>繁體中文</td>
<td><code>zh-hk</code> 或者 <code>zh-tw</code></td>
<td><code>language: zh-hk</code></td>
</tr>
</tbody></table>
<h4 id="4、设置菜单"><a href="#4、设置菜单" class="headerlink" title="4、设置菜单"></a>4、设置菜单</h4><p>编辑主题配置文件 <code>theme/next/_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="comment"># When running the site in a subdirectory (e.g. yoursite.com/blog), remove the leading slash from link value (/archives -&gt; archives).</span></span><br><span class="line"><span class="comment"># External url should start with http:// or https://</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment"># commonweal: /404/ || heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">键值</th>
<th align="left">设定值</th>
<th align="left">显示文本（简体中文）</th>
</tr>
</thead>
<tbody><tr>
<td align="left">home</td>
<td align="left"><code>home: /</code></td>
<td align="left">主页</td>
</tr>
<tr>
<td align="left">archives</td>
<td align="left"><code>archives: /archives</code></td>
<td align="left">归档页</td>
</tr>
<tr>
<td align="left">categories</td>
<td align="left"><code>categories: /categories</code></td>
<td align="left">分类页</td>
</tr>
<tr>
<td align="left">tags</td>
<td align="left"><code>tags: /tags</code></td>
<td align="left">标签页</td>
</tr>
<tr>
<td align="left">about</td>
<td align="left"><code>about: /about</code></td>
<td align="left">关于页面</td>
</tr>
<tr>
<td align="left">commonweal</td>
<td align="left"><code>commonweal: /404.html</code></td>
<td align="left">公益 404</td>
</tr>
</tbody></table>
<p>除了<code>home</code>和<code>archives</code>其他项都需要手动创建页面，创建<code>Tags</code>页面示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">"tags"</span></span><br></pre></td></tr></table></figure>

<p>编辑<code>source/tags/index.md</code>文件</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2020-02-20 19:32:45</span><br><span class="line">type: "tags"</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>如果想要修改菜单项显示的文本，则修改<code>next</code>中相对应的翻译即可。比如中文则修改<code>theme/next/languages/zh-Hans.yml</code>文件中的翻译。</p>
<h4 id="5、设置侧栏"><a href="#5、设置侧栏" class="headerlink" title="5、设置侧栏"></a>5、设置侧栏</h4><p>1、设置侧栏的位置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Position.</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment"># position: right</span></span><br></pre></td></tr></table></figure>



<p>2、设置侧栏显示的时机</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Display (only for Muse | Mist), available values:</span></span><br><span class="line">  <span class="comment">#  - post    expand on posts automatically. Default.</span></span><br><span class="line">  <span class="comment">#  - always  expand for all pages automatically.</span></span><br><span class="line">  <span class="comment">#  - hide    expand only when click on the sidebar toggle icon.</span></span><br><span class="line">  <span class="comment">#  - remove  totally remove sidebar including sidebar toggle.</span></span><br><span class="line">  <span class="attr">display:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>post</code> - 默认行为，在文章页面（拥有目录列表）时显示</li>
<li><code>always</code> - 在所有页面中都显示</li>
<li><code>hide</code> - 在所有页面中都隐藏（可以手动展开）</li>
<li><code>remove</code> - 完全移除</li>
</ul>
<p>3、设置头像</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">地址</th>
<th align="left">值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">完整的互联网 URI</td>
<td align="left"><code>http://example.com/avatar.png</code></td>
</tr>
<tr>
<td align="left">站点内的地址</td>
<td align="left">将头像放置==主题目录下==的 <code>source/uploads/</code> （新建 uploads 目录若不存在）  配置为：<code>avatar: /uploads/avatar.png</code>或者 放置在 <code>source/images/</code> 目录下  配置为：<code>avatar: /images/avatar.png</code></td>
</tr>
</tbody></table>
<p>4、设置社交链接</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/504703038</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:ysf504703038@163.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="comment"># Weibo: https://weibo.com/yourname || weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || skype</span></span><br></pre></td></tr></table></figure>



<p>5、禁用目录自动标记章节数字</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Table of Contents in the Sidebar</span></span><br><span class="line"><span class="comment"># Front-matter variable (unsupport wrap expand_all).</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>





<h4 id="6、设置代码样式和高亮"><a href="#6、设置代码样式和高亮" class="headerlink" title="6、设置代码样式和高亮"></a>6、设置代码样式和高亮</h4><p>修改插入代码的样式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">eighties</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure>



<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">eighties</span></span><br></pre></td></tr></table></figure>

<p>NexT 使用 <a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="noopener">Tomorrow Theme</a> 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 <code>normal</code> 主题，可选的值有 <code>normal</code>，<code>night</code>， <code>night blue</code>， <code>night bright</code>， <code>night eighties</code>：</p>
<div align="left">
<img src="/2020/02/20/Hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/tomorrow.png" alt="tomorrow" style="zoom:48%;float:left;border:solid 1px 000;"><img src="/2020/02/20/Hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/tomorrow-night.png" alt="tomorrow-night" style="zoom:48%;float:left;border:solid 1px 000;"><img src="/2020/02/20/Hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/tomorrow-night-blue.png" alt="tomorrow-night-blue" style="zoom:48%;float:left;border:solid 1px 000;"><img src="/2020/02/20/Hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/tomorrow-night-bright.png" alt="tomorrow-night-bright" style="zoom:48%;float:left;border:solid 1px 000;"><img src="/2020/02/20/Hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/tomorrow-night-eighties.png" alt="tomorrow-night-eighties" style="zoom:48%;float:left;border:solid 1px 000;">
</div><div style="clear:both;">






<h4 id="7、站点建立时间"><a href="#7、站点建立时间" class="headerlink" title="7、站点建立时间"></a>7、站点建立时间</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">since:</span> <span class="number">2017</span></span><br></pre></td></tr></table></figure>



<h4 id="8、设置背景动画"><a href="#8、设置背景动画" class="headerlink" title="8、设置背景动画"></a>8、设置背景动画</h4><p> 1、安装<code>canvas-nest</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> theme/next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-nest <span class="built_in">source</span>/lib/canvas-nest</span><br></pre></td></tr></table></figure>



<p>2、修改主题配置文件<code>sheme/next/_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># Display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"160,160,160"</span> <span class="comment"># RGB values, use `,` to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.7</span> <span class="comment"># The opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">200</span> <span class="comment"># The number of lines</span></span><br></pre></td></tr></table></figure>



<h4 id="9、首页文章预览"><a href="#9、首页文章预览" class="headerlink" title="9、首页文章预览"></a>9、首页文章预览</h4><p>在<code>Markdown</code>文件中添加<code>&lt;!--more--&gt;</code>即可。</p>
<h4 id="10、站内文章链接"><a href="#10、站内文章链接" class="headerlink" title="10、站内文章链接"></a>10、站内文章链接</h4><p><code>Markdown</code>内使用如下语句</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% post_link 文章的文件名 点我进行跳转 %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：文件名没有后缀且不能有空格</p>
<h4 id="11、站内搜索"><a href="#11、站内搜索" class="headerlink" title="11、站内搜索"></a>11、站内搜索</h4><p>1、安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search</span><br><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>

<p>2、配置<code>./_config.yml</code>文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>3、配置<code>./themes/_config.yml</code>文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">-1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>





<h4 id="12、文章中公式渲染"><a href="#12、文章中公式渲染" class="headerlink" title="12、文章中公式渲染"></a>12、文章中公式渲染</h4><p>1、下载<code>hexo-renderer-kramed</code>插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>

<p>2、修改<code>node_modules\kramed\lib\rules\inline.js</code>文件</p>
<p>原文第11行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span></span><br><span class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span>,</span><br></pre></td></tr></table></figure>

<p>原文第20行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span></span><br><span class="line">em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure>

<p>3、在<code>themes/next/_config.yml</code>中进行设置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    <span class="attr">mhchem:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) required for full Katex support.</span></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h4 id="13、选项卡"><a href="#13、选项卡" class="headerlink" title="13、选项卡"></a>13、选项卡</h4><p><code>Next</code>内置了<code>tabs</code>标签</p>
<p>官方教程：<a href="https://theme-next.org/docs/tag-plugins/tabs.html" target="_blank" rel="noopener">Tabs | NexT</a></p>
<div class="tabs" id="tabs"><ul class="nav-tabs"><li class="tab active"><a href="#tabs-1">实现效果</a></li><li class="tab"><a href="#tabs-2">实现代码</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tabs-1"><div class="tabs" id="tabs-test"><ul class="nav-tabs"><li class="tab active"><a href="#tabs-test-1">first tab</a></li><li class="tab"><a href="#tabs-test-2">second tab</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tabs-test-1"><p> first</p></div><div class="tab-pane" id="tabs-test-2"><p> second</p></div></div></div></div><div class="tab-pane" id="tabs-2"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs %&#125;</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab first tab --&gt;</span></span></span><br><span class="line"> first</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- tab  second tab --&gt;</span></span></span><br><span class="line"> second</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div></div></div>





<h4 id="14、统计字数"><a href="#14、统计字数" class="headerlink" title="14、统计字数"></a>14、统计字数</h4><p>1、安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time</span><br></pre></td></tr></table></figure>

<p>2、修改站点配置文件<code>./_config.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h4 id="15、隐藏文章"><a href="#15、隐藏文章" class="headerlink" title="15、隐藏文章"></a>15、隐藏文章</h4><p>1、安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-hide-posts</span><br></pre></td></tr></table></figure>

<p>2、在要隐藏文章的<code>Front-matter</code>中添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hidden: true</span><br></pre></td></tr></table></figure>



<h4 id="16、隐藏显示某一元素"><a href="#16、隐藏显示某一元素" class="headerlink" title="16、隐藏显示某一元素"></a>16、隐藏显示某一元素</h4><p>直接在文章中插入 <code>HTML</code> 和 <code>Script</code> 就可以。</p>
<script>
function hide() {
    var code = document.getElementById('btn-code');
    var btn = document.getElementById('btn')
    if (code.style.display=="none") {
        code.style.display="";
        btn.textContent="点击隐藏下方代码";
    }
    else{
        code.style.display="none";
        btn.textContent="点击显示代码";
    }
}
</script>



<div class="tabs" id="hide-elements"><ul class="nav-tabs"><li class="tab active"><a href="#hide-elements-1">实现效果</a></li><li class="tab"><a href="#hide-elements-2">实现代码</a></li></ul><div class="tab-content"><div class="tab-pane active" id="hide-elements-1"><p><button id="btn" type="button" onclick="hide()">点击隐藏下方代码</button></p>
<span id="btn-code">

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 上方按钮在md中的代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"hide-button"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"hide()"</span>&gt;</span>点击隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

</span></div><div class="tab-pane" id="hide-elements-2"><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"hide-button"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"hide()"</span>&gt;</span></span>点击隐藏下方代码<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"btn-code"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="code">```</span> html</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 上方按钮在md中的代码 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"hide-button"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"hide()"</span>&gt;</span></span>点击隐藏<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;/span&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;script&gt;</span></span><br><span class="line"><span class="code">function hide() &#123;</span></span><br><span class="line"><span class="code">    var code = document.getElementById('btn-code');</span></span><br><span class="line"><span class="code">    var btn = document.getElementById('btn')</span></span><br><span class="line"><span class="code">    if (code.style.display=="none") &#123;</span></span><br><span class="line"><span class="code">        code.style.display="";</span></span><br><span class="line"><span class="code">        btn.textContent="点击隐藏下方代码";</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    else&#123;</span></span><br><span class="line"><span class="code">        code.style.display="none";</span></span><br><span class="line"><span class="code">        btn.textContent="点击显示代码";</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></div></div></div>



<h4 id="17、放大图片"><a href="#17、放大图片" class="headerlink" title="17、放大图片"></a>17、放大图片</h4><p>下载图片浏览放大插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> next/<span class="built_in">source</span>/lib</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-fancybox3 fancybox</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>效果</p>
<img src="/2020/02/20/Hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/%E5%A4%A7%E5%9B%BE%E6%B5%8F%E8%A7%88.png" alt="大图浏览" style="zoom: 50%;">









<h4 id="1、集成常用的第三方服务"><a href="#1、集成常用的第三方服务" class="headerlink" title="-1、集成常用的第三方服务"></a>-1、集成常用的第三方服务</h4><p>留坑</p>
<h3 id="0、参考"><a href="#0、参考" class="headerlink" title="0、参考"></a>0、参考</h3><p><a href="https://theme-next.org" target="_blank" rel="noopener">Theme NexT</a></p>
</div>]]></content>
      <categories>
        <category>Hexo 博客</category>
      </categories>
      <tags>
        <tag>Hexo 博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux攻略--(一)基础设置</title>
    <url>/2019/04/13/Linux%E6%94%BB%E7%95%A5--(%E4%B8%80)%E5%9F%BA%E7%A1%80%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="1、终端设置"><a href="#1、终端设置" class="headerlink" title="1、终端设置"></a>1、终端设置</h3><p>编辑-首选项 100*30 字体大小 15</p>
<h3 id="2、软件更新"><a href="#2、软件更新" class="headerlink" title="2、软件更新"></a>2、软件更新</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="3、创建应用程序图标"><a href="#3、创建应用程序图标" class="headerlink" title="3、创建应用程序图标"></a>3、创建应用程序图标</h3><p>1、创建文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit /usr/share/applications/应用程序名.desktop</span><br></pre></td></tr></table></figure>

<p>2、文件中输入下面内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=图标名称</span><br><span class="line">Comment=描述</span><br><span class="line">Exec=可运行文件路径</span><br><span class="line">Icon=图标路径</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">StartupNotify=<span class="literal">true</span></span><br><span class="line">Type=Application</span><br><span class="line">Categories=Application;Development;</span><br></pre></td></tr></table></figure>

<p>3、修改权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod u+x /usr/share/applications/应用程序名.desktop</span><br></pre></td></tr></table></figure>



<h3 id="4、安装-TopIcons-Plus"><a href="#4、安装-TopIcons-Plus" class="headerlink" title="4、安装 TopIcons Plus"></a>4、安装 TopIcons Plus</h3><p>软件中心搜索 TopIcons Plus 。</p>
<h3 id="5、为Ubuntu-Dock启用“最小化点击”"><a href="#5、为Ubuntu-Dock启用“最小化点击”" class="headerlink" title="5、为Ubuntu Dock启用“最小化点击”"></a>5、为Ubuntu Dock启用“最小化点击”</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gsettings <span class="built_in">set</span> org.gnome.shell.extensions.dash-to-dock click-action <span class="string">'minimize'</span></span><br></pre></td></tr></table></figure>



<h3 id="6、安装-GNOME-Tweak-Tool"><a href="#6、安装-GNOME-Tweak-Tool" class="headerlink" title="6、安装 GNOME Tweak Tool"></a>6、安装 GNOME Tweak Tool</h3><p><a href="apt://gnome-tweak-tool/">点击安装</a></p>
<h3 id="7、添加SSH"><a href="#7、添加SSH" class="headerlink" title="7、添加SSH"></a>7、添加SSH</h3><p>将SSH放到<code>~/.ssh</code>目录下，并执行下列语句。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Ubuntu Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 搭建博客并在 GitHub 发布</title>
    <url>/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/</url>
    <content><![CDATA[<h3 id="1、Hexo搭建博客"><a href="#1、Hexo搭建博客" class="headerlink" title="1、Hexo搭建博客"></a>1、Hexo搭建博客</h3><h4 id="1、Hexo-初始化"><a href="#1、Hexo-初始化" class="headerlink" title="1、Hexo 初始化"></a>1、Hexo 初始化</h4><p>在本地新建一个文件夹，并在该目录下执行<code>hexo init</code>命令，使用Hexo的初始框架。</p>
<h4 id="2、博客配置"><a href="#2、博客配置" class="headerlink" title="2、博客配置"></a>2、博客配置</h4><p>接下来可以根据自己的兴趣喜好来配置自己的博客。</p>
<p>可以使用<code>hexo n &quot;title&quot;</code>来新建一个页面。</p>
<h4 id="3、本地测试"><a href="#3、本地测试" class="headerlink" title="3、本地测试"></a>3、本地测试</h4><p>在博客的根目录下执行命令，让其在本地运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清理缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 博客生成</span></span><br><span class="line"><span class="comment"># hexo g</span></span><br><span class="line">hexo generate </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在本地运行</span></span><br><span class="line"><span class="comment"># hexo s</span></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>





<h3 id="2、在-GitHub-上发布"><a href="#2、在-GitHub-上发布" class="headerlink" title="2、在 GitHub 上发布"></a>2、在 GitHub 上发布</h3><h4 id="1、创建仓库"><a href="#1、创建仓库" class="headerlink" title="1、创建仓库"></a>1、创建仓库</h4><p>仓库名称随意（网上的教程仓库名称都是用户名+github.io。随意名称的话，最后发布的时候改一下发布的仓库就可以了。）</p>
<p>在仓库的设置中设置 GitHub Pages。</p>
<div>
    <img src="/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/创建仓库-1.png" alt="创建仓库-1" style="zoom:80%;">
    <img src="/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/创建仓库-2.png" alt="创建仓库-2" style="zoom:80%;">
</div>








<h4 id="2、在本地配置GitHub信息"><a href="#2、在本地配置GitHub信息" class="headerlink" title="2、在本地配置GitHub信息"></a>2、在本地配置GitHub信息</h4><p>在命令行中执行<code>git config --global user.email &quot;Your Email&quot;</code>和<code>git config --global user.name &quot;Your Name&quot;</code>。<code>Your Email</code>和<code>Your Name</code>换成你的用户名和邮箱。</p>
<h4 id="3、添加SSH"><a href="#3、添加SSH" class="headerlink" title="3、添加SSH"></a>3、添加SSH</h4><p>在命令行中执行<code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code>生成 SSH 。</p>
<p>找到生成的 <code>id_rsa.pub</code>文件，通常是在<code>C:\Users\&quot;Your UserName&quot;\.ssh</code>目录下。</p>
<p>然后在GitHub中的个人设置中添加SSH，将 <code>id_rsa.pub</code>文件的内容复制进去。</p>
<div align="left">
    <img src="/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/添加SSH-1.png" alt="添加SSH-1" style="zoom:80%;">
    <img src="/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/添加SSH-2.png" alt="添加SSH-2" style="zoom:70%;">
    <img src="/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/添加SSH-3.png" alt="添加SSH-3" style="zoom:70%;">
</div>




<h4 id="4、修改博客的发布地址"><a href="#4、修改博客的发布地址" class="headerlink" title="4、修改博客的发布地址"></a>4、修改博客的发布地址</h4><p>修改博客根目录下的<code>_config.yml</code>文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://"用户名".github.io/"仓库名称"/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/"仓库名称"/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing '.html' from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:"用户名"/"仓库名称".git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>



<h4 id="5、发布"><a href="#5、发布" class="headerlink" title="5、发布"></a>5、发布</h4><p>在博客的根目录下执行命令发布到 GitHub</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清理缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 博客生成</span></span><br><span class="line"><span class="comment"># hexo g</span></span><br><span class="line">hexo generate </span><br><span class="line"></span><br><span class="line"><span class="comment"># 在本地运行</span></span><br><span class="line"><span class="comment"># hexo d</span></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>在发布过程中遇到个小错误。。。。</p>
<div align="left">
    <img src="/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/发布-1.png" alt="发布-1" style="zoom:80%;">
</div>


<p>执行<code>npm install --save hexo-deployer-git</code>来解决问题。</p>
<h3 id="3、Hexo双线部署"><a href="#3、Hexo双线部署" class="headerlink" title="3、Hexo双线部署"></a>3、<code>Hexo</code>双线部署</h3><p>同时部署到 <code>GitHub Page</code> 和 <code>Gitee Pages</code> 。除了<code>Gitee Pages</code>还可以部署到<code>Coding Pages</code>，在部署到<code>Coding Pages</code>时宕机了好几次所以用了<code>Gitee Pages</code>。</p>
<h4 id="1、创建仓库-1"><a href="#1、创建仓库-1" class="headerlink" title="1、创建仓库"></a>1、创建仓库</h4><p>新建仓库，仓库名称与你的用户名相同，就像<code>GitHub Pages</code>那样。</p>
<img src="/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/Gitee%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93.png" alt="Gitee创建仓库" style="zoom: 67%;">

<h4 id="2、开启Gitee-Pages服务"><a href="#2、开启Gitee-Pages服务" class="headerlink" title="2、开启Gitee Pages服务"></a>2、开启<code>Gitee Pages</code>服务</h4><p>进入仓库开启<code>Gitee Pages</code>服务</p>
<div align="left">
    <img src="/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/%E5%BC%80%E5%90%AFGitee%20Pages%E6%9C%8D%E5%8A%A1-1.png" alt="开启Gitee Pages服务-1" style="zoom:67%;">
    <img src="/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/%E5%BC%80%E5%90%AFGitee%20Pages%E6%9C%8D%E5%8A%A1-2.png" alt="开启Gitee Pages服务-2" style="zoom:90%;">
</div>




<h4 id="3、添加SSH-1"><a href="#3、添加SSH-1" class="headerlink" title="3、添加SSH"></a>3、添加SSH</h4><p>进入<code>Gitee</code>的个人设置，添加<code>SSH</code>，与<code>Github</code>使用相同的<code>SSH</code>就可以。</p>
<img src="/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/Gitee%E6%B7%BB%E5%8A%A0SSH.png" alt="Gitee添加SSH" style="zoom:67%;">



<h4 id="5、修改Hexo配置文件"><a href="#5、修改Hexo配置文件" class="headerlink" title="5、修改Hexo配置文件"></a>5、修改Hexo配置文件</h4><p>修改<code>_config.yml</code>文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:504703038/504703038.github.io.git</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">git@gitee.com:Oort_t/Oort_t.git</span></span><br><span class="line">    <span class="comment"># coding: git@e.coding.net:oort/oort.coding.me.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>



<h3 id="4、在百度收录网站"><a href="#4、在百度收录网站" class="headerlink" title="4、在百度收录网站"></a>4、在百度收录网站</h3><p>在百度收录网站，使得网站能够在百度搜得到。因为<code>GitHub</code>禁止了百度爬虫，所以要实现双线部署，让百度爬虫从<code>Gitee</code>收录。</p>
<h4 id="0、查看网站是否被收录"><a href="#0、查看网站是否被收录" class="headerlink" title="0、查看网站是否被收录"></a>0、查看网站是否被收录</h4><p>输入 <code>site:域名</code> 来查看域名是否被搜索引擎收录</p>
<img src="/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/%E6%9F%A5%E7%9C%8B%E6%94%B6%E5%BD%95%E7%8A%B6%E5%86%B5.png" alt="查看收录状况" style="zoom:67%;">



<h4 id="1、在百度资源平台添加网站"><a href="#1、在百度资源平台添加网站" class="headerlink" title="1、在百度资源平台添加网站"></a>1、在百度资源平台添加网站</h4><p><a href="https://ziyuan.baidu.com/site#/" target="_blank" rel="noopener">百度资源平台</a></p>
<h5 id="1、添加网站"><a href="#1、添加网站" class="headerlink" title="1、添加网站"></a>1、添加网站</h5><img src="/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/%E5%9C%A8%E7%99%BE%E5%BA%A6%E8%B5%84%E6%BA%90%E5%B9%B3%E5%8F%B0%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%AB%99-1.png" alt="在百度资源平台添加网站-1" style="zoom:60%;">

<h5 id="2、验证"><a href="#2、验证" class="headerlink" title="2、验证"></a>2、验证</h5><p>验证使用<code>HTML</code>标签验证</p>
<img src="/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/%E5%9C%A8%E7%99%BE%E5%BA%A6%E8%B5%84%E6%BA%90%E5%B9%B3%E5%8F%B0%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%AB%99-2.png" alt="在百度资源平台添加网站-2" style="zoom:67%;">

<p>将验证标签<code>&lt;meta name=&quot;baidu-site-verification&quot; content=&quot;**********&quot; /&gt;</code>放到<code>./themes/next/layout/_partials/head/head.swing</code>文件的前几行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;meta name=<span class="string">"baidu-site-verification"</span> content=<span class="string">"**********"</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>完成之后发布博客来完成验证。</p>
<h4 id="2、提交百度搜索"><a href="#2、提交百度搜索" class="headerlink" title="2、提交百度搜索"></a>2、提交百度搜索</h4><h5 id="1、主动推送"><a href="#1、主动推送" class="headerlink" title="1、主动推送"></a>1、主动推送</h5><p>安装插件<code>npm install hexo-baidu-url-submit --save</code>，并在<code>_config.yml</code>中添加配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 百度推送</span></span><br><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">100</span>                  <span class="comment"># 提交最新的多少个链接</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">oort_t.gitee.io</span>     <span class="comment"># 在百度站长平台中添加的域名</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">****************</span>   <span class="comment"># 密钥</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span>      <span class="comment"># 文本文档的地址， 新链接会保存在此文本文档里</span></span><br></pre></td></tr></table></figure>

<p>其中 <code>token</code>可以再链接提交中找到</p>
<div align="left">
    <img src="/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/%E4%B8%BB%E5%8A%A8%E6%8E%A8%E9%80%81-1.png" alt="主动推送-1" style="zoom:70%;">
    <img src="/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/%E4%B8%BB%E5%8A%A8%E6%8E%A8%E9%80%81-2.png" alt="主动推送-2" style="zoom:67%;">
</div>


<p>更新<code>_config.yml</code>配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:504703038/504703038.github.io.git</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">git@gitee.com:Oort_t/Oort_t.git</span></span><br><span class="line">    <span class="comment"># coding: git@e.coding.net:oort/oort.coding.me.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span>   <span class="comment"># 百度主动推送</span></span><br></pre></td></tr></table></figure>

<p>在执行<code>hexo d</code>部署时就会自动推送，成功推送的标志</p>
<p><img src="/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/%E4%B8%BB%E5%8A%A8%E6%8E%A8%E9%80%81-3.png" alt="主动推送-3"></p>
<p><strong>注意</strong>：<code>_config.yml</code>中的<code>url</code>要与平台中添加的网站一致</p>
<h5 id="2、自动推送"><a href="#2、自动推送" class="headerlink" title="2、自动推送"></a>2、自动推送</h5><p>将自动推送的代码放到<code>./themes/next/layout/_third-party/baidu-push.swing</code>文件中</p>
<img src="/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E5%9C%A8GitHub%E5%8F%91%E5%B8%83/%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81.png" alt="自动推送" style="zoom:67%;">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;%- <span class="keyword">if</span> theme.baidu_push %&#125;</span><br><span class="line">	&lt;script&gt;</span><br><span class="line">		(function()&#123;</span><br><span class="line">		    <span class="keyword">var</span> bp = document.createElement(<span class="string">'script'</span>);</span><br><span class="line">		    <span class="keyword">var</span> curProtocol = window.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">		    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">		        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;</span><br><span class="line">		    &#125;</span><br><span class="line">		    <span class="keyword">else</span> &#123;</span><br><span class="line">		        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span><br><span class="line">		    &#125;</span><br><span class="line">		    <span class="keyword">var</span> s = document.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">		    s.parentNode.insertBefore(bp, s);</span><br><span class="line">		&#125;)();</span><br><span class="line">  	&lt;/script&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>

<p>更新<code>./themes/next/_config.yml</code>配置，将<code>baidu_push</code>设置为<code>true</code>(大约在<code>500</code>行左右)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">baidu_push:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h3 id="0、参考"><a href="#0、参考" class="headerlink" title="0、参考"></a>0、参考</h3><p><a href="https://blog.csdn.net/qq_36759224/article/details/100899489" target="_blank" rel="noopener">Hexo 博客提交百度、谷歌搜索引擎收录</a></p>
]]></content>
      <categories>
        <category>Hexo 博客</category>
      </categories>
      <tags>
        <tag>Hexo 博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux攻略--(三)编程环境搭建</title>
    <url>/2019/04/13/Linux%E6%94%BB%E7%95%A5--(%E4%B8%89)%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="1、-Hexo环境搭建"><a href="#1、-Hexo环境搭建" class="headerlink" title="1、 Hexo环境搭建"></a>1、 Hexo环境搭建</h3><h4 id="1、安装git"><a href="#1、安装git" class="headerlink" title="1、安装git"></a>1、安装git</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>

<h4 id="2、安装nodejs"><a href="#2、安装nodejs" class="headerlink" title="2、安装nodejs"></a>2、安装nodejs</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="3、安装hexo"><a href="#3、安装hexo" class="headerlink" title="3、安装hexo"></a>3、安装hexo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install hexo-cli -g</span><br></pre></td></tr></table></figure>



<h3 id="2、安装MySQL"><a href="#2、安装MySQL" class="headerlink" title="2、安装MySQL"></a>2、安装MySQL</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装(v5.7)</span></span><br><span class="line">sudo apt install mysql-server -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化配置</span></span><br><span class="line">sudo mysql_secure_installation</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看mysql状态</span></span><br><span class="line">sudo service mysql status</span><br></pre></td></tr></table></figure>



<h3 id="3、C-编程环境"><a href="#3、C-编程环境" class="headerlink" title="3、C++编程环境"></a>3、C++编程环境</h3><h4 id="1、安装-gcc、g"><a href="#1、安装-gcc、g" class="headerlink" title="1、安装 gcc、g++"></a>1、安装 gcc、g++</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install g++</span><br><span class="line">sudo apt install gcc</span><br></pre></td></tr></table></figure>



<h4 id="2、添加-CodeBlocks-源"><a href="#2、添加-CodeBlocks-源" class="headerlink" title="2、添加 CodeBlocks 源"></a>2、添加 CodeBlocks 源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:damien-moore/codeblocks-stable</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>



<h4 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install codeblocks codeblocks-contrib</span><br></pre></td></tr></table></figure>



<h4 id="4、CodeBlocks配置"><a href="#4、CodeBlocks配置" class="headerlink" title="4、CodeBlocks配置"></a>4、CodeBlocks配置</h4><a href="/2019/08/08/CodeBlocks%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/" title="CodeBlocks个性化设置">CodeBlocks个性化设置</a>



<h3 id="4、-Java编程环境"><a href="#4、-Java编程环境" class="headerlink" title="4、 Java编程环境"></a>4、 Java编程环境</h3><h4 id="1、安装-JDK"><a href="#1、安装-JDK" class="headerlink" title="1、安装 JDK"></a>1、安装 JDK</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openjdk-11-jre-headless</span><br></pre></td></tr></table></figure>



<h4 id="2、安装开发工具"><a href="#2、安装开发工具" class="headerlink" title="2、安装开发工具"></a>2、安装开发工具</h4><div class="tabs" id="java_developer"><ul class="nav-tabs"><li class="tab active"><a href="#java_developer-1">Eclipse 安装</a></li><li class="tab"><a href="#java_developer-2">Eclipse JEE 安装</a></li></ul><div class="tab-content"><div class="tab-pane active" id="java_developer-1"><p>通过Ubuntu软件中心安装。</p></div><div class="tab-pane" id="java_developer-2"><p>从官网下载安装包</p>
<p><a href="https://www.eclipse.org/downloads/packages/" target="_blank" rel="noopener">官网下载</a></p>
<p>选择<code>Eclipse IDE for Enterprise Java Developers</code>下载。</p>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压安装包</span></span><br><span class="line">tar -xzvf eclipse-jee-2020-03-R-incubation-linux-gtk-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压后得到 eclipse 文件夹，将 eclipse 文件夹移动到 /usr/share 或 /opt/ 目录下</span></span><br><span class="line">sudo cp -r eclipse /usr/share</span><br></pre></td></tr></table></figure>

<p>创建图标（可参考攻略一中的“创建应用程序图标”）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建图标文件</span></span><br><span class="line">sudo gedit /usr/share/applications/eclipse.desktop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件中填充以下内容</span></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=Eclipse</span><br><span class="line">Comment=Eclipse JEE</span><br><span class="line">Exec=/usr/share/eclipse/eclipse</span><br><span class="line">Icon=/usr/share/eclipse/icon.xpm</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">StartupNotify=<span class="literal">true</span></span><br><span class="line">Type=Application</span><br><span class="line">Categories=Application;Development;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件权限</span></span><br><span class="line">sudo chmod u+x /usr/share/applications/eclipse.desktop</span><br></pre></td></tr></table></figure></div></div></div>



<h4 id="3、配置Tomcat"><a href="#3、配置Tomcat" class="headerlink" title="3、配置Tomcat"></a>3、配置Tomcat</h4><p>1、下载</p>
<p><a href="https://tomcat.apache.org/" target="_blank" rel="noopener">官网</a>选择最先版本，或者以前版本都可（要注意与JDK是否兼容）。</p>
<p>下载页面选择<code>Core</code>版本下载</p>
<p>2、安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xzvf apache-tomcat-9.0.36.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压后得到 apache-tomcat-9.0.36 文件夹，将 apache-tomcat-9.0.36 文件夹移动到 /usr/share 或 /opt/ 目录下</span></span><br><span class="line">sudo cp -r apache-tomcat-9.0.36 /usr/share</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件权限</span></span><br><span class="line">sudo chmod 755 -R /usr/share/apache-tomcat-9.0.36</span><br></pre></td></tr></table></figure>

<p>3、验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动Tomcat</span></span><br><span class="line">sudo /usr/share/apache-tomcat-9.0.36/bin/startup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用浏览器访问 http://localhost:8080/ 如果可以看到Tomcat页面表示安装成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭Tomcat</span></span><br><span class="line">sudo /usr/share/apache-tomcat-9.0.36/bin/shutdown.sh</span><br></pre></td></tr></table></figure>



<h4 id="4、安装Maven"><a href="#4、安装Maven" class="headerlink" title="4、安装Maven"></a>4、安装Maven</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt-get install maven</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">mvn -v</span><br></pre></td></tr></table></figure>



<h4 id="5、安装Postman"><a href="#5、安装Postman" class="headerlink" title="5、安装Postman"></a>5、安装Postman</h4><p><a href="https://www.postman.com/downloads/" target="_blank" rel="noopener">官网</a>下载安装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xzvf Postman-linux-x64-7.26.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将解压后的文件夹移动到 /usr/share目录</span></span><br><span class="line">sudo cp -r Postman /usr/share/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图标文件</span></span><br><span class="line">sudo gedit /usr/share/applications/postman.desktop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件中填充以下内容</span></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=Postman</span><br><span class="line">Comment=Postman</span><br><span class="line">Exec=/usr/share/Postman/Postman</span><br><span class="line">Icon=/usr/share/Postman/icon.png</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">StartupNotify=<span class="literal">true</span></span><br><span class="line">Type=Application</span><br><span class="line">Categories=Application;Development;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件权限</span></span><br><span class="line">sudo chmod u+x /usr/share/applications/postman.desktop</span><br></pre></td></tr></table></figure>

<p><em>安装包内可能没有图标，自己找一个或者用从官网图标扣下来的<a href="./icon.png">图片</a></em></p>
<h3 id="5、Python编程环境搭建"><a href="#5、Python编程环境搭建" class="headerlink" title="5、Python编程环境搭建"></a>5、Python编程环境搭建</h3><h4 id="1、安装Python"><a href="#1、安装Python" class="headerlink" title="1、安装Python"></a>1、安装Python</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install python3</span><br><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure>



<h4 id="2、安装-VS-Code"><a href="#2、安装-VS-Code" class="headerlink" title="2、安装 VS Code"></a>2、安装 VS Code</h4><p><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">官网</a>下载安装包</p>
<h4 id="3、VS-Code-配置"><a href="#3、VS-Code-配置" class="headerlink" title="3、VS Code 配置"></a>3、VS Code 配置</h4>



<h4 id="4、安装pip"><a href="#4、安装pip" class="headerlink" title="4、安装pip"></a>4、安装pip</h4><div class="tabs" id="pip_install"><ul class="nav-tabs"><li class="tab active"><a href="#pip_install-1">Python 2.x</a></li><li class="tab"><a href="#pip_install-2">Python 3.x</a></li></ul><div class="tab-content"><div class="tab-pane active" id="pip_install-1"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="pip_install-2"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure></div></div></div>



<h4 id="5、更换pip镜像源"><a href="#5、更换pip镜像源" class="headerlink" title="5、更换pip镜像源"></a>5、更换pip镜像源</h4><p><code>Linux</code>：</p>
<p>修改<code>~/.pip/pip.conf</code>(没有就创建一个)，修改<code>index-url</code>内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<p><code>Windows</code>：</p>
<p>修改<code>C:\Users\&quot;UserName&quot;\pip\pip.ini</code>(没有就创建一个)，修改<code>index-url</code>内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line">trusted-host = mirrors.aliyun.com</span><br></pre></td></tr></table></figure>

<p><em>其它源</em>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">阿里云 http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">豆瓣http://pypi.douban.com/simple/</span><br><span class="line">清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line">中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">华中科技大学http://pypi.hustunique.com/</span><br></pre></td></tr></table></figure>



<h3 id="6、Heroku环境搭建"><a href="#6、Heroku环境搭建" class="headerlink" title="6、Heroku环境搭建"></a>6、Heroku环境搭建</h3><h4 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo snap install heroku --classic</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Ubuntu Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 搭建博客时遇到的问题</title>
    <url>/2020/01/21/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="1、npm-安装插件速度慢"><a href="#1、npm-安装插件速度慢" class="headerlink" title="1、npm 安装插件速度慢"></a>1、npm 安装插件速度慢</h3><p>1、方法一：切换源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>



<p>2、方法二：使用<code>cnpm</code></p>
<p>执行完下列命令后，当要用到<code>npm</code>命令时就可以使用<code>cnpm</code>代替</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2、文章图片插入"><a href="#2、文章图片插入" class="headerlink" title="2、文章图片插入"></a>2、文章图片插入</h3><p>1、配置<code>_config.yml</code>文件，使得在使用<code>hexo</code>命令新建一个<code>Post</code>时同时创建一个对应的文件夹</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 post_asset_folder 设置为 true</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<p>2、安装<code>hexo-asset-image</code>插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image -- save</span><br></pre></td></tr></table></figure>



<p>3、只要将<code>.md</code>引用的图片放入对应的文件夹内就可以了。</p>
<p>4、如果你的仓库名称不是<code>username.io</code>的话，图片插入仍然存在问题，修改<code>node_modules/hexo-asset-image/index.js</code>中的代码来修复问题。</p>
<p>修改后的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> appendLink = <span class="string">''</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of "about" page is like ".../about/index.html".</span></span><br><span class="line">    <span class="comment">// if not with index.html endpos = link.lastIndexOf('.') + 1 support hexo-abbrlink</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/.*\/index\.html$/</span>.test(link)) &#123;</span><br><span class="line">      <span class="comment">// when permalink is end with index.html, for example 2019/02/20/xxtitle/index.html</span></span><br><span class="line">      <span class="comment">// image in xxtitle/ will go to xxtitle/index/</span></span><br><span class="line">      appendLink = <span class="string">'index/'</span>;</span><br><span class="line">      <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">'/'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    link = link.substring(beginPos, endPos) + <span class="string">'/'</span> + appendLink;</span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">'excerpt'</span>, <span class="string">'more'</span>, <span class="string">'content'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="keyword">this</span>).attr(<span class="string">'src'</span>))&#123;</span><br><span class="line">          <span class="comment">// For windows style path, we replace '\' to '/'.</span></span><br><span class="line">          <span class="keyword">var</span> src = $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">          <span class="keyword">if</span>(!(<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src)</span><br><span class="line">            || <span class="regexp">/^\s+\//</span>.test(src)</span><br><span class="line">            || <span class="regexp">/^\s*\/uploads|images\//</span>.test(src))) &#123;</span><br><span class="line">            <span class="comment">// For "about" page, the first part of "src" can't be removed.</span></span><br><span class="line">            <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">            <span class="keyword">var</span> linkArray = link.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">              <span class="keyword">return</span> elem != <span class="string">''</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">var</span> srcArray = src.split(<span class="string">'/'</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">              <span class="keyword">return</span> elem != <span class="string">''</span> &amp;&amp; elem != <span class="string">'.'</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">            srcArray.shift();</span><br><span class="line">            src = srcArray.join(<span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line">            $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>, config.root + link + src);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"update link as:--&gt;"</span>+ config.root + link + src);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">"no src attr, skipped..."</span>);</span><br><span class="line">          <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Hexo 博客</category>
      </categories>
      <tags>
        <tag>Hexo 博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux攻略--(二)常用软件</title>
    <url>/2019/04/13/Linux%E6%94%BB%E7%95%A5--(%E4%BA%8C)%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="1、输入法"><a href="#1、输入法" class="headerlink" title="1、输入法"></a>1、输入法</h3><h4 id="1、搜狗输入法"><a href="#1、搜狗输入法" class="headerlink" title="1、搜狗输入法"></a>1、搜狗输入法</h4><p><a href="https://pinyin.sogou.com/linux/help.php" target="_blank" rel="noopener">官方教程</a></p>
<p><a href="https://pinyin.sogou.com/linux/" target="_blank" rel="noopener">官网</a>下载安装包直接安装。</p>
<a id="more"></a>

<h3 id="2、文档编辑"><a href="#2、文档编辑" class="headerlink" title="2、文档编辑"></a>2、文档编辑</h3><h4 id="1、WPS"><a href="#1、WPS" class="headerlink" title="1、WPS"></a>1、WPS</h4><p>卸载libreoffice</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove libreoffice-common</span><br></pre></td></tr></table></figure>

<p><a href="https://www.wps.cn/product/wpslinux" target="_blank" rel="noopener">官网</a>下载安装包直接安装</p>
<h4 id="2、Typora（Markdown编辑器）"><a href="#2、Typora（Markdown编辑器）" class="headerlink" title="2、Typora（Markdown编辑器）"></a>2、Typora（Markdown编辑器）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE</span></span><br><span class="line">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># add Typora's repository</span></span><br><span class="line">sudo add-apt-repository <span class="string">'deb https://typora.io/linux ./'</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># install typora</span></span><br><span class="line">sudo apt-get install typora</span><br></pre></td></tr></table></figure>



<h4 id="3、福昕阅读器（-PDF-阅读器）"><a href="#3、福昕阅读器（-PDF-阅读器）" class="headerlink" title="3、福昕阅读器（ PDF 阅读器）"></a>3、福昕阅读器（ PDF 阅读器）</h4><p><a href="http://www.ubuntukylin.com/application/show.php?id=311" target="_blank" rel="noopener">官网</a>下载安装包，直接安装。</p>
<h4 id="4、Sublime-Text"><a href="#4、Sublime-Text" class="headerlink" title="4、Sublime Text"></a>4、Sublime Text</h4><p><a href="https://www.sublimetext.com/docs/3/linux_repositories.html" target="_blank" rel="noopener">官网安装教程</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Install the GPG key:</span></span><br><span class="line">wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ensure apt is set up to work with https sources:</span></span><br><span class="line">sudo apt-get install apt-transport-https</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select the channel to use: </span></span><br><span class="line">  <span class="comment"># Stable</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"deb https://download.sublimetext.com/ apt/stable/"</span> | sudo tee /etc/apt/sources.list.d/sublime-text.list</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Dev</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"deb https://download.sublimetext.com/ apt/dev/"</span> | sudo tee /etc/apt/sources.list.d/sublime-text.list</span><br><span class="line"></span><br><span class="line"><span class="comment"># Update apt sources and install Sublime Text:</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install sublime-text</span><br></pre></td></tr></table></figure>



<h3 id="3、浏览器"><a href="#3、浏览器" class="headerlink" title="3、浏览器"></a>3、浏览器</h3><h4 id="1、安装-Firefox-浏览器"><a href="#1、安装-Firefox-浏览器" class="headerlink" title="1、安装 Firefox 浏览器"></a>1、安装 Firefox 浏览器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install firefox</span><br></pre></td></tr></table></figure>



<h4 id="2、Google-Chrome"><a href="#2、Google-Chrome" class="headerlink" title="2、Google Chrome"></a>2、Google Chrome</h4><p><a href="https://www.google.cn/chrome/index.html" target="_blank" rel="noopener">官网</a>下载安装包。</p>
<p><del>可能需要爬梯子。。。</del></p>
<h3 id="4、截图工具"><a href="#4、截图工具" class="headerlink" title="4、截图工具"></a>4、截图工具</h3><h4 id="1、Flameshot"><a href="#1、Flameshot" class="headerlink" title="1、Flameshot"></a>1、Flameshot</h4><p>安装软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install flameshot</span><br></pre></td></tr></table></figure>

<p>设置快捷键</p>
<p><img src="/2019/04/13/Linux%E6%94%BB%E7%95%A5--(%E4%BA%8C)%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E8%AE%BE%E7%BD%AE%E5%BF%AB%E6%8D%B7%E9%94%AE.png" alt="设置快捷键"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/flameshot gui</span><br></pre></td></tr></table></figure>



<h3 id="5、画图"><a href="#5、画图" class="headerlink" title="5、画图"></a>5、画图</h3><h4 id="1、kolourpaint4"><a href="#1、kolourpaint4" class="headerlink" title="1、kolourpaint4"></a>1、kolourpaint4</h4><p>类似Windows中的画板</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install kolourpaint4</span><br></pre></td></tr></table></figure>



<h4 id="2、亿图"><a href="#2、亿图" class="headerlink" title="2、亿图"></a>2、亿图</h4><p><a href="https://www.edrawsoft.cn/" target="_blank" rel="noopener">亿图官网</a></p>
<p><a href="https://www.edrawsoft.cn/download-edrawmax.php" target="_blank" rel="noopener">下载地址</a></p>
<p>绘制精美的流程图、思维导图、信息图等</p>
<p>下载<code>.deb</code>包直接安装。</p>
<h3 id="6、音乐、视频"><a href="#6、音乐、视频" class="headerlink" title="6、音乐、视频"></a>6、音乐、视频</h3><h4 id="1、网易云音乐"><a href="#1、网易云音乐" class="headerlink" title="1、网易云音乐"></a>1、网易云音乐</h4><p><a href="https://music.163.com/#/download" target="_blank" rel="noopener">官网</a>下载安装包，直接安装。</p>
<p><img src="/2019/04/13/Linux%E6%94%BB%E7%95%A5--(%E4%BA%8C)%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%8B%E8%BD%BD.png" alt="网易云音乐下载"></p>
<h4 id="2、VLC播放器"><a href="#2、VLC播放器" class="headerlink" title="2、VLC播放器"></a>2、VLC播放器</h4><p>从软件中心下载或者在终端执行命令安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vlc</span><br></pre></td></tr></table></figure>





<h3 id="7、通讯"><a href="#7、通讯" class="headerlink" title="7、通讯"></a>7、通讯</h3><h4 id="1、QQ和微信"><a href="#1、QQ和微信" class="headerlink" title="1、QQ和微信"></a>1、QQ和微信</h4><p>QQ官方推出Linux版本的了。。。。。</p>
<p><a href="https://im.qq.com/linuxqq/index.html" target="_blank" rel="noopener">官网下载</a></p>
<p>选择对应版本下载安装就行了。(u1s1，有点复古，有点像零几年的QQ)</p>
<p><del>下面内容可以不用看了</del> 建议还是用下面的安装吧，官方版本的可以发文件但发不出去消息。</p>
<hr>
<p><a href="https://blog.csdn.net/qq_36285997/article/details/89046191" target="_blank" rel="noopener">网上教程</a></p>
<p>安装deepin-wine环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仓库克隆</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入仓库目录</span></span><br><span class="line"><span class="built_in">cd</span>  deepin-wine-for-ubuntu </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>

<p>QQ安装包<a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/" target="_blank" rel="noopener">下载地址</a></p>
<p>微信安装包<a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/" target="_blank" rel="noopener">下载地址</a></p>
<h3 id="8、下载工具"><a href="#8、下载工具" class="headerlink" title="8、下载工具"></a>8、下载工具</h3><h4 id="1、XDM"><a href="#1、XDM" class="headerlink" title="1、XDM"></a>1、XDM</h4><p><a href="./xdm-2018-x64.tar">下载链接</a></p>
<p>解压后运行<code>install.sh</code>脚本来安装，在网络设置中将最大线程数设置为<code>32</code>。</p>
<p><img src="/2019/04/13/Linux%E6%94%BB%E7%95%A5--(%E4%BA%8C)%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/XDM%E4%B8%8B%E8%BD%BD.png" alt="XDM下载"></p>
<h3 id="9、科学上网"><a href="#9、科学上网" class="headerlink" title="9、科学上网"></a>9、科学上网</h3><h4 id="1、SocketPro"><a href="#1、SocketPro" class="headerlink" title="1、SocketPro"></a>1、SocketPro</h4><p>教程：</p>
<p><a href="https://www.socketprohc.com/hc/en-us/articles/360022001091-How-to-install-SocketPro-client-on-Linux-devices" target="_blank" rel="noopener">How to install SocketPro client on Linux devices</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential autoconf libtool libssl-dev libpcre3-dev asciidoc xmlto libz-dev zlib1g-dev</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/shadowsocksr-backup/shadowsocksr-libev.git ~/socketpro/client</span><br><span class="line"><span class="built_in">cd</span> ~/socketpro/client</span><br><span class="line">./configure &amp;&amp; make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>







<h3 id="10、其他"><a href="#10、其他" class="headerlink" title="10、其他"></a>10、其他</h3><h4 id="1、Calibre-书籍管理工具"><a href="#1、Calibre-书籍管理工具" class="headerlink" title="1、Calibre (书籍管理工具)"></a>1、Calibre (书籍管理工具)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -v &amp;&amp; wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sudo sh /dev/stdin</span><br></pre></td></tr></table></figure>



<h4 id="2、百度网盘"><a href="#2、百度网盘" class="headerlink" title="2、百度网盘"></a>2、百度网盘</h4><p><a href="https://pan.baidu.com/download" target="_blank" rel="noopener">官网</a>下载安装包。</p>
<h4 id="3、软件中心"><a href="#3、软件中心" class="headerlink" title="3、软件中心"></a>3、软件中心</h4><p>类似Windows中的各种软件管理软件，下载安装包直接安装</p>
<p><a href="https://www.ubuntukylin.com/applications/41-cn.html" target="_blank" rel="noopener">麒麟软件中心</a></p>
<h3 id="0、参考"><a href="#0、参考" class="headerlink" title="0、参考"></a>0、参考</h3><p><a href="http://www.linuxrsp.ru/win-lin-soft/table-chn.html" target="_blank" rel="noopener">视窗软件的Linux类似/替换/相近品</a></p>
<p><a href="https://wiki.ubuntu.org.cn/Qref/Apps" target="_blank" rel="noopener">速配指南之软件参考</a></p>
<p><a href="https://www.zhihu.com/question/19811112" target="_blank" rel="noopener">在Ubuntu 上有什么必装的实用软件？</a></p>
<p><a href="https://www.cnblogs.com/dunitian/p/6670560.html" target="_blank" rel="noopener">Ubuntu常用软件安装（小集合）</a></p>
]]></content>
      <categories>
        <category>Ubuntu Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 语法</title>
    <url>/2020/02/21/Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h3 id="Markdown-常用语法"><a href="#Markdown-常用语法" class="headerlink" title="Markdown 常用语法"></a>Markdown 常用语法</h3><p> <a href="https://github.com/guodongxiaren/README" target="_blank" rel="noopener">README语法</a></p>
<a id="more"></a>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><a href="https://github.com/ekalinin/github-markdown-toc" target="_blank" rel="noopener">Markdown 目录生成工具</a></p>
<p>安装教程可能需要翻墙下载，下面是之前下好的文件</p>
<p><a href="./gh-md-toc.zip">gh-md-toc</a></p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib库</title>
    <url>/2020/03/19/Matplotlib%E5%BA%93/</url>
    <content><![CDATA[<h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install matplotlib</span><br><span class="line">apt-get install python-matplotlib</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2、简单图形"><a href="#2、简单图形" class="headerlink" title="2、简单图形"></a>2、简单图形</h3><p> <code>matplotlib.pyplot.plot(*args, **kwargs)</code>，<code>args</code>代表输入数据，<code>kwargs</code>用于设置样式的参数。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>matplotlib.pyplot.angle_spectrum</code></td>
<td>绘制电子波谱图</td>
</tr>
<tr>
<td><code>matplotlib.pyplot.bar</code></td>
<td>绘制柱状图</td>
</tr>
<tr>
<td><code>matplotlib.pyplot.barh</code></td>
<td>绘制直方图</td>
</tr>
<tr>
<td><code>matplotlib.pyplot.broken_barh</code></td>
<td>绘制水平直方图</td>
</tr>
<tr>
<td><code>matplotlib.pyplot.contour</code></td>
<td>绘制等高线图</td>
</tr>
<tr>
<td><code>matplotlib.pyplot.errorbar</code></td>
<td>绘制误差线</td>
</tr>
<tr>
<td><code>matplotlib.pyplot.hexbin</code></td>
<td>绘制六边形图案</td>
</tr>
<tr>
<td><code>matplotlib.pyplot.hist</code></td>
<td>绘制柱形图</td>
</tr>
<tr>
<td><code>matplotlib.pyplot.hist2d</code></td>
<td>绘制水平柱状图</td>
</tr>
<tr>
<td><code>matplotlib.pyplot.pie</code></td>
<td>绘制饼状图</td>
</tr>
<tr>
<td><code>matplotlib.pyplot.quiver</code></td>
<td>绘制量场图</td>
</tr>
<tr>
<td><code>matplotlib.pyplot.scatter</code></td>
<td>散点图</td>
</tr>
<tr>
<td><code>matplotlib.pyplot.specgram</code></td>
<td>绘制光谱图</td>
</tr>
</tbody></table>
<h4 id="1、折线图"><a href="#1、折线图" class="headerlink" title="1、折线图"></a>1、折线图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 折线图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">line_chart</span><span class="params">()</span>:</span></span><br><span class="line">    x = np.linspace(<span class="number">-2</span> * np.pi, <span class="number">2</span> * np.pi, <span class="number">1000</span>)</span><br><span class="line">    y = np.sin(x)</span><br><span class="line">    plt.plot(x, y)</span><br></pre></td></tr></table></figure>

<p><code>二维线形图</code>常用设置(<a href="https://matplotlib.org/3.1.0/api/_as_gen/matplotlib.pyplot.plot.html" target="_blank" rel="noopener">官方文档</a>)</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>alpha=</code></td>
<td>设置线型的透明度，从 0.0 到 1.0</td>
</tr>
<tr>
<td><code>color=</code></td>
<td>设置线型的颜色</td>
</tr>
<tr>
<td><code>fillstyle=</code></td>
<td>设置线型的填充样式</td>
</tr>
<tr>
<td><code>linestyle=</code></td>
<td>设置线型的样式</td>
</tr>
<tr>
<td><code>linewidth=</code></td>
<td>设置线型的宽度</td>
</tr>
<tr>
<td><code>marker=</code></td>
<td>设置标记点的样式</td>
</tr>
<tr>
<td>……</td>
<td>……</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="2、柱状图"><a href="#2、柱状图" class="headerlink" title="2、柱状图"></a>2、柱状图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 柱形图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">column_chart</span><span class="params">()</span>:</span></span><br><span class="line">    x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    y = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    plt.bar(x, y)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>





<h4 id="3、散点图"><a href="#3、散点图" class="headerlink" title="3、散点图"></a>3、散点图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 散点图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scatter_chart</span><span class="params">()</span>:</span></span><br><span class="line">    x = np.random.ranf(<span class="number">10</span>)</span><br><span class="line">    y = np.random.ranf(<span class="number">10</span>)</span><br><span class="line">    plt.scatter(x, y)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<p><code>散点图</code>常用设置(<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.scatter.html" target="_blank" rel="noopener">官方文档</a>)</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>s=</code></td>
<td>散点大小</td>
</tr>
<tr>
<td><code>c=</code></td>
<td>散点颜色</td>
</tr>
<tr>
<td><code>marker=</code></td>
<td>散点样式</td>
</tr>
<tr>
<td><code>cmap=</code></td>
<td>定义多类别散点的颜色</td>
</tr>
<tr>
<td><code>alpha=</code></td>
<td>点的透明度</td>
</tr>
<tr>
<td><code>edgecolors=</code></td>
<td>散点边缘颜色</td>
</tr>
</tbody></table>
<h4 id="4、饼状图"><a href="#4、饼状图" class="headerlink" title="4、饼状图"></a>4、饼状图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 饼状图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pie_chart</span><span class="params">()</span>:</span></span><br><span class="line">    x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    plt.pie(x)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>




<h4 id="5、量场图"><a href="#5、量场图" class="headerlink" title="5、量场图"></a>5、量场图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 量场图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quiver_chart</span><span class="params">()</span>:</span></span><br><span class="line">    x, y = np.mgrid[<span class="number">0</span>:<span class="number">10</span>, <span class="number">0</span>:<span class="number">10</span>]</span><br><span class="line">    print(x.shape)</span><br><span class="line">    print(x)</span><br><span class="line">    print(y.shape)</span><br><span class="line">    print(y)</span><br><span class="line">    plt.quiver(x, y)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>




<h4 id="6、等高线图"><a href="#6、等高线图" class="headerlink" title="6、等高线图"></a>6、等高线图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等高线图</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contour_map</span><span class="params">()</span>:</span></span><br><span class="line">    x = np.linspace(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">500</span>)</span><br><span class="line">    y = np.linspace(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">500</span>)</span><br><span class="line">    X, Y = np.meshgrid(x, y)</span><br><span class="line">    Z = (<span class="number">1</span> - X / <span class="number">2</span> + X ** <span class="number">3</span> + Y ** <span class="number">3</span>) * np.exp(-X ** <span class="number">2</span> - Y ** <span class="number">2</span>)</span><br><span class="line">    plt.contourf(X, Y, Z)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>



<h3 id="3、复杂图"><a href="#3、复杂图" class="headerlink" title="3、复杂图"></a>3、复杂图</h3><h4 id="1、组合图"><a href="#1、组合图" class="headerlink" title="1、组合图"></a>1、组合图</h4><p>将几种类型的一样的图放在一张图内显示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    x = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>]</span><br><span class="line">    y_bar = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">    y_line = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">    plt.bar(x, y_bar)</span><br><span class="line">    plt.plot(x, y_line, <span class="string">'-o'</span>, color=<span class="string">'y'</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>



<h4 id="2、子图"><a href="#2、子图" class="headerlink" title="2、子图"></a>2、子图</h4><h5 id="1、把几张图形拼接在一起"><a href="#1、把几张图形拼接在一起" class="headerlink" title="1、把几张图形拼接在一起"></a>1、把几张图形拼接在一起</h5><p><code>figure</code> 相当于绘画用的画板，而 <code>axes</code> 则相当于铺在画板上的画布。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">	<span class="comment"># 生成数据</span></span><br><span class="line">    x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">    y = x * x + <span class="number">2</span></span><br><span class="line">    <span class="comment"># 新建画板</span></span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    <span class="comment"># 向画板中添加画布，并指定位置</span></span><br><span class="line">    axes = fig.add_axes([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 在画布上绘制图像</span></span><br><span class="line">    axes.plot(x, y, <span class="string">'r'</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<h5 id="2、大图套小图"><a href="#2、大图套小图" class="headerlink" title="2、大图套小图"></a>2、大图套小图</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 生成数据</span></span><br><span class="line">    x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">    y = x * x + <span class="number">2</span></span><br><span class="line">    <span class="comment"># 新建画布</span></span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    <span class="comment"># 大画布</span></span><br><span class="line">    axes1 = fig.add_axes([<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.8</span>, <span class="number">0.8</span>])</span><br><span class="line">    <span class="comment"># 小画布</span></span><br><span class="line">    axes2 = fig.add_axes([<span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.4</span>, <span class="number">0.3</span>])</span><br><span class="line">    <span class="comment"># 绘制图像</span></span><br><span class="line">    axes1.plot(x, y, <span class="string">'r'</span>)</span><br><span class="line">    axes2.plot(y, x, <span class="string">'g'</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<h5 id="3、-plt-subplots-用法"><a href="#3、-plt-subplots-用法" class="headerlink" title="3、 plt.subplots()用法"></a>3、 <code>plt.subplots()</code>用法</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_1</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="comment"># 创建画板和画布</span></span><br><span class="line">    fig, axes = plt.subplots()</span><br><span class="line">    <span class="comment"># 绘制图形</span></span><br><span class="line">    axes.plot(x, y, <span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_2</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="comment"># 创建画板和画布(1行2列)</span></span><br><span class="line">    fig, axes = plt.subplots(nrows=<span class="number">1</span>, ncols=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 绘制图形</span></span><br><span class="line">    <span class="keyword">for</span> ax <span class="keyword">in</span> axes:</span><br><span class="line">        ax.plot(x, y, <span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_3</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="comment"># 创建画板和画布</span></span><br><span class="line">    <span class="comment"># 通过 figsize 调节尺寸, dpi 调节显示精度</span></span><br><span class="line">    fig, axes = plt.subplots(figsize=(<span class="number">16</span>, <span class="number">9</span>), dpi=<span class="number">50</span>)</span><br><span class="line">    <span class="comment"># 绘制图形</span></span><br><span class="line">    axes.plot(x, y, <span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 生成数据</span></span><br><span class="line">    x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">    y = x * x + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># draw_1(x, y)</span></span><br><span class="line">    <span class="comment"># draw_2(x, y)</span></span><br><span class="line">    draw_3(x, y)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>



<h3 id="4、规范绘图"><a href="#4、规范绘图" class="headerlink" title="4、规范绘图"></a>4、规范绘图</h3><h4 id="1、添加图标题、图例"><a href="#1、添加图标题、图例" class="headerlink" title="1、添加图标题、图例"></a>1、添加图标题、图例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 生成数据</span></span><br><span class="line">    x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">    y = x * x + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    fig, axes = plt.subplots()</span><br><span class="line">    <span class="comment"># 横轴名称</span></span><br><span class="line">    axes.set_xlabel(<span class="string">'x label'</span>)</span><br><span class="line">    <span class="comment"># 纵轴名称</span></span><br><span class="line">    axes.set_ylabel(<span class="string">'x label'</span>)</span><br><span class="line">    <span class="comment"># 图标题</span></span><br><span class="line">    axes.set_title(<span class="string">'title'</span>)</span><br><span class="line">    <span class="comment"># 绘制图像</span></span><br><span class="line">    axes.plot(x, x ** <span class="number">2</span>)</span><br><span class="line">    axes.plot(x, x ** <span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 图例</span></span><br><span class="line">    axes.legend([<span class="string">'y=x^2'</span>, <span class="string">'y=x^3'</span>], loc=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 图例中的 loc 参数标记图例位置，</span></span><br><span class="line">    <span class="comment"># 1，2，3，4 依次代表：右上角、左上角、左下角，右下角；</span></span><br><span class="line">    <span class="comment"># 0 代表自适应</span></span><br><span class="line"></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>



<h4 id="2、线型、颜色、透明度"><a href="#2、线型、颜色、透明度" class="headerlink" title="2、线型、颜色、透明度"></a>2、线型、颜色、透明度</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 生成数据</span></span><br><span class="line">    x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">    y = x * x + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    fig, axes = plt.subplots()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># alpha 用于设置透明度[0,1]</span></span><br><span class="line">    axes.plot(x, x + <span class="number">1</span>, color=<span class="string">'red'</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># linewidth 用于设置线的宽度</span></span><br><span class="line">    axes.plot(x, x + <span class="number">2</span>, color=<span class="string">'#1155dd'</span>, linewidth=<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 虚线</span></span><br><span class="line">    <span class="comment"># linestyle 和 ls 用于设置虚线类型</span></span><br><span class="line">    <span class="comment"># 取值有['-', '--', '-.', ':', 'None', ' ', '', 'solid', 'dashed', 'dashdot', 'dotted']</span></span><br><span class="line">    <span class="comment"># lw 用于设置虚线交错宽度</span></span><br><span class="line">    axes.plot(x, x + <span class="number">3</span>, color=<span class="string">'r'</span>, lw=<span class="number">2</span>, linestyle=<span class="string">'--'</span>)</span><br><span class="line">    axes.plot(x, x + <span class="number">4</span>, color=<span class="string">'g'</span>, lw=<span class="number">1.5</span>, ls=<span class="string">':'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 符号</span></span><br><span class="line">    <span class="comment"># marker 取值:['+','o','s','1',]</span></span><br><span class="line">    <span class="comment"># markersize 用于设置符号大小</span></span><br><span class="line">    <span class="comment"># markerfacecolor 用于设置符号颜色</span></span><br><span class="line">    <span class="comment"># markeredgewidth 用于设置符号边框宽度</span></span><br><span class="line">    <span class="comment"># markeredgecolor 用于设置符号边框颜色</span></span><br><span class="line">    axes.plot(x, x + <span class="number">5</span>, color=<span class="string">'b'</span>, lw=<span class="number">2</span>, ls=<span class="string">':'</span>, marker=<span class="string">'1'</span>)</span><br><span class="line">    axes.plot(x, x + <span class="number">6</span>, color=<span class="string">'b'</span>, lw=<span class="number">2</span>, ls=<span class="string">'--'</span>,</span><br><span class="line">              marker=<span class="string">'s'</span>, markersize=<span class="number">8</span>, markerfacecolor=<span class="string">'r'</span>)</span><br><span class="line">    axes.plot(x, x + <span class="number">7</span>, color=<span class="string">"purple"</span>, lw=<span class="number">1</span>, ls=<span class="string">'-'</span>, marker=<span class="string">'s'</span>,</span><br><span class="line">              markersize=<span class="number">8</span>, markerfacecolor=<span class="string">"yellow"</span>,</span><br><span class="line">              markeredgewidth=<span class="number">2</span>, markeredgecolor=<span class="string">"blue"</span>)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>



<h4 id="3、画布网格、坐标轴范围"><a href="#3、画布网格、坐标轴范围" class="headerlink" title="3、画布网格、坐标轴范围"></a>3、画布网格、坐标轴范围</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 生成数据</span></span><br><span class="line">    x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">    y = x * x + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    fig, axes = plt.subplots(<span class="number">1</span>, <span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示网格</span></span><br><span class="line">    axes[<span class="number">0</span>].plot(x, x**<span class="number">2</span>, x, x**<span class="number">3</span>, lw=<span class="number">2</span>)</span><br><span class="line">    axes[<span class="number">0</span>].grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置坐标轴范围</span></span><br><span class="line">    axes[<span class="number">1</span>].plot(x, x**<span class="number">2</span>, x, x**<span class="number">3</span>)</span><br><span class="line">    axes[<span class="number">1</span>].set_ylim([<span class="number">0</span>, <span class="number">60</span>])</span><br><span class="line">    axes[<span class="number">1</span>].set_xlim([<span class="number">2</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>



<h4 id="4、图形标注"><a href="#4、图形标注" class="headerlink" title="4、图形标注"></a>4、图形标注</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_1</span><span class="params">(x_bar, y_bar)</span>:</span></span><br><span class="line">    fig, axes = plt.subplots()</span><br><span class="line">    bars = axes.bar(x_bar, y_bar, color=<span class="string">'blue'</span>, label=x_bar, width=<span class="number">2</span>)  <span class="comment"># 绘制柱形图</span></span><br><span class="line">    <span class="keyword">for</span> i, rect <span class="keyword">in</span> enumerate(bars):</span><br><span class="line">        x_text = rect.get_x()  <span class="comment"># 获取柱形图横坐标</span></span><br><span class="line">        y_text = rect.get_height() + <span class="number">0.01</span>  <span class="comment"># 获取柱子的高度并增加 0.01</span></span><br><span class="line">        plt.text(x_text, y_text, <span class="string">'%.1f'</span> % y_bar[i])  <span class="comment"># 标注文字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_2</span><span class="params">(x_bar, y_bar)</span>:</span></span><br><span class="line">    fig, axes = plt.subplots()</span><br><span class="line">    bars = axes.bar(x_bar, y_bar, color=<span class="string">'blue'</span>, label=x_bar, width=<span class="number">2</span>)  <span class="comment"># 绘制柱形图</span></span><br><span class="line">    <span class="keyword">for</span> i, rect <span class="keyword">in</span> enumerate(bars):</span><br><span class="line">        x_text = rect.get_x()  <span class="comment"># 获取柱形图横坐标</span></span><br><span class="line">        y_text = rect.get_height() + <span class="number">0.01</span>  <span class="comment"># 获取柱子的高度并增加 0.01</span></span><br><span class="line">        plt.text(x_text, y_text, <span class="string">'%.1f'</span> % y_bar[i])  <span class="comment"># 标注文字</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 增加箭头标注</span></span><br><span class="line">        plt.annotate(<span class="string">'Min'</span>, xy=(<span class="number">32</span>, <span class="number">0.3</span>), xytext=(<span class="number">36</span>, <span class="number">0.3</span>),</span><br><span class="line">                     arrowprops=dict(facecolor=<span class="string">'black'</span>, width=<span class="number">1</span>, headwidth=<span class="number">7</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 生成数据</span></span><br><span class="line">    x_bar = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]  <span class="comment"># 柱形图横坐标</span></span><br><span class="line">    y_bar = [<span class="number">0.5</span>, <span class="number">0.6</span>, <span class="number">0.3</span>, <span class="number">0.4</span>, <span class="number">0.8</span>]  <span class="comment"># 柱形图纵坐标</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 柱形图文字标注</span></span><br><span class="line">    <span class="comment"># draw_1(x, y)</span></span><br><span class="line">    <span class="comment"># 添加箭头标注</span></span><br><span class="line">    draw_2(x_bar, y_bar)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>



<h3 id="5、小试牛刀"><a href="#5、小试牛刀" class="headerlink" title="5、小试牛刀"></a>5、小试牛刀</h3><p>使用Matplotlib绘制下面的图案</p>
<p><img src="/2020/03/19/Matplotlib%E5%BA%93/%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80.png" alt="小试牛刀"></p>
<p>参考答案：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Copyright (c) 2015, Nicolas P. Rougier. All Rights Reserved.</span></span><br><span class="line"><span class="comment"># Distributed under the (new) BSD License. See LICENSE.txt for more info.</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">5</span>), dpi=<span class="number">80</span>)</span><br><span class="line">ax = plt.subplot(<span class="number">111</span>)</span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">X = np.linspace(-np.pi, np.pi, <span class="number">256</span>, endpoint=<span class="literal">True</span>)</span><br><span class="line">C, S = np.cos(X), np.sin(X)</span><br><span class="line"></span><br><span class="line">plt.plot(X, C, color=<span class="string">"blue"</span>, linewidth=<span class="number">2.5</span>,</span><br><span class="line">         linestyle=<span class="string">"-"</span>, label=<span class="string">"Cos Function"</span>)</span><br><span class="line">plt.plot(X, S, color=<span class="string">"red"</span>, linewidth=<span class="number">2.5</span>, linestyle=<span class="string">"-"</span>, label=<span class="string">"Sin Function"</span>)</span><br><span class="line"></span><br><span class="line">plt.xlim(X.min() * <span class="number">1.1</span>, X.max() * <span class="number">1.1</span>)</span><br><span class="line">plt.xticks([-np.pi, -np.pi / <span class="number">2</span>, <span class="number">0</span>, np.pi / <span class="number">2</span>, np.pi],</span><br><span class="line">           [<span class="string">r'$-\pi$'</span>, <span class="string">r'$-\pi/2$'</span>, <span class="string">r'$0$'</span>, <span class="string">r'$+\pi/2$'</span>, <span class="string">r'$+\pi$'</span>])</span><br><span class="line"></span><br><span class="line">plt.ylim(C.min() * <span class="number">1.1</span>, C.max() * <span class="number">1.1</span>)</span><br><span class="line">plt.yticks([<span class="number">-1</span>, +<span class="number">1</span>],</span><br><span class="line">           [<span class="string">r'$-1$'</span>, <span class="string">r'$+1$'</span>])</span><br><span class="line"></span><br><span class="line">t = <span class="number">2</span> * np.pi / <span class="number">3</span></span><br><span class="line">plt.plot([t, t], [<span class="number">0</span>, np.cos(t)],</span><br><span class="line">         color=<span class="string">'blue'</span>, linewidth=<span class="number">1.5</span>, linestyle=<span class="string">"--"</span>)</span><br><span class="line">plt.scatter([t, ], [np.cos(t), ], <span class="number">50</span>, color=<span class="string">'blue'</span>)</span><br><span class="line">plt.annotate(<span class="string">r'$\sin(\frac&#123;2\pi&#125;&#123;3&#125;)=\frac&#123;\sqrt&#123;3&#125;&#125;&#123;2&#125;$'</span>,</span><br><span class="line">             xy=(t, np.sin(t)), xycoords=<span class="string">'data'</span>,</span><br><span class="line">             xytext=(+<span class="number">10</span>, +<span class="number">30</span>), textcoords=<span class="string">'offset points'</span>, fontsize=<span class="number">16</span>,</span><br><span class="line">             arrowprops=dict(arrowstyle=<span class="string">"-&gt;"</span>, connectionstyle=<span class="string">"arc3,rad=.2"</span>))</span><br><span class="line"></span><br><span class="line">plt.plot([t, t], [<span class="number">0</span>, np.sin(t)],</span><br><span class="line">         color=<span class="string">'red'</span>, linewidth=<span class="number">1.5</span>, linestyle=<span class="string">"--"</span>)</span><br><span class="line">plt.scatter([t, ], [np.sin(t), ], <span class="number">50</span>, color=<span class="string">'red'</span>)</span><br><span class="line">plt.annotate(<span class="string">r'$\cos(\frac&#123;2\pi&#125;&#123;3&#125;)=-\frac&#123;1&#125;&#123;2&#125;$'</span>,</span><br><span class="line">             xy=(t, np.cos(t)), xycoords=<span class="string">'data'</span>,</span><br><span class="line">             xytext=(<span class="number">-90</span>, <span class="number">-50</span>), textcoords=<span class="string">'offset points'</span>, fontsize=<span class="number">16</span>,</span><br><span class="line">             arrowprops=dict(arrowstyle=<span class="string">"-&gt;"</span>, connectionstyle=<span class="string">"arc3,rad=.2"</span>))</span><br><span class="line"></span><br><span class="line">plt.legend(loc=<span class="string">'upper left'</span>, frameon=<span class="literal">False</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>





<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>1、中文乱码</p>
<p>在py脚本中添加下列代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SimHei'</span>]</span><br></pre></td></tr></table></figure>











<h3 id="0、参考"><a href="#0、参考" class="headerlink" title="0、参考"></a>0、参考</h3><p><a href="https://matplotlib.org/index.html" target="_blank" rel="noopener">Matolotlib官网</a></p>
<p><a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文</a></p>
<p><a href="https://www.shiyanlou.com/courses/1093" target="_blank" rel="noopener">Matplotlib 数据绘图基础课程</a></p>
]]></content>
      <categories>
        <category>Python Module</category>
      </categories>
      <tags>
        <tag>Python Module</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux攻略--(四)常用命令</title>
    <url>/2019/04/13/Linux%E6%94%BB%E7%95%A5--(%E5%9B%9B)%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="1、卸载软件"><a href="#1、卸载软件" class="headerlink" title="1、卸载软件"></a>1、卸载软件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove softname1</span><br></pre></td></tr></table></figure>



<h3 id="2、查看-修改文件编码"><a href="#2、查看-修改文件编码" class="headerlink" title="2、查看/修改文件编码"></a>2、查看/修改文件编码</h3><p>查看文件编码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看文件编码</span></span><br><span class="line">file 文件名</span><br></pre></td></tr></table></figure>

<p>修改文件编码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改文件编码</span></span><br><span class="line">sudo iconv -f <span class="string">'gbk'</span> -t <span class="string">'utf-8'</span> 源文件 目标文件</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="3、修改文件权限"><a href="#3、修改文件权限" class="headerlink" title="3、修改文件权限"></a>3、修改文件权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 权限 文件名</span><br><span class="line"><span class="comment"># eg.</span></span><br><span class="line"><span class="comment"># chmod 600 fileName</span></span><br></pre></td></tr></table></figure>



<h3 id="4、输出当前路径的文件树"><a href="#4、输出当前路径的文件树" class="headerlink" title="4、输出当前路径的文件树"></a>4、输出当前路径的文件树</h3><p>方法一：</p>
<blockquote>
<p>使用下列命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> d -<span class="built_in">print</span> 2&gt;/dev/null | awk <span class="string">'!/\.$/ &#123;for (i=1; i&lt;NF; i++)&#123;printf("%4s","|")&#125; print("--"$NF)&#125;'</span> FS=<span class="string">'/'</span>; </span><br></pre></td></tr></table></figure>


</blockquote>
<p>方法二：</p>
<blockquote>
<p> 使用<code>tree</code>命令，<code>tree</code>命令可能需要手动安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装tree命令</span></span><br><span class="line">sudo apt-get install tree</span><br></pre></td></tr></table></figure>

<p>使用tree命令查看目录结构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># path 为要查看的目录，-L n 参数设置显示n级目录</span></span><br><span class="line">tree [path] -L n</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="5、安装-deb包"><a href="#5、安装-deb包" class="headerlink" title="5、安装.deb包"></a>5、安装<code>.deb</code>包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i filename.deb</span><br></pre></td></tr></table></figure>



<h3 id="6、查看-修改文件编码"><a href="#6、查看-修改文件编码" class="headerlink" title="6、查看/修改文件编码"></a>6、查看/修改文件编码</h3><p>使用 <code>file</code> 命令查看文件编码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file filename</span><br></pre></td></tr></table></figure>



<h3 id="7、screen-命令"><a href="#7、screen-命令" class="headerlink" title="7、screen 命令"></a>7、<code>screen</code> 命令</h3><p>新建/恢复 <code>screen</code> 作业</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -R workname</span><br></pre></td></tr></table></figure>

<p>显示所有 <code>screen</code> 作业</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -ls</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>Ubuntu Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java相关知识</title>
    <url>/2020/01/28/Java%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="1、基本数据类型与包装类型"><a href="#1、基本数据类型与包装类型" class="headerlink" title="1、基本数据类型与包装类型"></a>1、基本数据类型与包装类型</h3><h4 id="1、整数类型"><a href="#1、整数类型" class="headerlink" title="1、整数类型"></a>1、整数类型</h4><table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">内存空间</th>
<th align="center">取值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td align="center">8位(1个字节)</td>
<td align="center">-128~127</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">16位(2个字节)</td>
<td align="center">-32768~32767</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">32位(4个字节)</td>
<td align="center">-2147483648~2147483647</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">64位(8个字节)</td>
<td align="center">-9223372036854775808~9223372036854775807</td>
</tr>
</tbody></table>
<h4 id="2、浮点类型"><a href="#2、浮点类型" class="headerlink" title="2、浮点类型"></a>2、浮点类型</h4><table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">内存空间</th>
<th align="center">取值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">float</td>
<td align="center">32位(4个字节)</td>
<td align="center">1.4E-45~3.4028235-E38</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">64位(8个字节)</td>
<td align="center">4.9E-324~1.7976931348623157E-308</td>
</tr>
</tbody></table>
<h4 id="3、字符类型"><a href="#3、字符类型" class="headerlink" title="3、字符类型"></a>3、字符类型</h4><table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">内存空间</th>
<th align="center">取值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">char</td>
<td align="center">16位(2个字节)</td>
<td align="center">0~65535</td>
</tr>
</tbody></table>
<h4 id="4、布尔类型"><a href="#4、布尔类型" class="headerlink" title="4、布尔类型"></a>4、布尔类型</h4><table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">内存空间</th>
<th align="center">取值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">boolean</td>
<td align="center">8位(1个字节)或32位(4个字节)</td>
<td align="center">true,false</td>
</tr>
</tbody></table>
<p>当声明一个 <code>boolean</code> 变量时占用4个字节，当声明一个 <code>boolean</code> 数组时占用1个字节。</p>
<h4 id="5、包装类型"><a href="#5、包装类型" class="headerlink" title="5、包装类型"></a>5、包装类型</h4><p>基本类型对应的包装类型</p>
<table>
<thead>
<tr>
<th align="left">基本类型</th>
<th>包装器类</th>
</tr>
</thead>
<tbody><tr>
<td align="left">boolean</td>
<td>Boolean</td>
</tr>
<tr>
<td align="left">byte</td>
<td>Byte</td>
</tr>
<tr>
<td align="left">char</td>
<td>Character</td>
</tr>
<tr>
<td align="left">short</td>
<td>Short</td>
</tr>
<tr>
<td align="left">int</td>
<td>Integer</td>
</tr>
<tr>
<td align="left">long</td>
<td>Long</td>
</tr>
<tr>
<td align="left">float</td>
<td>Float</td>
</tr>
<tr>
<td align="left">double</td>
<td>Double</td>
</tr>
</tbody></table>
<p>装箱与拆箱</p>
<p>装箱：基本数据类型转换成包装数据类型<br>如：<code>int</code> 转换成 <code>Integer</code></p>
<p>拆箱：包装数据类型转换成基本数据类型<br>如：<code>Integer</code> 转换成 <code>int</code></p>
<h3 id="2、数组操作"><a href="#2、数组操作" class="headerlink" title="2、数组操作"></a>2、数组操作</h3><h4 id="1、遍历"><a href="#1、遍历" class="headerlink" title="1、遍历"></a>1、遍历</h4><p>1、通过索引遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ergodic</span><span class="params">(<span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ergodic</span><span class="params">(<span class="keyword">int</span> arr[][])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">            System.out.print(arr[i][j] + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、使用 <code>foreach</code> 遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ergodic</span><span class="params">(<span class="keyword">int</span> arr[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : arr) &#123;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ergodic</span><span class="params">(<span class="keyword">int</span> arr[][])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a[] : arr) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x : a) &#123;</span><br><span class="line">            System.out.print(x + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2、填充"><a href="#2、填充" class="headerlink" title="2、填充"></a>2、填充</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Arrays.fill(Object[] a, Object value);</span></span><br><span class="line"><span class="comment"> * a:要进行元素填充的数组</span></span><br><span class="line"><span class="comment"> * value:填充值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Arrays.fill(Object[] a, int fromIndex, int toIndex, Object value);</span></span><br><span class="line"><span class="comment"> * a:要进行元素填充的数组</span></span><br><span class="line"><span class="comment"> * fromIndex:填充起始位置</span></span><br><span class="line"><span class="comment"> * toIndex:填充结束位置</span></span><br><span class="line"><span class="comment"> * value:填充值 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        Arrays.fill(arr, <span class="number">1</span>); <span class="comment">// 全部填充为1</span></span><br><span class="line">        Arrays.fill(arr, <span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>); <span class="comment">// 填充[0,10)，填充值为5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3、排序"><a href="#3、排序" class="headerlink" title="3、排序"></a>3、排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Arrays.sort(Object a[])</span></span><br><span class="line"><span class="comment"> * a:要排序的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Arrays.sort(Object a[], int fromIndex, int toIndex)</span></span><br><span class="line"><span class="comment"> * a:要排序的数组</span></span><br><span class="line"><span class="comment"> * fromIndex:排序的起始位置</span></span><br><span class="line"><span class="comment"> * toIndex:排序的结束位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123; <span class="number">5</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">8</span> &#125;;</span><br><span class="line">        Arrays.sort(arr); <span class="comment">// 数组排序</span></span><br><span class="line">        Arrays.sort(arr, <span class="number">0</span>, <span class="number">10</span>); <span class="comment">// 数组[0,10)排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4、复制"><a href="#4、复制" class="headerlink" title="4、复制"></a>4、复制</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Object b[] = Arrays.copyOf(Object a[], int newLength)</span></span><br><span class="line"><span class="comment"> * a:要复制的数组</span></span><br><span class="line"><span class="comment"> * newLength:要复制后数组长度，如果&lt;a.length，复制前[0,newLength)；如果&gt;a.length，后面补初始值(整数补0；char补null；)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Object b[] = Arrays.copyOfRange(Object a[], int fromIndex, int toIndex)</span></span><br><span class="line"><span class="comment"> * a:要复制的数组</span></span><br><span class="line"><span class="comment"> * from:复制开始位置</span></span><br><span class="line"><span class="comment"> * to:复制结束位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> arr[] = &#123; <span class="number">5</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">8</span> &#125;;</span><br><span class="line">		<span class="keyword">int</span> arr2[] = Arrays.copyOf(arr,arr.length); <span class="comment">//复制arr数组</span></span><br><span class="line">		<span class="keyword">int</span> arr3[] = Arrays.copyOfRange(arr, <span class="number">0</span>, <span class="number">10</span>); <span class="comment">//复制arr[0,10)</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3、字符串操作"><a href="#3、字符串操作" class="headerlink" title="3、字符串操作"></a>3、字符串操作</h3><h4 id="1、查找"><a href="#1、查找" class="headerlink" title="1、查找"></a>1、查找</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * int idx = str.indexOf(String substr)</span></span><br><span class="line"><span class="comment"> * substr:要搜索的子串</span></span><br><span class="line"><span class="comment"> * idx:返回子串在str中第一次出现的位置，如果没有返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * int idx = str.lastIndexOf(String substr)</span></span><br><span class="line"><span class="comment"> * substr:要搜索的子串</span></span><br><span class="line"><span class="comment"> * idx:返回子串在str中最后一次出现的位置，如果没有返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * char ch = str.charAt(int index)</span></span><br><span class="line"><span class="comment"> * index:下标</span></span><br><span class="line"><span class="comment"> * ch:str中下标为index的字符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"Hello World!"</span>;</span><br><span class="line">    <span class="keyword">int</span> firIdx = str.indexOf(<span class="string">"o"</span>);</span><br><span class="line">    <span class="keyword">int</span> lastIdx = str.lastIndexOf(<span class="string">"o"</span>);</span><br><span class="line">    <span class="keyword">char</span> ch = str.charAt(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2、替换"><a href="#2、替换" class="headerlink" title="2、替换"></a>2、替换</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * String newStr = str.replace(char oldChar, char newChar) </span></span><br><span class="line"><span class="comment"> * oldChar:被替换的字符</span></span><br><span class="line"><span class="comment"> * newChar:替换的字符</span></span><br><span class="line"><span class="comment"> * newStr:替换所有匹配位置后的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * String newStr = str.replace(CharSequence target, CharSequence replacement) </span></span><br><span class="line"><span class="comment"> * target:被替换的字符串</span></span><br><span class="line"><span class="comment"> * replacement:替换的字符串</span></span><br><span class="line"><span class="comment"> * newStr:替换所有匹配位置后的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * String newStr = str.replaceAll(String regex, String replacement)</span></span><br><span class="line"><span class="comment"> * regex:正则表达式，或字符串</span></span><br><span class="line"><span class="comment"> * replacement:用于替换的字符串</span></span><br><span class="line"><span class="comment"> * newString:替换所有匹配位置后的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * String newStr = str.replaceFirst(String regex, String replacement)</span></span><br><span class="line"><span class="comment"> * regex:正则表达式，或字符串</span></span><br><span class="line"><span class="comment"> * replacement:用于替换的字符串</span></span><br><span class="line"><span class="comment"> * newString:只替换第一个匹配位置后的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"Hello World!"</span>;</span><br><span class="line">    str = str.replace(<span class="string">'!'</span>, <span class="string">'.'</span>);</span><br><span class="line">    str = str.replace(<span class="string">"World"</span>, <span class="string">"Java"</span>);</span><br><span class="line">    str = str.replaceAll(<span class="string">"[A-Z]"</span>, <span class="string">"*"</span>);</span><br><span class="line">    str = str.replaceAll(<span class="string">"o"</span>, <span class="string">"*"</span>);</span><br><span class="line">    str = str.replaceFirst(<span class="string">"[A-Z]"</span>, <span class="string">"#"</span>);</span><br><span class="line">    str = str.replaceFirst(<span class="string">"l"</span>, <span class="string">"#"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3、比较"><a href="#3、比较" class="headerlink" title="3、比较"></a>3、比较</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * boolean bool = str.equals(String str1)</span></span><br><span class="line"><span class="comment"> * str1:要比较的字符串</span></span><br><span class="line"><span class="comment"> * bool:比较结果，相等为true，不相等为flase</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * boolean bool = str.equalsIgnoreCase(String str1)</span></span><br><span class="line"><span class="comment"> * str1:要比较的字符串</span></span><br><span class="line"><span class="comment"> * bool:忽略字母大小写的比较结果，相等为true，不相等为flase</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * boolean bool = str.startWith(String prefix)</span></span><br><span class="line"><span class="comment"> * prefix:指作为前缀的字符</span></span><br><span class="line"><span class="comment"> * bool:比较结果，如果prefix是str的前缀则为true，否则为flase</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * boolean bool = str.startWith(String prefix, int offset)</span></span><br><span class="line"><span class="comment"> * prefix:指作为前缀的字符</span></span><br><span class="line"><span class="comment"> * offset:从str的offset位置开始</span></span><br><span class="line"><span class="comment"> * bool:比较结果，如果prefix是str从offset开始的前缀则为true，否则为flase</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * boolean bool = str.endWith(String suffix)</span></span><br><span class="line"><span class="comment"> * suffix:指作为后缀的字符</span></span><br><span class="line"><span class="comment"> * bool:比较结果，如果suffix是str的后缀则为true，否则为flase</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * String newStr = str.toLowerCase();</span></span><br><span class="line"><span class="comment"> * newStr:大写字母全部替换为小写字母后的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * String newStr = str.toUpperCase();</span></span><br><span class="line"><span class="comment"> * newStr:小写字母全部替换为大写字母后的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"Hello World!"</span>;</span><br><span class="line">    <span class="keyword">boolean</span> bool1 = str.equals(<span class="string">"Hello"</span>);</span><br><span class="line">    <span class="keyword">boolean</span> bool2 = str.equalsIgnoreCase(<span class="string">"hello world!"</span>);</span><br><span class="line">    <span class="keyword">boolean</span> bool3 = str.startsWith(<span class="string">"Hello"</span>);</span><br><span class="line">    <span class="keyword">boolean</span> bool4 = str.startsWith(<span class="string">"ello"</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">boolean</span> bool5 = str.endsWith(<span class="string">"World!"</span>);</span><br><span class="line">    str = str.toLowerCase();</span><br><span class="line">    str = str.toUpperCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4、分割"><a href="#4、分割" class="headerlink" title="4、分割"></a>4、分割</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * String[] subStrs = str.split(String sign)</span></span><br><span class="line"><span class="comment"> * sign:分隔符，可以使用正则表达式</span></span><br><span class="line"><span class="comment"> * subStrs:str分割后的字符串数组 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * String[] subStrs = str.split(String sign, int limit)</span></span><br><span class="line"><span class="comment"> * sign:分隔符，可以使用正则表达式</span></span><br><span class="line"><span class="comment"> * limit:限制的分割份数</span></span><br><span class="line"><span class="comment"> * subStrs:str分割后的字符串数组 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"Hello World!"</span>;</span><br><span class="line">    String strs[] = str.split(<span class="string">" "</span>);</span><br><span class="line">    String strs1[] = str.split(<span class="string">" "</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="5、格式化"><a href="#5、格式化" class="headerlink" title="5、格式化"></a>5、格式化</h4><h5 id="常规转换符"><a href="#常规转换符" class="headerlink" title="常规转换符"></a>常规转换符</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * String.format(String format,  Object... args)</span></span><br><span class="line"><span class="comment"> * format:格式化格式</span></span><br><span class="line"><span class="comment"> * args:要被格式化的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(String.format(<span class="string">"%b、%B"</span>, <span class="number">1</span>==<span class="number">1</span>,<span class="number">1</span>==<span class="number">1</span>));</span><br><span class="line">    System.out.println(String.format(<span class="string">"%h、%H"</span>, <span class="string">"Hello"</span>,<span class="string">"Hello"</span>));</span><br><span class="line">    System.out.println(String.format(<span class="string">"%s、%S"</span>, <span class="string">"Hello"</span>,<span class="string">"Hello"</span>));</span><br><span class="line">    System.out.println(String.format(<span class="string">"%c、%C"</span>, <span class="string">'a'</span>,<span class="string">'a'</span>));</span><br><span class="line">    System.out.println(String.format(<span class="string">"%d"</span>, <span class="number">16</span>));</span><br><span class="line">    System.out.println(String.format(<span class="string">"%o"</span>, <span class="number">16</span>));</span><br><span class="line">    System.out.println(String.format(<span class="string">"%x、%X"</span>, <span class="number">16</span>,<span class="number">16</span>));</span><br><span class="line">    System.out.println(String.format(<span class="string">"%e %E"</span>, <span class="number">16.0</span>,<span class="number">16.0</span>));</span><br><span class="line">    System.out.println(String.format(<span class="string">"%a %A"</span>, <span class="number">16.0</span>,<span class="number">16.0</span>));</span><br><span class="line">    System.out.println(String.format(<span class="string">"%% %s"</span>,<span class="string">"Hello"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th align="left">转换符</th>
<th align="left">说明</th>
<th align="left">示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%b、%B</td>
<td align="left">结果被格式化为布尔类型</td>
<td align="left">true、TRUE</td>
</tr>
<tr>
<td align="left">%h、%H</td>
<td align="left">结果被格式化为散列码</td>
<td align="left">42628b2、42628B2</td>
</tr>
<tr>
<td align="left">%s、%S</td>
<td align="left">结果被格式化为字符串类型</td>
<td align="left">Hello、HELLO</td>
</tr>
<tr>
<td align="left">%c、%C</td>
<td align="left">结果被格式化为字符类型</td>
<td align="left">a、A</td>
</tr>
<tr>
<td align="left">%d</td>
<td align="left">结果被格式化为十进制整数</td>
<td align="left">16</td>
</tr>
<tr>
<td align="left">%o</td>
<td align="left">结果被格式化为八进制整数</td>
<td align="left">20</td>
</tr>
<tr>
<td align="left">%x、%X</td>
<td align="left">结果被格式化为十六进制整数</td>
<td align="left">10、10</td>
</tr>
<tr>
<td align="left">%e</td>
<td align="left">结果被格式化为用计算机科学计数法表示的十进制数</td>
<td align="left">1.600000e+01 1.600000E+01</td>
</tr>
<tr>
<td align="left">%a</td>
<td align="left">结果被格式化为带有效位数和指数的十六进制浮点值</td>
<td align="left">0x1.0p4 0X1.0P4</td>
</tr>
<tr>
<td align="left">%%</td>
<td align="left">结果为字面值 <code>%</code></td>
<td align="left">% Hello</td>
</tr>
</tbody></table>
<h5 id="时间和日期格式转换符"><a href="#时间和日期格式转换符" class="headerlink" title="时间和日期格式转换符"></a>时间和日期格式转换符</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * String.format(String format,  Object... args)</span></span><br><span class="line"><span class="comment"> * format:格式化格式</span></span><br><span class="line"><span class="comment"> * args:要被格式化的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Date data = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(String.format(<span class="string">"%tH"</span>, data));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%tI"</span>, data));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%tk"</span>, data));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%tl"</span>, data));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%tM"</span>, data));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%tS"</span>, data));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%tL"</span>, data));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%tN"</span>, data));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%tp"</span>, data));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%tz"</span>, data));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%tZ"</span>, data));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%ts"</span>, data));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%tQ"</span>, data));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%tF"</span>, data));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%tD"</span>, data));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%tc"</span>, data));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%tr"</span>, data));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%tT"</span>, data));</span><br><span class="line">        System.out.println(String.format(<span class="string">"%tR"</span>, data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th align="left">转换符</th>
<th align="left">说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%tH</td>
<td align="left">2位数字的24时制的小时（00~23）</td>
<td>23</td>
</tr>
<tr>
<td align="left">%tI</td>
<td align="left">2位数字的12时制的小时（01~12）</td>
<td>05</td>
</tr>
<tr>
<td align="left">%tk</td>
<td align="left">2位数字的24时制的小时（0~23）</td>
<td>9</td>
</tr>
<tr>
<td align="left">%tl</td>
<td align="left">2位数字的12时制的小时（1~12）</td>
<td>6</td>
</tr>
<tr>
<td align="left">%tM</td>
<td align="left">2位数字的分钟（00~59）</td>
<td>44</td>
</tr>
<tr>
<td align="left">%tS</td>
<td align="left">2位数字的秒数（00~60）</td>
<td>52</td>
</tr>
<tr>
<td align="left">%tL</td>
<td align="left">3位数字的毫秒数（000~999）</td>
<td>558</td>
</tr>
<tr>
<td align="left">%tN</td>
<td align="left">9为数字的微秒数（000000000~999999999）</td>
<td>558000000</td>
</tr>
<tr>
<td align="left">%tp</td>
<td align="left">制定语言环境上下午标记</td>
<td>下午</td>
</tr>
<tr>
<td align="left">%tz</td>
<td align="left">相对于GMT RFC 82 格式的数字时区偏移量</td>
<td>+0800</td>
</tr>
<tr>
<td align="left">%tZ</td>
<td align="left">时区缩写形式的字符串</td>
<td>CST</td>
</tr>
<tr>
<td align="left">%ts</td>
<td align="left">1970-01-01 00:00:00 到现在经过的秒数</td>
<td>1595951092</td>
</tr>
<tr>
<td align="left">%tQ</td>
<td align="left">1970-01-01 00:00:00 到现在经过的毫秒数</td>
<td>1595951092558</td>
</tr>
<tr>
<td align="left">%tF</td>
<td align="left">“年-月-日”格式（4位年份）</td>
<td>2020-07-28</td>
</tr>
<tr>
<td align="left">%tD</td>
<td align="left">“月/日/年”格式（2位年份）</td>
<td>07/28/20</td>
</tr>
<tr>
<td align="left">%tc</td>
<td align="left">全部日期和时间信息</td>
<td>周二 7月 28 23:44:52 CST 2020</td>
</tr>
<tr>
<td align="left">%tr</td>
<td align="left">“时:分:秒 PM(AM)”格式（12时制）</td>
<td>11:44:52 下午</td>
</tr>
<tr>
<td align="left">%tT</td>
<td align="left">“时:分:秒”格式（24时制）</td>
<td>23:44:52</td>
</tr>
<tr>
<td align="left">%tR</td>
<td align="left">“时:分”格式（24时制）</td>
<td>23:44</td>
</tr>
</tbody></table>
<h4 id="6、StringBuilder"><a href="#6、StringBuilder" class="headerlink" title="6、StringBuilder"></a>6、StringBuilder</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * builder.append(Object obj)</span></span><br><span class="line"><span class="comment"> * obj:追加在builder末尾的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * builder.insert(int offset, Object obj)</span></span><br><span class="line"><span class="comment"> * offset:插入位置</span></span><br><span class="line"><span class="comment"> * obj:要插入的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* builder.delete(int start, int end)</span></span><br><span class="line"><span class="comment"> * start:开始位置（包含）</span></span><br><span class="line"><span class="comment"> * end:结束位置（不包含）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* builder.deleteCharAt(int index)</span></span><br><span class="line"><span class="comment"> * index:要删除字符的位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="string">"Test"</span>);</span><br><span class="line">    <span class="comment">//在末尾添加</span></span><br><span class="line">    builder.append(<span class="string">"string"</span>);</span><br><span class="line">    builder.append((<span class="keyword">int</span>)<span class="number">10</span>);</span><br><span class="line">    builder.append((Boolean)<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    System.out.println(builder);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//插入</span></span><br><span class="line">    builder.insert(<span class="number">2</span>, <span class="string">"123"</span>);</span><br><span class="line">    builder.insert(<span class="number">2</span>, (<span class="keyword">int</span>)<span class="number">999</span>);</span><br><span class="line">    builder.insert(<span class="number">2</span>, (CharSequence)<span class="string">"***"</span>);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    System.out.println(builder);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    builder.delete(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    builder.deleteCharAt(<span class="number">0</span>);</span><br><span class="line">    System.out.println(builder);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//转换</span></span><br><span class="line">    String str = builder.toString();</span><br><span class="line">    builder = <span class="keyword">new</span> StringBuilder(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="7、扩展：正则表达式"><a href="#7、扩展：正则表达式" class="headerlink" title="7、扩展：正则表达式"></a>7、扩展：正则表达式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * boolean bool = str.matches(String regex)</span></span><br><span class="line"><span class="comment"> * regex:正则表达式</span></span><br><span class="line"><span class="comment"> * bool:判断str是否符合正则表达式，符合则为true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"Hello"</span>;</span><br><span class="line">    <span class="keyword">boolean</span> bool  = str.matches(<span class="string">"[A-Z][a-z]&#123;4&#125;"</span>);</span><br><span class="line">    System.out.println(bool);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>正则表达式中的元字符</p>
<table>
<thead>
<tr>
<th>元字符</th>
<th>正则表达式中的写法</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>.</td>
<td><code>.</code></td>
<td>代表任意一个字符</td>
</tr>
<tr>
<td>\d</td>
<td><code>\\d</code></td>
<td>代表<code>0~9</code>的任何一个数字</td>
</tr>
<tr>
<td>\D</td>
<td><code>\\D</code></td>
<td>代表任何一个非数字字符</td>
</tr>
<tr>
<td>\s</td>
<td><code>\\s</code></td>
<td>代表空字符，如<code>\t</code>、<code>\n</code></td>
</tr>
<tr>
<td>\S</td>
<td><code>\\S</code></td>
<td>代表非空字符</td>
</tr>
<tr>
<td>\w</td>
<td><code>\\w</code></td>
<td>代表可用作标识符的字符，但不包括<code>$</code></td>
</tr>
<tr>
<td>\W</td>
<td><code>\\W</code></td>
<td>代表不可用于标识符的字符</td>
</tr>
<tr>
<td>\p{Lower}</td>
<td><code>\\p{Lower}</code></td>
<td>代表小写字母<code>{a~z}</code></td>
</tr>
<tr>
<td>\p{Upper}</td>
<td><code>\\p{Upper}</code></td>
<td>代表大写字母<code>{A~Z}</code></td>
</tr>
<tr>
<td>\p{ASCII}</td>
<td><code>\\p{ASCII}</code></td>
<td>代表 ASCII 字符</td>
</tr>
<tr>
<td>\p{Alpha}</td>
<td><code>\\p{Alpha}</code></td>
<td>代表字母字符</td>
</tr>
<tr>
<td>\p{Digit}</td>
<td><code>\\p{Digit}</code></td>
<td>代表十进制数字<code>{0~9}</code></td>
</tr>
<tr>
<td>\p{Alnum}</td>
<td><code>\\p{Alnum}</code></td>
<td>代表数字或字母字符</td>
</tr>
<tr>
<td>\p{Punct}</td>
<td><code>\\p{Punct}</code></td>
<td>代表标点符号 <code>!@#$%^&amp;*()-=_+[]\{}|;:&#39;&quot;,&lt;.&gt;/?`~</code></td>
</tr>
<tr>
<td>\p{Graph}</td>
<td><code>\\p{Graph}</code></td>
<td>代表可见字符<code>[\p{Alnum}\p{Punct}]</code></td>
</tr>
<tr>
<td>\p{Print}</td>
<td><code>\\p{Print}</code></td>
<td>代表可打印字符<code>[\p{Graph}\x20]</code></td>
</tr>
<tr>
<td>\p{Blank}</td>
<td><code>\\p{Blank}</code></td>
<td>代表空格或制表符<code>\t</code></td>
</tr>
<tr>
<td>\p{Cntrl}</td>
<td><code>\\p{Cntrl}</code></td>
<td>代表控制字符<code>[\x00-\x1F\x7F]</code></td>
</tr>
</tbody></table>
<p>正则表达式中的限定符</p>
<table>
<thead>
<tr>
<th>限定修饰符</th>
<th>意义</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>?</td>
<td>0次或1次</td>
<td>A?</td>
</tr>
<tr>
<td>*</td>
<td>0次或多次</td>
<td>A*</td>
</tr>
<tr>
<td>+</td>
<td>0次或多次</td>
<td>A+</td>
</tr>
<tr>
<td>{n}</td>
<td>正好出现n次</td>
<td>A{2}</td>
</tr>
<tr>
<td>{n,}</td>
<td>至少出现n次</td>
<td>A{3,}</td>
</tr>
<tr>
<td>{n,m}</td>
<td>出现 n~m 次</td>
<td>A{2,6}</td>
</tr>
</tbody></table>
<p>方括号中元字符含义</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>[abc]</code></td>
<td>表示a、b或者c</td>
</tr>
<tr>
<td><code>[^abc]</code></td>
<td>表示除a、b、c以外的字符</td>
</tr>
<tr>
<td><code>[a-zA-Z]</code></td>
<td><code>a~z</code>或<code>A~Z</code>的任何字符</td>
</tr>
<tr>
<td><code>[a-d[m-p]]</code></td>
<td><code>a~d</code>或<code>m~p</code>的任何字符</td>
</tr>
<tr>
<td><code>[a-z&amp;&amp;[def]]</code></td>
<td>表示d、e或者f</td>
</tr>
<tr>
<td><code>[a-z&amp;&amp;[^bc]]</code></td>
<td>除b、c以外<code>a~z</code>的所有字符</td>
</tr>
<tr>
<td><code>[a-z&amp;&amp;[^m-p]]</code></td>
<td>除<code>m~p</code>以外<code>a~z</code>的所有字符</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux攻略--(五)遇到的问题</title>
    <url>/2019/04/13/Linux%E6%94%BB%E7%95%A5--(%E4%BA%94)%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="1、安装进程被占用"><a href="#1、安装进程被占用" class="headerlink" title="1、安装进程被占用"></a>1、安装进程被占用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm /var/cache/apt/archives/lock</span><br><span class="line">sudo rm /var/lib/dpkg/lock</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2、触摸板右键失灵"><a href="#2、触摸板右键失灵" class="headerlink" title="2、触摸板右键失灵"></a>2、触摸板右键失灵</h3><p>在软件商店搜索并安装gnome-tweak</p>
<p>启动后选择$$键盘和鼠标 -模拟鼠标点击-区域$$</p>
<p><img src="/2019/04/13/Linux%E6%94%BB%E7%95%A5--(%E4%BA%94)%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/%E8%A7%A6%E6%91%B8%E6%9D%BF%E5%8F%B3%E9%94%AE%E5%A4%B1%E7%81%B5.png" alt="触摸板右键失灵"></p>
<h3 id="3、Ubuntu-gnome-terminal-支持鼠标选择复制，右键粘贴"><a href="#3、Ubuntu-gnome-terminal-支持鼠标选择复制，右键粘贴" class="headerlink" title="3、Ubuntu gnome-terminal 支持鼠标选择复制，右键粘贴"></a>3、Ubuntu gnome-terminal 支持鼠标选择复制，右键粘贴</h3><p><strong>Ubuntu 系统支持选择复制，鼠标中间粘贴</strong>。</p>
<hr>
<p>下面的方法未尝试过</p>
<p>1、下载gnome-terminal源代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get <span class="built_in">source</span> gnome-terminal</span><br></pre></td></tr></table></figure>

<p>2、下载gnome-terminal的编译依赖库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get build-dep gnome-terminal</span><br></pre></td></tr></table></figure>

<p>3、修改源代码gnome-terminal/src/terminal-screen.c</p>
<p><img src="/2019/04/13/Linux%E6%94%BB%E7%95%A5--(%E4%BA%94)%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/%E4%BF%AE%E6%94%B9%E7%BB%88%E7%AB%AF%E6%BA%90%E4%BB%A3%E7%A0%81.png" alt="修改源代码"></p>
<p>下载源代码时可能出现＂您必须在 sources.list 中指定代码源(deb-src) URI＂的错误．</p>
<p>解决方案：运行＂软件和更新＂选中源代码．</p>
<p><img src="/2019/04/13/Linux%E6%94%BB%E7%95%A5--(%E4%BA%94)%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/%E8%BD%AF%E4%BB%B6%E5%92%8C%E6%9B%B4%E6%96%B0%E9%80%89%E4%B8%AD%E6%BA%90%E4%BB%A3%E7%A0%81.png" alt="软件和更新选中源代码"></p>
<h3 id="4、Deep-in-QQ-乱码"><a href="#4、Deep-in-QQ-乱码" class="headerlink" title="4、Deep-in QQ 乱码"></a>4、Deep-in QQ 乱码</h3><p>1、下载Windows的<a href="./simsun.ttc">simsun.ttc</a>字体</p>
<p>2、将字体放入 $~/.deepinwine/Deepin-QQ/drive_c/windows/Fonts$ 目录下</p>
<p>3、在该目录下编写文件zh.reg</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">REGEDIT4</span><br><span class="line">[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]</span><br><span class="line">&quot;Arial&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;Arial CE,238&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;Arial CYR,204&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;Arial Greek,161&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;Arial TUR,162&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;Courier New&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;Courier New CE,238&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;Courier New CYR,204&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;Courier New Greek,161&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;Courier New TUR,162&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;FixedSys&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;Helv&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;Helvetica&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;MS Sans Serif&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;MS Shell Dlg&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;MS Shell Dlg 2&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;System&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;Tahoma&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;Times&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman CE,238&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman CYR,204&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman Greek,161&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;Times New Roman TUR,162&quot;&#x3D;&quot;simsun&quot;</span><br><span class="line">&quot;Tms Rmn&quot;&#x3D;&quot;simsun&quot;</span><br></pre></td></tr></table></figure>

<p>4、注册</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deepin-wine regedit zh.reg</span><br></pre></td></tr></table></figure>



<h3 id="5、WPS字体缺失"><a href="#5、WPS字体缺失" class="headerlink" title="5、WPS字体缺失"></a>5、WPS字体缺失</h3><p>1、<a href="./wps_symbol_fonts.zip">下载字体</a></p>
<p>2、将字体文件copy到字体目录下并修改权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp -r wps_symbol_fonts /usr/share/fonts/</span><br><span class="line"><span class="built_in">cd</span> /usr/share/fonts/ </span><br><span class="line">sudo chmod 755 wps_symbol_fonts</span><br><span class="line"><span class="built_in">cd</span> /usr/share/fonts/wps_symbol_fonts</span><br><span class="line">sudo chmod 644 *</span><br></pre></td></tr></table></figure>

<p>3、生成缓存配置信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/fonts/wps_symbol_fonts</span><br><span class="line">sudo mkfontdir</span><br><span class="line">sudo mkfontscale</span><br><span class="line"><span class="built_in">fc</span>-cache</span><br></pre></td></tr></table></figure>



<h3 id="6、Firefox安装Flash插件"><a href="#6、Firefox安装Flash插件" class="headerlink" title="6、Firefox安装Flash插件"></a>6、Firefox安装Flash插件</h3><p>1、<a href="https://get.adobe.com/cn/flashplayer/" target="_blank" rel="noopener">官网</a>下载 <code>.tar.gz</code>文件</p>
<p>2、将文件解压并将<code>usr</code>文件复制到<code>/usr</code>目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp -r usr/* /usr</span><br></pre></td></tr></table></figure>

<p>3、将<code>libflashplayer.so</code>文件复制到Firefox插件目录下，并修改权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp libflashplayer.so /usr/lib/mozilla/plugins</span><br><span class="line">sudo chmod 755 libflashplayer.so</span><br></pre></td></tr></table></figure>

<p>4、重启Firefox</p>
<h3 id="7、百度网盘打不开"><a href="#7、百度网盘打不开" class="headerlink" title="7、百度网盘打不开"></a>7、百度网盘打不开</h3><p>百度网盘卡在加载界面</p>
<p><img src="/2019/04/13/Linux%E6%94%BB%E7%95%A5--(%E4%BA%94)%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98.png" alt="百度网盘"></p>
<p>删掉<code>~/baidunetdisk</code>文件夹就可以啦</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm -r baidunetdisk</span><br></pre></td></tr></table></figure>



<h3 id="8、Ubuntu经常提示遇到系统错误"><a href="#8、Ubuntu经常提示遇到系统错误" class="headerlink" title="8、Ubuntu经常提示遇到系统错误"></a>8、Ubuntu经常提示遇到系统错误</h3><p>如果觉得<code>Ubuntu</code>经常提示遇到系统错误很烦人，可以关闭提示。</p>
<p>1、安装<code>gksu</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gksu</span><br></pre></td></tr></table></figure>

<p><code>Ubuntu18.04</code>没有<code>gksu</code>可以执行下列命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> gksu=<span class="string">'pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY'</span></span><br></pre></td></tr></table></figure>

<p>2、修改文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gksu gedit /etc/default/apport</span><br></pre></td></tr></table></figure>

<p>将文件中的<code>enabled</code>的值修改为0。</p>
<h3 id="9、Deepin-QQ-显示不了图片"><a href="#9、Deepin-QQ-显示不了图片" class="headerlink" title="9、Deepin QQ 显示不了图片"></a>9、Deepin QQ 显示不了图片</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改引导文件</span></span><br><span class="line">sudo gedit /etc/default/grub</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把其中的 GRUB_CMDLINE_LINUX_DEFAULT="quiet spalsh"修改为  </span></span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">"ipv6.disable=1 quiet splash"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新引导文件</span></span><br><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure>



<h3 id="10、MySQL登录失败"><a href="#10、MySQL登录失败" class="headerlink" title="10、MySQL登录失败"></a>10、MySQL登录失败</h3><p>登录时提示Access denied。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~$ mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">ERROR 1698 (28000): Access denied <span class="keyword">for</span> user <span class="string">'root'</span>@<span class="string">'localhost'</span></span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用超级权限登录mysql,密码随意</span></span><br><span class="line">sudo mysql -u root -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在mysql中执行下列命令</span></span><br><span class="line">mysql&gt; select user, plugin from mysql.user;</span><br><span class="line">mysql&gt; update mysql.user <span class="built_in">set</span> authentication_string=PASSWORD(<span class="string">'新密码'</span>), plugin=<span class="string">'mysql_native_password'</span> <span class="built_in">where</span> user=<span class="string">'root'</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">sudo service mysql stop</span><br><span class="line">sudo service mysql start</span><br><span class="line"><span class="comment"># 登录mysql 使用刚刚新设的密码</span></span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>







<h3 id="0、参考"><a href="#0、参考" class="headerlink" title="0、参考"></a>0、参考</h3><p><a href="https://blog.csdn.net/zmken497300/article/details/77531982" target="_blank" rel="noopener">Ubuntu16.04安装wps并解决系统缺失字体问题</a></p>
<p><a href="https://blog.csdn.net/qq_37806908/article/details/104389641" target="_blank" rel="noopener">deepin QQ/TIM显示不了图片的解决方法</a></p>
]]></content>
      <categories>
        <category>Ubuntu Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>NumPy 库</title>
    <url>/2020/03/05/NumPy%E5%BA%93/</url>
    <content><![CDATA[<h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><p><code>NumPy</code>是第三方库，需要手动安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install numpy</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2、NumPy支持类型"><a href="#2、NumPy支持类型" class="headerlink" title="2、NumPy支持类型"></a>2、NumPy支持类型</h3><table>
<thead>
<tr>
<th align="center">类型</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">bool</td>
<td>布尔类型，1 个字节，值为 True 或 False。</td>
</tr>
<tr>
<td align="center">int</td>
<td>整数类型，通常为 int64 或 int32 。</td>
</tr>
<tr>
<td align="center">intc</td>
<td>与 C 里的 int 相同，通常为 int32 或 int64。</td>
</tr>
<tr>
<td align="center">intp</td>
<td>用于索引，通常为 int32 或 int64。</td>
</tr>
<tr>
<td align="center">int8</td>
<td>字节（从 -128 到 127）</td>
</tr>
<tr>
<td align="center">int16</td>
<td>整数（从 -32768 到 32767）</td>
</tr>
<tr>
<td align="center">int32</td>
<td>整数（从 -2147483648 到 2147483647）</td>
</tr>
<tr>
<td align="center">int64</td>
<td>整数（从 -9223372036854775808 到 9223372036854775807）</td>
</tr>
<tr>
<td align="center">uint8</td>
<td>无符号整数（从 0 到 255）</td>
</tr>
<tr>
<td align="center">uint16</td>
<td>无符号整数（从 0 到 65535）</td>
</tr>
<tr>
<td align="center">uint32</td>
<td>无符号整数（从 0 到 4294967295）</td>
</tr>
<tr>
<td align="center">uint64</td>
<td>无符号整数（从 0 到 18446744073709551615）</td>
</tr>
<tr>
<td align="center">float</td>
<td>float64 的简写。</td>
</tr>
<tr>
<td align="center">float16</td>
<td>半精度浮点，5 位指数，10 位尾数</td>
</tr>
<tr>
<td align="center">float32</td>
<td>单精度浮点，8 位指数，23 位尾数</td>
</tr>
<tr>
<td align="center">float64</td>
<td>双精度浮点，11 位指数，52 位尾数</td>
</tr>
<tr>
<td align="center">complex</td>
<td>complex128 的简写。</td>
</tr>
<tr>
<td align="center">complex64</td>
<td>复数，由两个 32 位浮点表示。</td>
</tr>
<tr>
<td align="center">complex128</td>
<td>复数，由两个 64 位浮点表示。</td>
</tr>
</tbody></table>
<h4 id="1、创建numpy数组时指定变量类型"><a href="#1、创建numpy数组时指定变量类型" class="headerlink" title="1、创建numpy数组时指定变量类型"></a>1、创建<code>numpy</code>数组时指定变量类型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># a: int = 10 指定变量a的类型为int</span></span><br><span class="line">a: np.ndarray = np.array([<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>], dtype=np.float)</span><br><span class="line"><span class="comment"># numpy创建数组时使用'dtype'指定数组的变量类型</span></span><br></pre></td></tr></table></figure>



<h4 id="2、类型转换"><a href="#2、类型转换" class="headerlink" title="2、类型转换"></a>2、类型转换</h4><p>在 NumPy 中，还有一系列以 as 开头的方法，它们可以将特定输入转换为数组，亦可将数组转换为矩阵、标量，<code>ndarray</code> 等</p>
<ul>
<li><code>asarray(a，dtype，order)</code>：将特定输入转换为数组。</li>
<li><code>asanyarray(a，dtype，order)</code>：将特定输入转换为 <code>ndarray</code>。</li>
<li><code>asmatrix(data，dtype)</code>：将特定输入转换为矩阵。</li>
<li><code>asfarray(a，dtype)</code>：将特定输入转换为 <code>float</code> 类型的数组。</li>
<li><code>asarray_chkfinite(a，dtype，order)</code>：将特定输入转换为数组，检查 <code>NaN</code> 或 <code>infs</code>。</li>
<li><code>asscalar(a)</code>：将大小为 1 的数组转换为标量。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">a = np.asmatrix(a)  <span class="comment"># 将二维数组转化为矩阵类型</span></span><br><span class="line">print(type(a))</span><br></pre></td></tr></table></figure>





<h3 id="3、NumPy创建数组"><a href="#3、NumPy创建数组" class="headerlink" title="3、NumPy创建数组"></a>3、NumPy创建数组</h3><h4 id="1、创建-ndarray-数组的方式："><a href="#1、创建-ndarray-数组的方式：" class="headerlink" title="1、创建 ndarray 数组的方式："></a>1、创建 <code>ndarray</code> 数组的方式：</h4><ul>
<li>从列表、元组等数据结构转换</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.array(object, dtype=<span class="literal">None</span>, copy=<span class="literal">True</span>, order=<span class="literal">None</span>, subok=<span class="literal">False</span>, ndmin=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># object：列表、元组等。</span></span><br><span class="line"><span class="comment"># dtype：数据类型。如果未给出，则类型为被保存对象所需的最小类型。</span></span><br><span class="line"><span class="comment"># copy：布尔类型，默认 True，表示复制对象。</span></span><br><span class="line"><span class="comment"># order：顺序。</span></span><br><span class="line"><span class="comment"># subok：布尔类型，表示子类是否被传递。</span></span><br><span class="line"><span class="comment"># ndmin：生成的数组应具有的最小维数。</span></span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">b = np.array([(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)])</span><br></pre></td></tr></table></figure>



<ul>
<li>使用 <code>numpy.arange</code>、<code>numpy.ones</code>、<code>numpy.zeros</code> 等方法创建</li>
</ul>
<p><code>numpy.arange()</code> 的功能是在给定区间内创建一系列均匀间隔的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.arange(start, stop, step, dtype=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># start：开始</span></span><br><span class="line"><span class="comment"># stop：停止</span></span><br><span class="line"><span class="comment"># step：步长</span></span><br><span class="line"><span class="comment"># dtype：数据类型</span></span><br><span class="line"><span class="comment"># 区间 [开始， 停止)，这是一个半开半闭区间。设置 step 步长用于设置值之间的间隔。 dtype可以设置返回ndarray 的值类型。</span></span><br><span class="line">a = np.arange(<span class="number">1</span>, <span class="number">10</span>, <span class="number">0.5</span>, dtype=<span class="string">'float32'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># linspace 用于在指定的区间内返回间隔均匀的值。</span></span><br><span class="line">numpy.linspace(start, stop, num=<span class="number">50</span>, endpoint=<span class="literal">True</span>, retstep=<span class="literal">False</span>, dtype=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># start：序列的起始值</span></span><br><span class="line"><span class="comment"># stop：序列的结束值</span></span><br><span class="line"><span class="comment"># num：生成的样本数</span></span><br><span class="line"><span class="comment"># endpoint：布尔值，如果为真，则最后一个样本包含在序列内</span></span><br><span class="line"><span class="comment"># retstep：布尔值，如果为真，返回间距</span></span><br><span class="line"><span class="comment"># dtype：数组的类型</span></span><br><span class="line">a = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">10</span>, endpoint=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy.ones 用于快速创建数值全部为 1 的多维数组，numpy.zeros 用于快速创建数值全部为 0 的多维数组。</span></span><br><span class="line">numpy.ones(shape, dtype=<span class="literal">None</span>, order=<span class="string">'C'</span>)</span><br><span class="line">numpy.zeros(shape, dtype=<span class="literal">None</span>, order=<span class="string">'C'</span>)</span><br><span class="line"><span class="comment"># shape：用于指定数组形状，例如（1， 2）或 3</span></span><br><span class="line"><span class="comment"># dtype：数据类型</span></span><br><span class="line"><span class="comment"># order：&#123;'C'，'F'&#125;，按行或列方式储存数组</span></span><br><span class="line">a = np.ones((<span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line">b = np.zeros((<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy.eye 用于创建一个二维数组，其特点是k 对角线上的值为 1，其余值全部为0。</span></span><br><span class="line">numpy.eye(N, M=<span class="literal">None</span>, k=<span class="number">0</span>, dtype=&lt;type <span class="string">'float'</span>&gt;)</span><br><span class="line"><span class="comment"># N：输出数组的行数</span></span><br><span class="line"><span class="comment"># M：输出数组的列数</span></span><br><span class="line"><span class="comment"># k：对角线索引：0（默认）是指主对角线，正值是指上对角线，负值是指下对角线</span></span><br><span class="line">a = np.eye(<span class="number">5</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>



<ul>
<li><p>从存储空间读取数组</p>
</li>
<li><p>使用字符串或缓冲区从原始字节创建数组</p>
</li>
<li><p>使用特殊函数，如 <code>random</code></p>
</li>
</ul>
<h4 id="2、ndarray-数组属性"><a href="#2、ndarray-数组属性" class="headerlink" title="2、ndarray 数组属性"></a>2、<code>ndarray</code> 数组属性</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a: np.ndarray = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组转置'ndarray.T'，与'ndarray.transpose()'相同</span></span><br><span class="line">a.T</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据类型'ndarray.dtype'</span></span><br><span class="line">a.dtype</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'ndarray.imag' 用来输出数组包含元素的虚部</span></span><br><span class="line">a.imag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'ndarray.real'用来输出数组包含元素的实部。</span></span><br><span class="line">a.real</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'ndarray.size'用来输出数组中的总包含元素数。</span></span><br><span class="line">a.size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'ndarray.itemsize'输出一个数组元素的字节数。</span></span><br><span class="line">a.itemsize</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'ndarray.nbytes'用来输出数组的元素总字节数。</span></span><br><span class="line">a.nbytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'ndarray.ndim'用来输出数组维度。</span></span><br><span class="line">a.ndim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'ndarray.shape'用来输出数组形状。</span></span><br><span class="line">a.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># ndarray.strides用来遍历数组时，输出每个维度中步进的字节数组。</span></span><br><span class="line">a.strides</span><br></pre></td></tr></table></figure>



<h3 id="4、数组维度和形状"><a href="#4、数组维度和形状" class="headerlink" title="4、数组维度和形状"></a>4、数组维度和形状</h3><h4 id="1、重设形状"><a href="#1、重设形状" class="headerlink" title="1、重设形状"></a>1、重设形状</h4><p><code>reshape</code> 可以在不改变数组数据的同时，改变数组的形状。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># numpy.reshape(a, newshape)</span></span><br><span class="line"><span class="comment"># a表示原数组</span></span><br><span class="line"><span class="comment"># newshape用于指定新的形状</span></span><br><span class="line">a: np.ndarray = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 下面两条语句等价</span></span><br><span class="line">a = np.reshape(a, (<span class="number">5</span>, <span class="number">2</span>))</span><br><span class="line">a = a.reshape((<span class="number">5</span>, <span class="number">2</span>))</span><br><span class="line">print(a.shape)</span><br></pre></td></tr></table></figure>



<p><code>resize</code>对数组尺寸进行重新设定。(<code>reshape</code> 在改变形状时，不会影响原数组，相当于对原数组做了一份拷贝。而 <code>resize</code> 则是对原数组执行操作。)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># numpy.resize(a，new_shape)</span></span><br><span class="line"><span class="comment"># a表示原数组</span></span><br><span class="line"><span class="comment"># newshape用于指定新的形状</span></span><br><span class="line">a: np.ndarray = np.arange(<span class="number">10</span>)</span><br><span class="line">a.resize(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>





<h4 id="2、数组展开"><a href="#2、数组展开" class="headerlink" title="2、数组展开"></a>2、数组展开</h4><p><code>ravel</code> 的目的是将任意形状的数组扁平化，变为 1 维数组。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># numpy.ravel(a, order='C')</span></span><br><span class="line"><span class="comment"># a 表示原数组</span></span><br><span class="line"><span class="comment"># order 表示变换时的读取顺序，默认是按照行依次读取，当 order = 'F' 时，可以按列依次读取排序。</span></span><br><span class="line">a = np.arange(<span class="number">10</span>).reshape((<span class="number">5</span>, <span class="number">2</span>))</span><br><span class="line"><span class="comment"># 下面两条语句等价</span></span><br><span class="line">a: np.ndarray = np.ravel(a, order=<span class="string">'C'</span>)</span><br><span class="line">a: np.ndarray = a.ravel(order=<span class="string">'C'</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(a.shape)</span><br></pre></td></tr></table></figure>



<h4 id="3、轴移动"><a href="#3、轴移动" class="headerlink" title="3、轴移动"></a>3、轴移动</h4><p><code>moveaxis</code> 可以将数组的轴移动到新的位置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># numpy.moveaxis(a, source, destination)</span></span><br><span class="line"><span class="comment"># a：数组</span></span><br><span class="line"><span class="comment"># source：要移动的轴的原始位置</span></span><br><span class="line"><span class="comment"># destination：要移动的轴的目标位置</span></span><br><span class="line">a: np.ndarray = np.ones((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">a = np.moveaxis(a, <span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">print(a.shape)</span><br></pre></td></tr></table></figure>



<h4 id="4、轴交换"><a href="#4、轴交换" class="headerlink" title="4、轴交换"></a>4、轴交换</h4><p>和 <code>moveaxis</code> 不同的是，<code>swapaxes</code> 可以用来交换数组的轴。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># numpy.swapaxes(a, axis1, axis2)</span></span><br><span class="line"><span class="comment"># a：数组。</span></span><br><span class="line"><span class="comment"># axis1：需要交换的轴 1 位置。</span></span><br><span class="line"><span class="comment"># axis2：需要与轴 1 交换位置的轴 2 位置。</span></span><br><span class="line">a: np.ndarray = np.ones((<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line">a = np.swapaxes(a, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">print(a.shape)</span><br></pre></td></tr></table></figure>



<h4 id="5、数组转置"><a href="#5、数组转置" class="headerlink" title="5、数组转置"></a>5、数组转置</h4><p><code>transpose</code> 类似于矩阵的转置，它可以将 2 维数组的横轴和纵轴交换。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># numpy.transpose(a, axes=None)</span></span><br><span class="line"><span class="comment"># a：数组</span></span><br><span class="line"><span class="comment"># axis：该值默认为 none，表示转置。如果有值，那么则按照值替换轴</span></span><br><span class="line">a: np.ndarray = np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 下面两条语句等价</span></span><br><span class="line">a = np.transpose(a)</span><br><span class="line">a = a.transpose()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>



<h4 id="6、维度改变"><a href="#6、维度改变" class="headerlink" title="6、维度改变"></a>6、维度改变</h4><p><code>atleast_xd</code> 支持将输入数据直接视为 <code>x</code>维。这里的 <code>x</code> 可以表示：<code>1，2，3</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># numpy.atleast_1d()</span></span><br><span class="line"><span class="comment"># numpy.atleast_2d()</span></span><br><span class="line"><span class="comment"># numpy.atleast_3d()</span></span><br><span class="line">a: np.ndarray = np.atleast_1d([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">b: np.ndarray = np.atleast_2d([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">c: np.ndarray = np.atleast_3d([<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>



<h4 id="7、数组链接"><a href="#7、数组链接" class="headerlink" title="7、数组链接"></a>7、数组链接</h4><p><code>concatenate</code> 可以将多个数组沿指定轴连接在一起。(需要保证连接处的维数一致)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># numpy.concatenate((a1, a2, ...), axis=0)</span></span><br><span class="line"><span class="comment"># (a1, a2, ...)：需要连接的数组。</span></span><br><span class="line"><span class="comment"># axis：指定连接轴。</span></span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">b = np.array([[<span class="number">7</span>, <span class="number">8</span>], [<span class="number">9</span>, <span class="number">10</span>]])</span><br><span class="line">c = np.array([[<span class="number">11</span>, <span class="number">12</span>]])</span><br><span class="line">d = np.concatenate((a, b, c), axis=<span class="number">0</span>)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure>



<h4 id="8、数组堆叠"><a href="#8、数组堆叠" class="headerlink" title="8、数组堆叠"></a>8、数组堆叠</h4><p>在 NumPy 中，以下方法可用于数组的堆叠：</p>
<ul>
<li><code>stack(arrays，axis)</code>：沿着新轴连接数组的序列。</li>
<li><code>column_stack()</code>：将 1 维数组作为列堆叠到 2 维数组中。</li>
<li><code>hstack()</code>：按水平方向堆叠数组。</li>
<li><code>vstack()</code>：按垂直方向堆叠数组。</li>
<li><code>dstack()</code>：按深度方向堆叠数组。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">b = np.array([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">c = np.stack((a, b))</span><br><span class="line">d = np.stack((a, b), axis=<span class="number">-1</span>)</span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure>



<h4 id="9、拆分"><a href="#9、拆分" class="headerlink" title="9、拆分"></a>9、拆分</h4><p><code>split</code> 及与之相似的一系列方法主要是用于数组的拆分</p>
<ul>
<li><code>split(ary，indices_or_sections，axis)</code>：将数组拆分为多个子数组。</li>
<li><code>dsplit(ary，indices_or_sections)</code>：按深度方向将数组拆分成多个子数组。</li>
<li><code>hsplit(ary，indices_or_sections)</code>：按水平方向将数组拆分成多个子数组。</li>
<li><code>vsplit(ary，indices_or_sections)</code>：按垂直方向将数组拆分成多个子数组。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拆分一维</span></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">b = np.split(a, <span class="number">5</span>)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拆分多维</span></span><br><span class="line">a = np.arange(<span class="number">10</span>).reshape(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">b = np.split(a, <span class="number">2</span>)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>



<h4 id="10、删除"><a href="#10、删除" class="headerlink" title="10、删除"></a>10、删除</h4><p><code>delete</code>沿特定轴删除数组中的子数组。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># numpy.delete(arr，obj，axis) </span></span><br><span class="line"><span class="comment"># arr: 数组</span></span><br><span class="line"><span class="comment"># obj: 要删除列所的索引</span></span><br><span class="line"><span class="comment"># axis: 沿某一轴</span></span><br><span class="line">a: np.ndarray = np.arange(<span class="number">8</span>).reshape(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">b = np.delete(a, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>



<h4 id="11、插入"><a href="#11、插入" class="headerlink" title="11、插入"></a>11、插入</h4><p><code>insert</code>依据索引在特定轴之前插入值。(注意 <code>append</code>方法返回值，默认是展平状态下的 1 维数组)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># numpy.insert(arr，obj，values，axis)</span></span><br><span class="line"><span class="comment"># arr: 数组</span></span><br><span class="line"><span class="comment"># obj: 要插位置的索引</span></span><br><span class="line"><span class="comment"># values: 要插入的值</span></span><br><span class="line"><span class="comment"># axis: 沿某一轴</span></span><br><span class="line">a: np.ndarray = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">b = np.arange(<span class="number">4</span>)</span><br><span class="line">c = np.insert(a, <span class="number">3</span>, b, <span class="number">0</span>)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>



<h4 id="12、附加"><a href="#12、附加" class="headerlink" title="12、附加"></a>12、附加</h4><p><code>append</code>将值附加到数组的末尾，并返回 1 维数组。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># numpy.append(arr，values，axis)</span></span><br><span class="line"><span class="comment"># arr: 数组</span></span><br><span class="line"><span class="comment"># values: 要插入的值</span></span><br><span class="line"><span class="comment"># axis: 沿某一轴</span></span><br><span class="line">a: np.ndarray = np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b: np.ndarray = np.arange(<span class="number">3</span>)</span><br><span class="line">c = np.append(a, b)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>



<h4 id="13、数组翻转"><a href="#13、数组翻转" class="headerlink" title="13、数组翻转"></a>13、数组翻转</h4><ul>
<li><code>fliplr(m)</code>：左右翻转数组。</li>
<li><code>flipud(m)</code>：上下翻转数组。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># numpy.flip(m, axis=None)</span></span><br><span class="line"><span class="comment"># numpy.fliplr(m)</span></span><br><span class="line"><span class="comment"># numpy.flipud(m)</span></span><br><span class="line"><span class="comment"># m: 原数组</span></span><br><span class="line"><span class="comment"># axis： 沿某一轴翻转</span></span><br><span class="line">a = np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">b = np.fliplr(a)</span><br><span class="line">c = np.flipud(a)</span><br><span class="line">d = np.flip(a, axis=<span class="number">1</span>)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure>



<h3 id="5、索引与切片"><a href="#5、索引与切片" class="headerlink" title="5、索引与切片"></a>5、索引与切片</h3><h4 id="1、数组索引"><a href="#1、数组索引" class="headerlink" title="1、数组索引"></a>1、数组索引</h4><p>一维数组索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a: np.ndarray = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 获取索引值为 1 的数据。</span></span><br><span class="line">print(a[<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 分别获取索引值为 1，4，5 的数据。</span></span><br><span class="line">tmp = a[[<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>]]</span><br><span class="line">print(tmp)</span><br><span class="line">print(type(tmp))</span><br></pre></td></tr></table></figure>

<p>二维数组索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a: np.ndarray = np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 获取第 2 行，第 3 列的数据。</span></span><br><span class="line">print(a[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">print(a[<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取a[1,3]和a[2,4]</span></span><br><span class="line">b = a[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取a[0,1,1]和a[1,2,2]</span></span><br><span class="line">a: np.ndarray = np.arange(<span class="number">30</span>).reshape(<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">b = a[[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>



<h4 id="2、数组切片"><a href="#2、数组切片" class="headerlink" title="2、数组切片"></a>2、数组切片</h4><p>一维数组切片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ndarray[start:stop:step]</span></span><br><span class="line"><span class="comment"># [start:stop:step] 分别代表 [起始索引:截至索引:步长]。</span></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">print(a[:<span class="number">5</span>])</span><br><span class="line">print(a[<span class="number">5</span>:<span class="number">10</span>])</span><br><span class="line">print(a[<span class="number">0</span>:<span class="number">10</span>:<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p>二维数组切片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ndarray[start:stop:step,...,start:stop:step]</span></span><br><span class="line"><span class="comment"># [start:stop:step] 分别代表 [起始索引:截至索引:步长]。</span></span><br><span class="line">a = np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">print(a[<span class="number">0</span>:<span class="number">3</span>, <span class="number">2</span>:<span class="number">4</span>])</span><br><span class="line">print(a[:, ::<span class="number">2</span>])</span><br></pre></td></tr></table></figure>



<h3 id="6、排序、搜索、计数"><a href="#6、排序、搜索、计数" class="headerlink" title="6、排序、搜索、计数"></a>6、排序、搜索、计数</h3><h4 id="1、排序"><a href="#1、排序" class="headerlink" title="1、排序"></a>1、排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># numpy.sort(a, axis=-1, kind='quicksort', order=None)</span></span><br><span class="line"><span class="comment"># a：数组。</span></span><br><span class="line"><span class="comment"># axis：要排序的轴。如果为None，则在排序之前将数组铺平。默认值为 - 1，沿最后一个轴排序。</span></span><br><span class="line"><span class="comment"># kind：&#123;'quicksort'，'mergesort'，'heapsort'&#125;，排序算法。默认值为 quicksort。</span></span><br><span class="line">a = np.random.rand(<span class="number">20</span>).reshape(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">b = np.sort(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>numpy.lexsort(keys ,axis)</code>：使用多个键进行间接排序。</li>
<li><code>numpy.argsort(a ,axis,kind,order)</code>：沿给定轴执行间接排序。</li>
<li><code>numpy.msort(a)</code>：沿第 1 个轴排序。</li>
<li><code>numpy.sort_complex(a)</code>：针对复数排序。</li>
</ul>
<h4 id="2、搜索和计数"><a href="#2、搜索和计数" class="headerlink" title="2、搜索和计数"></a>2、搜索和计数</h4><ul>
<li><code>argmax(a ,axis,out)</code>：返回数组中指定轴的最大值的索引。</li>
<li><code>nanargmax(a ,axis)</code>：返回数组中指定轴的最大值的索引,忽略 NaN。</li>
<li><code>argmin(a ,axis,out)</code>：返回数组中指定轴的最小值的索引。</li>
<li><code>nanargmin(a ,axis)</code>：返回数组中指定轴的最小值的索引,忽略 NaN。</li>
<li><code>argwhere(a)</code>：返回数组中非 0 元素的索引,按元素分组。</li>
<li><code>nonzero(a)</code>：返回数组中非 0 元素的索引。</li>
<li><code>flatnonzero(a)</code>：返回数组中非 0 元素的索引,并铺平。</li>
<li><code>where(条件,x,y)</code>：根据指定条件,从指定行、列返回元素。</li>
<li><code>searchsorted(a,v ,side,sorter)</code>：查找要插入元素以维持顺序的索引。</li>
<li><code>extract(condition,arr)</code>：返回满足某些条件的数组的元素。</li>
<li><code>count_nonzero(a)</code>：计算数组中非 0 元素的数量。</li>
</ul>
<h3 id="7、NumPy数值计算"><a href="#7、NumPy数值计算" class="headerlink" title="7、NumPy数值计算"></a>7、NumPy数值计算</h3><h4 id="1、Numpy随机数"><a href="#1、Numpy随机数" class="headerlink" title="1、Numpy随机数"></a>1、Numpy随机数</h4><p>NumPy 的随机数功能非常强大，主要由 <code>numpy.random</code> 模块完成。</p>
<p>该模块与<code>Python</code>标准库中的<code>random</code>库相同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># numpy.random.rand(d0, d1, ..., dn)</span></span><br><span class="line"><span class="comment"># 指定一个数组，并使用[0, 1) 区间随机数据填充，这些数据均匀分布。</span></span><br><span class="line"><span class="comment"># (d0, d1, ..., dn)是对数组形状的描述</span></span><br><span class="line">a: np.ndarray = np.random.rand(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># numpy.random.randn(d0, d1, ..., dn)</span></span><br><span class="line"><span class="comment"># 指定一个数组，并使用[0, 1) 区间随机数据填充，这些数据均匀分布。从标准正态分布中返回一个或多个样本值。</span></span><br><span class="line"><span class="comment"># (d0, d1, ..., dn)是对数组形状的描述</span></span><br><span class="line">b: np.ndarray = np.random.randn(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># randint(low, high, size, dtype)</span></span><br><span class="line"><span class="comment"># 生成[low, high) 的随机整数。(注意这是一个半开半闭区间)</span></span><br><span class="line"><span class="comment"># size: 数组的大小</span></span><br><span class="line">c: np.ndarray = np.random.randint(<span class="number">2</span>, <span class="number">5</span>, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># random_sample(size)</span></span><br><span class="line"><span class="comment"># 在[0, 1) 区间内生成指定 size 的随机浮点数。</span></span><br><span class="line">d: np.ndarray = np.random.random_sample((<span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># choice(a, size, replace, p)</span></span><br><span class="line"><span class="comment"># 在给定的数组里随机抽取几个值，该方法类似于随机抽样。</span></span><br><span class="line"><span class="comment"># replace: 元素是否能够重复</span></span><br><span class="line">e: np.ndarray = np.random.choice(<span class="number">10</span>, <span class="number">5</span>, replace=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 从[0,9]中随机选出5个不重复的数</span></span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure>



<p>概率密度分布</p>
<ul>
<li><code>numpy.random.beta(a，b，size)</code>：从 Beta 分布中生成随机数。</li>
<li><code>numpy.random.binomial(n, p, size)</code>：从二项分布中生成随机数。</li>
<li><code>numpy.random.chisquare(df，size)</code>：从卡方分布中生成随机数。</li>
<li><code>numpy.random.dirichlet(alpha，size)</code>：从 Dirichlet 分布中生成随机数。</li>
<li><code>numpy.random.exponential(scale，size)</code>：从指数分布中生成随机数。</li>
<li><code>numpy.random.f(dfnum，dfden，size)</code>：从 F 分布中生成随机数。</li>
<li><code>numpy.random.gamma(shape，scale，size)</code>：从 Gamma 分布中生成随机数。</li>
<li><code>numpy.random.geometric(p，size)</code>：从几何分布中生成随机数。</li>
<li><code>numpy.random.gumbel(loc，scale，size)</code>：从 Gumbel 分布中生成随机数。</li>
<li><code>numpy.random.hypergeometric(ngood, nbad, nsample, size)</code>：从超几何分布中生成随机数。</li>
<li><code>numpy.random.laplace(loc，scale，size)</code>：从拉普拉斯双指数分布中生成随机数。</li>
<li><code>numpy.random.logistic(loc，scale，size)</code>：从逻辑分布中生成随机数。</li>
<li><code>numpy.random.lognormal(mean，sigma，size)</code>：从对数正态分布中生成随机数。</li>
<li><code>numpy.random.logseries(p，size)</code>：从对数系列分布中生成随机数。</li>
<li><code>numpy.random.multinomial(n，pvals，size)</code>：从多项分布中生成随机数。</li>
<li><code>numpy.random.multivariate_normal(mean, cov, size)</code>：从多变量正态分布绘制随机样本。</li>
<li><code>numpy.random.negative_binomial(n, p, size)</code>：从负二项分布中生成随机数。</li>
<li><code>numpy.random.noncentral_chisquare(df，nonc，size)</code>：从非中心卡方分布中生成随机数。</li>
<li><code>numpy.random.noncentral_f(dfnum, dfden, nonc, size)</code>：从非中心 F 分布中抽取样本。</li>
<li><code>numpy.random.normal(loc，scale，size)</code>：从正态分布绘制随机样本。</li>
<li><code>numpy.random.pareto(a，size)</code>：从具有指定形状的 Pareto II 或 Lomax 分布中生成随机数。</li>
<li><code>numpy.random.poisson(lam，size)</code>：从泊松分布中生成随机数。</li>
<li><code>numpy.random.power(a，size)</code>：从具有正指数 a-1 的功率分布中在 0，1 中生成随机数。</li>
<li><code>numpy.random.rayleigh(scale，size)</code>：从瑞利分布中生成随机数。</li>
<li><code>numpy.random.standard_cauchy(size)</code>：从标准 Cauchy 分布中生成随机数。</li>
<li><code>numpy.random.standard_exponential(size)</code>：从标准指数分布中生成随机数。</li>
<li><code>numpy.random.standard_gamma(shape，size)</code>：从标准 Gamma 分布中生成随机数。</li>
<li><code>numpy.random.standard_normal(size)</code>：从标准正态分布中生成随机数。</li>
<li><code>numpy.random.standard_t(df，size)</code>：从具有 df 自由度的标准学生 t 分布中生成随机数。</li>
<li><code>numpy.random.triangular(left，mode，right，size)</code>：从三角分布中生成随机数。</li>
<li><code>numpy.random.uniform(low，high，size)</code>：从均匀分布中生成随机数。</li>
<li><code>numpy.random.vonmises(mu，kappa，size)</code>：从 von Mises 分布中生成随机数。</li>
<li><code>numpy.random.wald(mean，scale，size)</code>：从 Wald 或反高斯分布中生成随机数。</li>
<li><code>numpy.random.weibull(a，size)</code>：从威布尔分布中生成随机数。</li>
<li><code>numpy.random.zipf(a，size)</code>：从 Zipf 分布中生成随机数。</li>
</ul>
<h4 id="2、数学函数"><a href="#2、数学函数" class="headerlink" title="2、数学函数"></a>2、数学函数</h4><h5 id="1、三角函数"><a href="#1、三角函数" class="headerlink" title="1、三角函数"></a>1、三角函数</h5><ul>
<li><code>numpy.sin(x)</code>：三角正弦。</li>
<li><code>numpy.cos(x)</code>：三角余弦。</li>
<li><code>numpy.tan(x)</code>：三角正切。</li>
<li><code>numpy.arcsin(x)</code>：三角反正弦。</li>
<li><code>numpy.arccos(x)</code>：三角反余弦。</li>
<li><code>numpy.arctan(x)</code>：三角反正切。</li>
<li><code>numpy.hypot(x1,x2)</code>：直角三角形求斜边。</li>
<li><code>numpy.degrees(x)</code>：弧度转换为度。</li>
<li><code>numpy.radians(x)</code>：度转换为弧度。</li>
<li><code>numpy.deg2rad(x)</code>：度转换为弧度。</li>
<li><code>numpy.rad2deg(x)</code>：弧度转换为度。</li>
</ul>
<h5 id="2、双曲函数"><a href="#2、双曲函数" class="headerlink" title="2、双曲函数"></a>2、双曲函数</h5><ul>
<li><code>numpy.sinh(x)</code>：双曲正弦。</li>
<li><code>numpy.cosh(x)</code>：双曲余弦。</li>
<li><code>numpy.tanh(x)</code>：双曲正切。</li>
<li><code>numpy.arcsinh(x)</code>：反双曲正弦。</li>
<li><code>numpy.arccosh(x)</code>：反双曲余弦。</li>
<li><code>numpy.arctanh(x)</code>：反双曲正切。</li>
</ul>
<h5 id="3、数值修约"><a href="#3、数值修约" class="headerlink" title="3、数值修约"></a>3、数值修约</h5><p>数值修约, 又称数字修约, 是指在进行具体的数字运算前, 按照一定的规则确定一致的位数, 然后舍去某些数字后面多余的尾数的过程。比如, 我们常听到的「4 舍 5 入」就属于数值修约中的一种。</p>
<ul>
<li><code>numpy.around(a)</code>：平均到给定的小数位数。</li>
<li><code>numpy.round_(a)</code>：将数组舍入到给定的小数位数。</li>
<li><code>numpy.rint(x)</code>：修约到最接近的整数。</li>
<li><code>numpy.fix(x, y)</code>：向 0 舍入到最接近的整数。</li>
<li><code>numpy.floor(x)</code>：返回输入的底部(标量 x 的底部是最大的整数 i)。</li>
<li><code>numpy.ceil(x)</code>：返回输入的上限(标量 x 的底部是最小的整数 i).</li>
<li><code>numpy.trunc(x)</code>：返回输入的截断值。</li>
</ul>
<h5 id="4、求和、求积、差分"><a href="#4、求和、求积、差分" class="headerlink" title="4、求和、求积、差分"></a>4、求和、求积、差分</h5><p>下面这些方法用于数组内元素或数组间进行求和、求积以及进行差分。</p>
<ul>
<li><code>numpy.prod(a, axis, dtype, keepdims)</code>：返回指定轴上的数组元素的乘积。</li>
<li><code>numpy.sum(a, axis, dtype, keepdims)</code>：返回指定轴上的数组元素的总和。</li>
<li><code>numpy.nanprod(a, axis, dtype, keepdims)</code>：返回指定轴上的数组元素的乘积, 将 NaN 视作 1。</li>
<li><code>numpy.nansum(a, axis, dtype, keepdims)</code>：返回指定轴上的数组元素的总和, 将 NaN 视作 0。</li>
<li><code>numpy.cumprod(a, axis, dtype)</code>：返回沿给定轴的元素的累积乘积。</li>
<li><code>numpy.cumsum(a, axis, dtype)</code>：返回沿给定轴的元素的累积总和。</li>
<li><code>numpy.nancumprod(a, axis, dtype)</code>：返回沿给定轴的元素的累积乘积, 将 NaN 视作 1。</li>
<li><code>numpy.nancumsum(a, axis, dtype)</code>：返回沿给定轴的元素的累积总和, 将 NaN 视作 0。</li>
<li><code>numpy.diff(a, n, axis)</code>：计算沿指定轴的第 n 个离散差分。</li>
<li><code>numpy.ediff1d(ary, to_end, to_begin)</code>：数组的连续元素之间的差异。</li>
<li><code>numpy.gradient(f)</code>：返回 N 维数组的梯度。</li>
<li><code>numpy.cross(a, b, axisa, axisb, axisc, axis)</code>：返回两个(数组）向量的叉积。</li>
<li><code>numpy.trapz(y, x, dx, axis)</code>：使用复合梯形规则沿给定轴积分。</li>
</ul>
<h5 id="5、指数和对数"><a href="#5、指数和对数" class="headerlink" title="5、指数和对数"></a>5、指数和对数</h5><ul>
<li><code>numpy.exp(x)</code>：计算输入数组中所有元素的指数。</li>
<li><code>numpy.log(x)</code>：计算自然对数。</li>
<li><code>numpy.log10(x)</code>：计算常用对数。</li>
<li><code>numpy.log2(x)</code>：计算二进制对数。</li>
</ul>
<h5 id="6、算术运算"><a href="#6、算术运算" class="headerlink" title="6、算术运算"></a>6、算术运算</h5><ul>
<li><code>numpy.add(x1, x2)</code>：对应元素相加。</li>
<li><code>numpy.reciprocal(x)</code>：求倒数 1/x。</li>
<li><code>numpy.negative(x)</code>：求对应负数。</li>
<li><code>numpy.multiply(x1, x2)</code>：求解乘法。</li>
<li><code>numpy.divide(x1, x2)</code>：相除 x1/x2。</li>
<li><code>numpy.power(x1, x2)</code>：类似于 x1^x2。</li>
<li><code>numpy.subtract(x1, x2)</code>：减法。</li>
<li><code>numpy.fmod(x1, x2)</code>：返回除法的元素余项。</li>
<li><code>numpy.mod(x1, x2)</code>：返回余项。</li>
<li><code>numpy.modf(x1)</code>：返回数组的小数和整数部分。</li>
<li><code>numpy.remainder(x1, x2)</code>：返回除法余数。</li>
</ul>
<h5 id="7、矩阵和向量积"><a href="#7、矩阵和向量积" class="headerlink" title="7、矩阵和向量积"></a>7、矩阵和向量积</h5><ul>
<li><code>numpy.dot(a, b)</code>：求解两个数组的点积。</li>
<li><code>numpy.vdot(a, b)</code>：求解两个向量的点积。</li>
<li><code>numpy.inner(a, b)</code>：求解两个数组的内积。</li>
<li><code>numpy.outer(a, b)</code>：求解两个向量的外积。</li>
<li><code>numpy.matmul(a, b)</code>：求解两个数组的矩阵乘积。</li>
<li><code>numpy.tensordot(a, b)</code>：求解张量点积。</li>
<li><code>numpy.kron(a, b)</code>：计算 Kronecker 乘积。</li>
</ul>
<h5 id="9、代数运算"><a href="#9、代数运算" class="headerlink" title="9、代数运算"></a>9、代数运算</h5><ul>
<li><code>numpy.linalg.cholesky(a)</code>：Cholesky 分解。</li>
<li><code>numpy.linalg.qr(a ,mode)</code>：计算矩阵的 QR 因式分解。</li>
<li><code>numpy.linalg.svd(a ,full_matrices,compute_uv)</code>：奇异值分解。</li>
<li><code>numpy.linalg.eig(a)</code>：计算正方形数组的特征值和右特征向量。</li>
<li><code>numpy.linalg.eigh(a, UPLO)</code>：返回 Hermitian 或对称矩阵的特征值和特征向量。</li>
<li><code>numpy.linalg.eigvals(a)</code>：计算矩阵的特征值。</li>
<li><code>numpy.linalg.eigvalsh(a, UPLO)</code>：计算 Hermitian 或真实对称矩阵的特征值。</li>
<li><code>numpy.linalg.norm(x ,ord,axis,keepdims)</code>：计算矩阵或向量范数。</li>
<li><code>numpy.linalg.cond(x ,p)</code>：计算矩阵的条件数。</li>
<li><code>numpy.linalg.det(a)</code>：计算数组的行列式。</li>
<li><code>numpy.linalg.matrix_rank(M ,tol)</code>：使用奇异值分解方法返回秩。</li>
<li><code>numpy.linalg.slogdet(a)</code>：计算数组的行列式的符号和自然对数。</li>
<li><code>numpy.trace(a ,offset,axis1,axis2,dtype,out)</code>：沿数组的对角线返回总和。</li>
<li><code>numpy.linalg.solve(a, b)</code>：求解线性矩阵方程或线性标量方程组。</li>
<li><code>numpy.linalg.tensorsolve(a, b ,axes)</code>：为 x 解出张量方程 a x = b</li>
<li><code>numpy.linalg.lstsq(a, b ,rcond)</code>：将最小二乘解返回到线性矩阵方程。</li>
<li><code>numpy.linalg.inv(a)</code>：计算逆矩阵。</li>
<li><code>numpy.linalg.pinv(a ,rcond)</code>：计算矩阵的（Moore-Penrose）伪逆。</li>
<li><code>numpy.linalg.tensorinv(a ,ind)</code>：计算 N 维数组的逆。</li>
</ul>
<h5 id="9、其他"><a href="#9、其他" class="headerlink" title="9、其他"></a>9、其他</h5><ul>
<li><code>numpy.angle(z, deg)</code>：返回复参数的角度。</li>
<li><code>numpy.real(val)</code>：返回数组元素的实部。</li>
<li><code>numpy.imag(val)</code>：返回数组元素的虚部。</li>
<li><code>numpy.conj(x)</code>：按元素方式返回共轭复数。</li>
<li><code>numpy.convolve(a, v, mode)</code>：返回线性卷积。</li>
<li><code>numpy.sqrt(x)</code>：平方根。</li>
<li><code>numpy.cbrt(x)</code>：立方根。</li>
<li><code>numpy.square(x)</code>：平方。</li>
<li><code>numpy.absolute(x)</code>：绝对值, 可求解复数。</li>
<li><code>numpy.fabs(x)</code>：绝对值。</li>
<li><code>numpy.sign(x)</code>：符号函数。</li>
<li><code>numpy.maximum(x1, x2)</code>：最大值。</li>
<li><code>numpy.minimum(x1, x2)</code>：最小值。</li>
<li><code>numpy.nan_to_num(x)</code>：用 0 替换 NaN。</li>
<li><code>numpy.interp(x, xp, fp, left, right, period)</code>：线性插值。</li>
</ul>
<h3 id="0、参考"><a href="#0、参考" class="headerlink" title="0、参考"></a>0、参考</h3><p><a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文</a></p>
<p><a href="https://www.shiyanlou.com/courses/912/learning/" target="_blank" rel="noopener">NumPy 数值计算基础入门</a></p>
]]></content>
      <categories>
        <category>Python Module</category>
      </categories>
      <tags>
        <tag>Python Module</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas 库</title>
    <url>/2020/03/10/Pandas%E5%BA%93/</url>
    <content><![CDATA[<h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><p><code>pandas</code>是第三方库需要手动安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用pip安装</span></span><br><span class="line">pip3 install pandas</span><br><span class="line"></span><br><span class="line"><span class="comment"># Linux安装</span></span><br><span class="line">sudo apt-get install python3-pandas</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2、数据类型"><a href="#2、数据类型" class="headerlink" title="2、数据类型"></a>2、数据类型</h3><p><code>Pandas</code> 的数据类型主要有以下几种，它们分别是：<code>Series</code>（一维数组），<code>DataFrame</code>（二维数组），<code>Panel</code>（三维数组），<code>Panel4D</code>（四维数组），<code>PanelND</code>（更多维数组）。</p>
<h4 id="1、Series"><a href="#1、Series" class="headerlink" title="1、Series"></a>1、Series</h4><p><code>Series</code> 是 <code>Pandas</code> 中最基本的一维数组形式。其可以储存整数、浮点数、字符串等类型的数据。索引是 <code>Pandas</code> 数据结构中的一大特性，它主要的功能是帮助我们更快速地定位数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pandas.Series(data=None, index=None)</span></span><br><span class="line"><span class="comment"># data 可以是字典，或者NumPy 里的 ndarray 对象等</span></span><br><span class="line"><span class="comment"># index 是数据索引</span></span><br><span class="line">s = pd.Series(&#123;<span class="string">'a'</span>: <span class="number">10</span>, <span class="string">'b'</span>: <span class="number">20</span>, <span class="string">'c'</span>: <span class="number">30</span>&#125;)</span><br><span class="line">s = pd.Series(np.random.randn(<span class="number">5</span>))</span><br><span class="line">print(s)</span><br><span class="line">print(type(s))</span><br></pre></td></tr></table></figure>



<h4 id="2、DataFrame"><a href="#2、DataFrame" class="headerlink" title="2、DataFrame"></a>2、DataFrame</h4><p><code>DataFrame</code> 是 <code>Pandas</code> 中最为常见、最重要且使用频率最高的数据结构。<code>DataFrame</code> 和平常的电子表格或 <code>SQL</code>  表结构相似。你可以把 <code>DataFrame</code> 看成是 <code>Series</code> 的扩展类型，它仿佛是由多个 <code>Series</code> 拼合而成。它和 <code>Series</code>  的直观区别在于，数据不但具有行索引，且具有列索引。</p>
<p>ataFrame 可以由以下多个类型的数据构建：</p>
<ul>
<li>一维数组、列表、字典或者 Series 字典。</li>
<li>二维或者结构化的 <code>numpy.ndarray</code>。</li>
<li>一个 Series 或者另一个 DataFrame。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pandas.DataFrame(data=None, index=None, columns=None)</span></span><br><span class="line"><span class="comment"># data 数据</span></span><br><span class="line"><span class="comment"># index 数据索引</span></span><br><span class="line"><span class="comment"># columns 列索引</span></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'one'</span>: pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]),</span><br><span class="line">                   <span class="string">'two'</span>: pd.Series([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])&#125;)</span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'one'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'two'</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]&#125;)</span><br><span class="line">df = pd.DataFrame([&#123;<span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">4</span>&#125;,</span><br><span class="line">                   &#123;<span class="string">'one'</span>: <span class="number">2</span>, <span class="string">'two'</span>: <span class="number">5</span>&#125;,</span><br><span class="line">                   &#123;<span class="string">'one'</span>: <span class="number">3</span>, <span class="string">'two'</span>: <span class="number">6</span>&#125;])</span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">5</span>, size=(<span class="number">2</span>, <span class="number">4</span>)))</span><br><span class="line">print(df)</span><br><span class="line">print(type(df))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Series 和 DataFrame 对比</span></span><br><span class="line">s = pd.Series(np.random.randint(<span class="number">5</span>, size=(<span class="number">5</span>,)))</span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">5</span>, size=(<span class="number">5</span>,)))</span><br><span class="line">print(s)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>



<h3 id="3、数据读取"><a href="#3、数据读取" class="headerlink" title="3、数据读取"></a>3、数据读取</h3><p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/io.html" target="_blank" rel="noopener">官方参考文档</a></p>
<p>通过调用以<code>pandas.read_</code>为前缀的方法可以读取相应的数据文件，且支持连接数据库。</p>
<p>读取<code>CSV</code>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df: pd.core.frame.DataFrame = pd.read_csv(</span><br><span class="line">    <span class="string">"https://labfile.oss.aliyuncs.com/courses/906/los_census.csv"</span>)</span><br><span class="line">print(type(df))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认输出前5条数据</span></span><br><span class="line">print(df.head())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定显示后7条数据</span></span><br><span class="line">print(df.tail(<span class="number">7</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># describe() 相当于对数据集进行概览，会输出该数据集每一列数据的计数、最大值、最小值等。</span></span><br><span class="line">print(df.describe())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 DataFrame 转换为 NumPy数组</span></span><br><span class="line">print(df.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看索引</span></span><br><span class="line">print(df.index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看列名</span></span><br><span class="line">print(df.columns)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看形状</span></span><br><span class="line">print(df.shape)</span><br></pre></td></tr></table></figure>



<h3 id="4、数据选择"><a href="#4、数据选择" class="headerlink" title="4、数据选择"></a>4、数据选择</h3><p>基于索引数字选择</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df: pd.core.frame.DataFrame = pd.DataFrame(np.random.randint(<span class="number">5</span>, size=(<span class="number">4</span>, <span class="number">5</span>)))</span><br><span class="line"><span class="comment"># print(df)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择第3行</span></span><br><span class="line">print(df.iloc[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择前3行</span></span><br><span class="line">print(df.iloc[:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择 1, 3 行</span></span><br><span class="line">print(df.iloc[[<span class="number">1</span>, <span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择 1-3列</span></span><br><span class="line">print(df.iloc[:, <span class="number">1</span>:<span class="number">4</span>])</span><br></pre></td></tr></table></figure>

<p>基于标签名称选择</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">df = pd.DataFrame(lst, index=[<span class="string">'r1'</span>, <span class="string">'r2'</span>, <span class="string">'r3'</span>], columns=[<span class="string">'c1'</span>, <span class="string">'c2'</span>, <span class="string">'c3'</span>])</span><br><span class="line"><span class="comment"># print(df)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># df.loc[] 与 df.iloc[] 用法相似</span></span><br><span class="line"><span class="comment"># 选择第3行</span></span><br><span class="line">print(df.loc[<span class="string">'r3'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择前3行</span></span><br><span class="line">print(df.loc[:<span class="string">'r3'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择1,3行</span></span><br><span class="line">print(df.loc[[<span class="string">'r1'</span>, <span class="string">'r3'</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(df.loc['r2':'r3', 'c1':'c2'])</span></span><br></pre></td></tr></table></figure>



<h3 id="5、数据删除和填充"><a href="#5、数据删除和填充" class="headerlink" title="5、数据删除和填充"></a>5、数据删除和填充</h3><h4 id="1、数据删除"><a href="#1、数据删除" class="headerlink" title="1、数据删除"></a>1、数据删除</h4><p>Pandas 中，以 <code>.drop</code> 开头的方法都与数据删减有关。</p>
<p><code>DataFrame.drop</code>可以直接去掉数据集中指定的列和行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">df = pd.DataFrame(lst, index=[<span class="string">'r1'</span>, <span class="string">'r2'</span>, <span class="string">'r3'</span>], columns=[<span class="string">'c1'</span>, <span class="string">'c2'</span>, <span class="string">'c3'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># df.drop(labels=[], axis=1, inplace=True)</span></span><br><span class="line"><span class="comment"># labels: 要删除的行或列的标签或索引</span></span><br><span class="line"><span class="comment"># axis: [0,1] 0表示按行删除，1表示按列删除</span></span><br><span class="line"><span class="comment"># inplace: 值为'True'则在原数据上修改，为'False'则返回数据的copy</span></span><br><span class="line">df.drop([<span class="string">'r1'</span>, <span class="string">'r3'</span>], <span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>

<p><code>DataFrame.drop_duplicates</code>可以删除数据中重复的列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = np.random.randint(<span class="number">5</span>, size=(<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">df = pd.DataFrame(lst, index=[<span class="string">'r1'</span>, <span class="string">'r2'</span>, <span class="string">'r3'</span>], columns=[<span class="string">'c1'</span>, <span class="string">'c2'</span>, <span class="string">'c3'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># df.drop_duplicates(subset=None, keep='first, inplace=True)</span></span><br><span class="line"><span class="comment"># subset: 列的标签的一个子集，表示只考虑某些列;None表示考虑所有列</span></span><br><span class="line"><span class="comment"># keep: &#123;'first', 'last', False&#125;</span></span><br><span class="line"><span class="comment">#       'first' 表示保留第一次出现</span></span><br><span class="line"><span class="comment">#       'last' 表示最后一次出现</span></span><br><span class="line"><span class="comment">#       False 表示全都删除</span></span><br><span class="line"><span class="comment"># inplace: 值为'True'则在原数据上修改，为'False'则返回数据的copy</span></span><br><span class="line">df.drop_duplicates(subset=[<span class="string">'c1'</span>, <span class="string">'c3'</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>

<p><code>DataFrame.dropna</code>删除数据集中空缺的数据列或行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">6</span>]]</span><br><span class="line">df = pd.DataFrame(lst, index=[<span class="string">'r1'</span>, <span class="string">'r2'</span>, <span class="string">'r3'</span>], columns=[<span class="string">'c1'</span>, <span class="string">'c2'</span>, <span class="string">'c3'</span>])</span><br><span class="line"><span class="comment"># print(df)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># df.dropna(axis, how='any', thresh=None, subset, inplace)</span></span><br><span class="line"><span class="comment"># axis: [0,1] 0表示按行删除，1表示按列删除</span></span><br><span class="line"><span class="comment"># how: &#123;'any', 'all'&#125; 'any'只要有一个数据为空;'all'需要整行或整列的数据为空</span></span><br><span class="line"><span class="comment"># thresh: int value , 表示保留下来的行或列只是有多少个非空数据</span></span><br><span class="line"><span class="comment"># subset: 列的标签的一个子集，表示只考虑某些列;None表示考虑所有列</span></span><br><span class="line"><span class="comment"># inplace: 值为'True'则在原数据上修改，为'False'则返回数据的copy</span></span><br><span class="line">df.dropna(axis=<span class="number">1</span>, thresh=<span class="number">3</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>



<h4 id="2、数据填充"><a href="#2、数据填充" class="headerlink" title="2、数据填充"></a>2、数据填充</h4><p><code>Pandas</code>的缺失值由<code>NaN</code>和<code>NaT</code>，前者表示‘这不是一个数字’，后者表示‘这不是一个时间戳’。</p>
<h5 id="1、缺失值检测"><a href="#1、缺失值检测" class="headerlink" title="1、缺失值检测"></a>1、缺失值检测</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">6</span>]]</span><br><span class="line">df = pd.DataFrame(lst, index=[<span class="string">'r1'</span>, <span class="string">'r2'</span>, <span class="string">'r3'</span>], columns=[<span class="string">'c1'</span>, <span class="string">'c2'</span>, <span class="string">'c3'</span>])</span><br><span class="line">print(df)</span><br><span class="line"><span class="comment"># df.isna() 返回df中的每个数据是否为空，若为空则值为True</span></span><br><span class="line">print(df.isna())</span><br><span class="line"><span class="comment"># df.notna() 返回df中的每个数据是否为空，若为空则值为False</span></span><br><span class="line">print(df.notna())</span><br></pre></td></tr></table></figure>

<h5 id="2、填充缺失值"><a href="#2、填充缺失值" class="headerlink" title="2、填充缺失值"></a>2、填充缺失值</h5><p>1、使用<code>fillna()</code>进行填充</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">6</span>], [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]</span><br><span class="line">df = pd.DataFrame(lst, index=[<span class="string">'r1'</span>, <span class="string">'r2'</span>, <span class="string">'r3'</span>,</span><br><span class="line">                              <span class="string">'r4'</span>], columns=[<span class="string">'c1'</span>, <span class="string">'c2'</span>, <span class="string">'c3'</span>])</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># df.fillna(value)</span></span><br><span class="line"><span class="comment"># value: 使用value来填充NaN</span></span><br><span class="line">df = df.fillna(value=<span class="number">0</span>)</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># df.fillna(method='pad', asix=0,limit)</span></span><br><span class="line"><span class="comment"># method: &#123;'pad', 'bfill'&#125;填充方法</span></span><br><span class="line"><span class="comment">#           'pad'：使用前面的值进行填充</span></span><br><span class="line"><span class="comment">#           'bfill': 使用后面的值进行填充</span></span><br><span class="line"><span class="comment"># axis: [0,1] 0表示按行删除，1表示按列删除</span></span><br><span class="line"><span class="comment"># limit: 限制连续填充的数量</span></span><br><span class="line">df = df.fillna(method=<span class="string">'pad'</span>, axis=<span class="number">1</span>, limit=<span class="number">1</span>)</span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Series数据填充对应的列</span></span><br><span class="line"><span class="comment"># 使用平均值填充'c1','c2'和'c3'</span></span><br><span class="line">df = df.fillna(df.mean()[<span class="string">'c1'</span>: <span class="string">'c3'</span>])</span><br><span class="line">print(df)</span><br><span class="line"><span class="comment"># 使用平均值填充'c1'和'c3'列</span></span><br><span class="line">df = df.fillna(df.mean()[[<span class="string">'c1'</span>, <span class="string">'c3'</span>]])</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>

<p>2、插值填充</p>
<p>使用<code>interpolate()</code>进行线性插值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">'A'</span>: [<span class="number">1.1</span>, <span class="number">2.2</span>, np.nan, <span class="number">4.5</span>, <span class="number">5.7</span>, <span class="number">6.9</span>],</span><br><span class="line">                   <span class="string">'B'</span>: [<span class="number">.21</span>, np.nan, np.nan, <span class="number">3.1</span>, <span class="number">11.7</span>, <span class="number">13.2</span>]&#125;)</span><br><span class="line">print(df)</span><br><span class="line"><span class="comment"># 线性插值</span></span><br><span class="line">df = df.interpolate()</span><br><span class="line"><span class="comment"># 二次插值</span></span><br><span class="line">df = df.interpolate(method=<span class="string">'quadratic'</span>)</span><br><span class="line"><span class="comment"># 累计分布</span></span><br><span class="line">df = df.interpolate(method=<span class="string">'pchip'</span>)</span><br><span class="line"><span class="comment"># 平滑绘图</span></span><br><span class="line">df = df.interpolate(method=<span class="string">'akima'</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure>



<h3 id="6、数据可视化"><a href="#6、数据可视化" class="headerlink" title="6、数据可视化"></a>6、数据可视化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">'A'</span>: [<span class="number">1.1</span>, <span class="number">2.2</span>, np.nan, <span class="number">4.5</span>, <span class="number">5.7</span>, <span class="number">6.9</span>],</span><br><span class="line">                   <span class="string">'B'</span>: [<span class="number">.21</span>, np.nan, np.nan, <span class="number">3.1</span>, <span class="number">11.7</span>, <span class="number">13.2</span>]&#125;)</span><br><span class="line"><span class="comment"># print(df)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 平滑绘图</span></span><br><span class="line">df = df.interpolate(method=<span class="string">'akima'</span>)</span><br><span class="line"><span class="comment"># 绘制图像</span></span><br><span class="line">df.plot()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>







<h3 id="0、参考"><a href="#0、参考" class="headerlink" title="0、参考"></a>0、参考</h3><p><a href="https://pandas.pydata.org/pandas-docs/stable/index.html" target="_blank" rel="noopener">官网</a></p>
<p><a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文</a></p>
<p><a href="https://www.shiyanlou.com/courses/906/learning/?id=3375" target="_blank" rel="noopener">Pandas 数据处理基础课程</a></p>
]]></content>
      <categories>
        <category>Python Module</category>
      </categories>
      <tags>
        <tag>Python Module</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL安装</title>
    <url>/2020/07/21/MySQL%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h3><p><a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener">官网下载地址</a></p>
<a id="more"></a>

<h3 id="2、解压"><a href="#2、解压" class="headerlink" title="2、解压"></a>2、解压</h3><p>直接解压</p>
<h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><p> 系统—&gt;高级系统设置—&gt;环境变量—&gt;系统变量 </p>
<p>新建环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量名：MYSQL_HOME</span><br><span class="line">变量值：E:\Program-Environment\mysql-8.0.20(文件解压的目录)</span><br></pre></td></tr></table></figure>

<p>编辑 <code>Path</code> 变量，在Path末尾添加 <code>;%MYSQL_HOME%\bin</code></p>
<h3 id="4、配置-my-ini-文件"><a href="#4、配置-my-ini-文件" class="headerlink" title="4、配置 my.ini 文件"></a>4、配置 <code>my.ini</code> 文件</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment">#端口号</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="comment">#mysql的路径</span></span><br><span class="line"><span class="attr">basedir</span>=E:\Program-Environment\mysql-<span class="number">8.0</span>.<span class="number">20</span></span><br><span class="line"><span class="comment">#mysql的路径+\data</span></span><br><span class="line"><span class="attr">datadir</span>=E:\Program-Environment\mysql-<span class="number">8.0</span>.<span class="number">20</span>\data </span><br><span class="line"><span class="comment">#最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment">#编码</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"></span><br><span class="line"><span class="attr">sql_mode</span>=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment">#编码</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure>



<h3 id="5、安装"><a href="#5、安装" class="headerlink" title="5、安装"></a>5、安装</h3><p>以管理员的身份运行 <code>cmd</code></p>
<p>切换到 <code>mysql</code> 目录的 <code>bin</code> 文件夹下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; cd E:\Program-Environment\mysql-8.0.20\bin</span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; mysqld -install</span><br></pre></td></tr></table></figure>

<p>初始化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; mysqld --initialize</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; net start mysql</span><br></pre></td></tr></table></figure>



<h3 id="6、设置MySQL密码"><a href="#6、设置MySQL密码" class="headerlink" title="6、设置MySQL密码"></a>6、设置<code>MySQL</code>密码</h3><ul>
<li><p>查看默认密码</p>
<blockquote>
<p>打开 <code>E:\Program-Environment\mysql-8.0.20\data</code> 目录下的<code>.err</code>文件，找到类似这样的一行。例如，下面密码就是 <code>ke,ak(M7;Jl:</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A temporary password is generated for root@localhost: ke,ak(M7;Jl:</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>登录<code>MySQL</code></p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; mysql -u root -p</span><br><span class="line">Enter password: 输入刚才找到的默认密码</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>修改密码</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;新密码&#39;;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<h3 id="7、可视化工具Navicat"><a href="#7、可视化工具Navicat" class="headerlink" title="7、可视化工具Navicat"></a>7、可视化工具<code>Navicat</code></h3><p><a href="https://www.navicat.com.cn/download/navicat-for-mysql" target="_blank" rel="noopener">官网下载</a></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫入门</title>
    <url>/2020/03/15/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="1、Requests"><a href="#1、Requests" class="headerlink" title="1、Requests"></a>1、Requests</h3><h4 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="2、发送请求"><a href="#2、发送请求" class="headerlink" title="2、发送请求"></a>2、发送请求</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line"><span class="comment"># GET 方法</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># POST 方法</span></span><br><span class="line">response = requests.post(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># DELETE 方法</span></span><br><span class="line">response = requests.delete(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># PATCH 方法</span></span><br><span class="line">response = requests.patch(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># PUT 方法</span></span><br><span class="line">response = requests.put(url)</span><br></pre></td></tr></table></figure>



<h4 id="3、传递URL参数"><a href="#3、传递URL参数" class="headerlink" title="3、传递URL参数"></a>3、传递<code>URL</code>参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">params = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</span><br><span class="line">response = requests.get(url, params=params)</span><br><span class="line">print(response.url)</span><br></pre></td></tr></table></figure>



<h4 id="4、响应内容"><a href="#4、响应内容" class="headerlink" title="4、响应内容"></a>4、响应内容</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 响应内容(默认Unicode编码)</span></span><br><span class="line">print(response.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改编码</span></span><br><span class="line">response.encoding = <span class="string">'utf-8'</span></span><br><span class="line">print(response.encoding)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二进制响应内容</span></span><br><span class="line">print(response.content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Json 响应内容</span></span><br><span class="line">print(response.json())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 status code</span></span><br><span class="line">print(response.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 headers</span></span><br><span class="line">print(response.headers)</span><br><span class="line">print(response.headers[<span class="string">'Content-Type'</span>])</span><br><span class="line">print(response.headers.get(<span class="string">'Content-Type'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 cookies</span></span><br><span class="line">print(response.cookies)</span><br></pre></td></tr></table></figure>



<h4 id="5、自定义请求头和Cookie"><a href="#5、自定义请求头和Cookie" class="headerlink" title="5、自定义请求头和Cookie"></a>5、自定义请求头和Cookie</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-agent'</span>: <span class="string">'my-app/0.0.1'</span>,</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'cookies'</span></span><br><span class="line">&#125;</span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">'cookies_are'</span>: <span class="string">'working'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url, headers=headers, cookies=cookies)</span><br></pre></td></tr></table></figure>



<h4 id="6、重定向和超时"><a href="#6、重定向和超时" class="headerlink" title="6、重定向和超时"></a>6、重定向和超时</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line"><span class="comment"># allow_redirects 为重定向参数,当为False时不会自动重定向</span></span><br><span class="line">response = requests.get(url, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">print(response.url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># timeout 为超时参数，当超时后会抛出异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(url, timeout=<span class="number">0.01</span>)</span><br><span class="line">    print(response.url)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">    <span class="comment"># print(error)</span></span><br><span class="line">    print(<span class="string">'请求超时'</span>)</span><br></pre></td></tr></table></figure>



<h4 id="7、携带数据的POST请求"><a href="#7、携带数据的POST请求" class="headerlink" title="7、携带数据的POST请求"></a>7、携带数据的<code>POST</code>请求</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'key1'</span>: <span class="string">'value1'</span>,</span><br><span class="line">    <span class="string">'key2'</span>: <span class="string">'value2'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url, data=data)</span><br></pre></td></tr></table></figure>



<h4 id="8、下载文件"><a href="#8、下载文件" class="headerlink" title="8、下载文件"></a>8、下载文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载百度logo图片</span></span><br><span class="line">response = requests.get(<span class="string">'https://www.baidu.com/img/bd_logo1.png'</span>)</span><br><span class="line">filename = <span class="string">'bd_logo1.png'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    file = open(<span class="string">'./Others/'</span> + filename, <span class="string">'ab'</span>)</span><br><span class="line">    file.write(response.content)</span><br><span class="line">    file.close()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">    print(str(error))</span><br></pre></td></tr></table></figure>







<h3 id="2、BeautifulSoup"><a href="#2、BeautifulSoup" class="headerlink" title="2、BeautifulSoup"></a>2、BeautifulSoup</h3><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">参考文档</a></p>
<h4 id="1、安装-1"><a href="#1、安装-1" class="headerlink" title="1、安装"></a>1、安装</h4><p>1、安装库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip安装</span></span><br><span class="line">pip install beautifulsoup4</span><br><span class="line"><span class="comment"># apt-get安装</span></span><br><span class="line">sudo apt-get install Python-bs4</span><br></pre></td></tr></table></figure>

<p>2、安装解析器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip安装</span></span><br><span class="line">pip install lxml</span><br><span class="line">pip install html5lib</span><br><span class="line"><span class="comment"># apt-get安装</span></span><br><span class="line">sudo apt-get install Python-lxml</span><br><span class="line">sudo apt-get install Python-html5lib</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/15/Python%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/%E5%AE%89%E8%A3%85%E8%A7%A3%E6%9E%90%E5%99%A8.png" alt="安装解析器"></p>
<h4 id="2、创建一个BeautifulSoup对象"><a href="#2、创建一个BeautifulSoup对象" class="headerlink" title="2、创建一个BeautifulSoup对象"></a>2、创建一个<code>BeautifulSoup</code>对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html_doc = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="comment"># 修改编码</span></span><br><span class="line">soup.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTML 格式化输出</span></span><br><span class="line">print(soup.prettify())</span><br></pre></td></tr></table></figure>



<h4 id="3、获取网页中的元素"><a href="#3、获取网页中的元素" class="headerlink" title="3、获取网页中的元素"></a>3、获取网页中的元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html_doc = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="comment"># 通过标签名称来获取元素</span></span><br><span class="line">print(soup.find_all(name=<span class="string">'title'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 id 来获取元素</span></span><br><span class="line">print(soup.find_all(id=<span class="string">'link2'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 css 来获取元素</span></span><br><span class="line">print(soup.find_all(class_=<span class="string">'title'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过属性来获取元素</span></span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">'class'</span>: <span class="string">'sister'</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 css selector 来获取元素</span></span><br><span class="line">print(soup.select(<span class="string">'title'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过是否存在某个属性值来查找</span></span><br><span class="line">print(soup.select(<span class="string">'a[href]'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过属性的值来查找</span></span><br><span class="line">print(soup.select(<span class="string">'a[href="http://example.com/elsie"]'</span>))</span><br><span class="line">print(soup.select(<span class="string">'a[href^="http://example.com/"]'</span>))</span><br><span class="line">print(soup.select(<span class="string">'a[href$="tillie"]'</span>))</span><br><span class="line">print(soup.select(<span class="string">'a[href*=".com/el"]'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过元素自定义属性来查找</span></span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">"attr"</span>: <span class="string">"value"</span>&#125;))</span><br></pre></td></tr></table></figure>



<h4 id="4、获取元素内容"><a href="#4、获取元素内容" class="headerlink" title="4、获取元素内容"></a>4、获取元素内容</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html_doc = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="comment"># 获取指定元素</span></span><br><span class="line">tag = soup.find(id=<span class="string">'link1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印整个标签</span></span><br><span class="line">print(tag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签名称</span></span><br><span class="line">print(tag.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签中指定属性的值</span></span><br><span class="line">print(tag[<span class="string">'href'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签中所有文字内容</span></span><br><span class="line">print(tag.get_text())</span><br></pre></td></tr></table></figure>



<h3 id="3、Selenium"><a href="#3、Selenium" class="headerlink" title="3、Selenium"></a>3、Selenium</h3><p><code>selenium</code>主要是用来做自动化测试，支持多种浏览器，爬虫中主要用来解决<code>JavaScript</code>渲染问题。</p>
<h4 id="1、安装-2"><a href="#1、安装-2" class="headerlink" title="1、安装"></a>1、安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip安装</span></span><br><span class="line">pip install selenium</span><br><span class="line"><span class="comment"># apt-get安装</span></span><br><span class="line">sudo apt-get install Python-selenium</span><br></pre></td></tr></table></figure>



<h4 id="2、调用浏览器"><a href="#2、调用浏览器" class="headerlink" title="2、调用浏览器"></a>2、调用浏览器</h4><h5 id="1、Firefox浏览器"><a href="#1、Firefox浏览器" class="headerlink" title="1、Firefox浏览器"></a>1、Firefox浏览器</h5><p>下载驱动</p>
<p> <a href="./geckodriver-v0.26.0-linux64.tar.gz">geckdriver</a> </p>
<div class="tabs" id="install_geckdriver"><ul class="nav-tabs"><li class="tab active"><a href="#install_geckdriver-1">Windows</a></li><li class="tab"><a href="#install_geckdriver-2">Linux</a></li></ul><div class="tab-content"><div class="tab-pane active" id="install_geckdriver-1"><p>将下载的文件解压得到<code>geckodriver</code> ，将<code>geckdriver</code> 放到Python的安装路径即可(任意有换件变量的路径就行)</p></div><div class="tab-pane" id="install_geckdriver-2"><p>将下载的文件解压得到<code>geckodriver</code>，将<code>geckdriver</code>复制到<code>/usr/local/bin</code> 并修改权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp geckodriver /usr/<span class="built_in">local</span>/bin</span><br><span class="line">sudo chmod 777 /usr/<span class="built_in">local</span>/bin/geckodriver</span><br></pre></td></tr></table></figure></div></div></div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line"><span class="comment"># 设置浏览器属性，无窗口化后台运行</span></span><br><span class="line">options = webdriver.FirefoxOptions()</span><br><span class="line">options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line"><span class="comment"># 打开浏览器</span></span><br><span class="line"><span class="comment"># browser = webdriver.Firefox()</span></span><br><span class="line">browser = webdriver.Firefox(firefox_options=options)</span><br><span class="line"><span class="comment"># 访问网页</span></span><br><span class="line">browser.get(url)</span><br><span class="line"><span class="comment"># 休眠2两秒</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 退出浏览器</span></span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure>



<h5 id="2、Chrome浏览器"><a href="#2、Chrome浏览器" class="headerlink" title="2、Chrome浏览器"></a>2、Chrome浏览器</h5><p><a href="http://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">驱动下载地址</a></p>
<div>
    Chrome版本号：
<select onchange="select_change()" id="ver_map">
    <option vchrome="version >= 70" vdriver="到下载地址下载对应版本">version >= 70</option>
    <option vchrome="v60-62" vdriver="v2.33">v60-62</option>
    <option vchrome="v59-61" vdriver="v2.32">v59-61</option>
    <option vchrome="v58-60" vdriver="v2.31">v58-60</option>
    <option vchrome="v58-60" vdriver="v2.30">v58-60</option>
    <option vchrome="v56-58" vdriver="v2.29">v56-58</option>
    <option vchrome="v55-57" vdriver="v2.28">v55-57</option>
    <option vchrome="v54-56" vdriver="v2.27">v54-56</option>
    <option vchrome="v53-55" vdriver="v2.26">v53-55</option>
    <option vchrome="v53-55" vdriver="v2.25">v53-55</option>
    <option vchrome="v52-54" vdriver="v2.24">v52-54</option>
    <option vchrome="v51-53" vdriver="v2.23">v51-53</option>
    <option vchrome="v49-52" vdriver="v2.22">v49-52</option>
    <option vchrome="v46-50" vdriver="v2.21">v46-50</option>
    <option vchrome="v43-48" vdriver="v2.20">v43-48</option>
    <option vchrome="v43-47" vdriver="v2.19">v43-47</option>
    <option vchrome="v43-46" vdriver="v2.18">v43-46</option>
    <option vchrome="v42-43" vdriver="v2.17">v42-43</option>
    <option vchrome="v42-45" vdriver="v2.13">v42-45</option>
    <option vchrome="v40-43" vdriver="v2.15">v40-43</option>
    <option vchrome="v39-42" vdriver="v2.14">v39-42</option>
    <option vchrome="v38-41" vdriver="v2.13">v38-41</option>
    <option vchrome="v36-40" vdriver="v2.12">v36-40</option>
    <option vchrome="v36-40" vdriver="v2.11">v36-40</option>
    <option vchrome="v33-36" vdriver="v2.10">v33-36</option>
    <option vchrome="v31-34" vdriver="v2.9">v31-34</option>
    <option vchrome="v30-33" vdriver="v2.8">v30-33</option>
    <option vchrome="v30-33" vdriver="v2.7">v30-33</option>
    <option vchrome="v29-32" vdriver="v2.6">v29-32</option>
    <option vchrome="v29-32" vdriver="v2.5">v29-32</option>
    <option vchrome="v29-3" vdriver="v2.4">v29-3</option> 
</select>
驱动版本号：
<code id="content">到下载地址下载对应版本</code>
<script>
    function select_change(){
        var select = document.getElementById("ver_map");
        var index = select.selectedIndex;
        var option = select.options[index];
        var vchrome = option.getAttribute("vchrome");
        var vdriver = option.getAttribute("vdriver")
        var content = document.getElementById("content");
        content.innerText=vdriver
        console.log("value:"+value+",version:"+version);
    }
</script>
</div>
<div class="tabs" id="install_chromedriver"><ul class="nav-tabs"><li class="tab active"><a href="#install_chromedriver-1">Windows</a></li><li class="tab"><a href="#install_chromedriver-2">Linux</a></li></ul><div class="tab-content"><div class="tab-pane active" id="install_chromedriver-1"><p>将下载的文件解压得到<code>geckodriver</code> ，将<code>geckdriver</code> 放到Python的安装路径即可(任意有换件变量的路径就行)</p></div><div class="tab-pane" id="install_chromedriver-2"><p>将下载的文件解压得到<code>chromedriver</code>，将<code>chromedriver</code>复制到<code>/usr/local/bin</code> 并修改权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp chromedriver /usr/<span class="built_in">local</span>/bin</span><br><span class="line">sudo chmod 777 /usr/<span class="built_in">local</span>/bin/chromedriver</span><br><span class="line"><span class="comment"># 或者直接用 apt-get 安装</span></span><br><span class="line">sudo apt-get install chromium-chromedriver</span><br></pre></td></tr></table></figure></div></div></div>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line"><span class="comment"># 设置浏览器属性，无窗口化后台运行</span></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line"><span class="comment"># 打开浏览器</span></span><br><span class="line">browser = webdriver.Chrome(chrome_options=options)</span><br><span class="line"><span class="comment"># 访问网页</span></span><br><span class="line">browser.get(url)</span><br><span class="line"><span class="comment"># 休眠2两秒</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 退出浏览器</span></span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure>



<h4 id="3、webdriver常用操作"><a href="#3、webdriver常用操作" class="headerlink" title="3、webdriver常用操作"></a>3、<code>webdriver</code>常用操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line"><span class="comment"># 在当前浏览器会话中访问传入的url地址</span></span><br><span class="line">browser.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新当前页面</span></span><br><span class="line">browser.refresh()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 JavaScript 语句</span></span><br><span class="line">browser.execute_script(<span class="string">'js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待渲染(等待10秒)</span></span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前页面的url</span></span><br><span class="line">browser.current_url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前页的标题</span></span><br><span class="line">browser.title</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前页渲染后的源代码</span></span><br><span class="line">browser.page_source</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前会话中所有窗口的句柄</span></span><br><span class="line">browser.window_handles</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭浏览器当前窗口</span></span><br><span class="line">browser.close()</span><br><span class="line"><span class="comment"># 退出webdriver并关闭所有窗口</span></span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure>



<h4 id="4、获取网页元素"><a href="#4、获取网页元素" class="headerlink" title="4、获取网页元素"></a>4、获取网页元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取单个元素</span></span><br><span class="line">element = browser.find_element_by_id(<span class="string">'id'</span>)</span><br><span class="line">element = browser.find_element_by_name(<span class="string">'name'</span>)</span><br><span class="line">element = browser.find_element_by_xpath(<span class="string">'xpath'</span>)</span><br><span class="line">element = browser.find_element_by_link_text(<span class="string">'link text'</span>)</span><br><span class="line">element = browser.find_element_by_tag_name(<span class="string">'tag name'</span>)</span><br><span class="line">element = browser.find_element_by_class_name(<span class="string">'class name'</span>)</span><br><span class="line">element = browser.find_element_by_css_selector(<span class="string">'css selector'</span>)</span><br><span class="line">element = browser.find_element_by_partial_link_text(<span class="string">'partial link text'</span>)</span><br><span class="line"><span class="comment"># 获取多个元素</span></span><br><span class="line">elements = browser.find_elements_by_id(<span class="string">'id'</span>)</span><br><span class="line">elements = browser.find_elements_by_name(<span class="string">'name'</span>)</span><br><span class="line">elements = browser.find_elements_by_xpath(<span class="string">'xpath'</span>)</span><br><span class="line">elements = browser.find_elements_by_link_text(<span class="string">'link text'</span>)</span><br><span class="line">elements = browser.find_elements_by_tag_name(<span class="string">'tag name'</span>)</span><br><span class="line">elements = browser.find_elements_by_class_name(<span class="string">'class name'</span>)</span><br><span class="line">elements = browser.find_elements_by_css_selector(<span class="string">'css selector'</span>)</span><br><span class="line">elements = browser.find_elements_by_partial_link_text(<span class="string">'partial link text'</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">find_element_by_id()</td>
<td align="left">通过id查找</td>
</tr>
<tr>
<td align="left">find_element_by_name()</td>
<td align="left">通过name属性进行查找</td>
</tr>
<tr>
<td align="left">find_element_by_xpath()</td>
<td align="left">通过Xpath查找</td>
</tr>
<tr>
<td align="left">find_element_by_link_text()</td>
<td align="left">通过链接文本查找</td>
</tr>
<tr>
<td align="left">find_element_by_tag_name()</td>
<td align="left">通过标签名查找</td>
</tr>
<tr>
<td align="left">find_element_by_class_name()</td>
<td align="left">通过class属性查找</td>
</tr>
<tr>
<td align="left">find_element_by_css_selector()</td>
<td align="left">通过css选择器查找</td>
</tr>
<tr>
<td align="left">find_element_by_partial_link_text()</td>
<td align="left">通过链接文本的部分匹配查找</td>
</tr>
</tbody></table>
<h4 id="5、Webelement常用方法和属性"><a href="#5、Webelement常用方法和属性" class="headerlink" title="5、Webelement常用方法和属性"></a>5、<code>Webelement</code>常用方法和属性</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常用方法</span></span><br><span class="line"><span class="comment"># 清空对象中的内容</span></span><br><span class="line">element.clear()</span><br><span class="line"><span class="comment"># 给对象元素输入数据</span></span><br><span class="line">element.send_keys(<span class="string">'value'</span>)</span><br><span class="line"><span class="comment"># 单击对象</span></span><br><span class="line">element.click()</span><br><span class="line"><span class="comment"># 提交表单</span></span><br><span class="line">element.submit()</span><br><span class="line"><span class="comment"># 优先返回完全匹配属性名的值，如果不存在，则返回属性名中包含name的值</span></span><br><span class="line">element.get_attribute(<span class="string">'name'</span>)</span><br><span class="line"><span class="comment"># 获取当前元素的截图，保存为png</span></span><br><span class="line">element.screenshot(<span class="string">'filename'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用属性</span></span><br><span class="line"><span class="comment"># 获取当前元素的文本内容</span></span><br><span class="line">element.text</span><br><span class="line"><span class="comment"># 获取当前元素的标签名</span></span><br><span class="line">element.tag_name</span><br><span class="line"><span class="comment"># 当前元素的id值</span></span><br><span class="line">element.id</span><br><span class="line"><span class="comment"># 当前元素的位置</span></span><br><span class="line">element.location</span><br><span class="line"><span class="comment"># 获取当前元素的大小</span></span><br><span class="line">element.size</span><br><span class="line"><span class="comment"># 获取一个包含当前元素大小和位置的字典</span></span><br><span class="line">element.rect</span><br><span class="line"><span class="comment"># 获取当前元素的父节点</span></span><br><span class="line">element.parent</span><br><span class="line"><span class="comment"># 将当前元素截屏并保存为png格式的二进制数据</span></span><br><span class="line">element.screenshot_as_png</span><br><span class="line"><span class="comment"># 将当前元素截屏并保存为base64编码的字符串</span></span><br><span class="line">element.screenshot_as_base64</span><br></pre></td></tr></table></figure>















<h3 id="1、爬虫练习网站"><a href="#1、爬虫练习网站" class="headerlink" title="-1、爬虫练习网站"></a>-1、爬虫练习网站</h3><h4 id="1、HTTP请求练习"><a href="#1、HTTP请求练习" class="headerlink" title="1、HTTP请求练习"></a>1、<code>HTTP</code>请求练习</h4><p><a href="http://httpbin.org/" target="_blank" rel="noopener">httpbin</a></p>
<p>因为<code>httpbin</code>服务器在国外，所以非常慢，可以使用<code>docker</code>在本地运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -p 80:80 kennethreitz/httpbin</span><br></pre></td></tr></table></figure>



<h3 id="0、参考"><a href="#0、参考" class="headerlink" title="0、参考"></a>0、参考</h3><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">Beautiful Soup 4.2.0 文档</a></p>
<p><a href="https://selenium-python-zh.readthedocs.io/en/latest/" target="_blank" rel="noopener">Selenium with Python中文翻译文档</a></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora 个性化设置</title>
    <url>/2020/01/21/Typora%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="1、通用"><a href="#1、通用" class="headerlink" title="1、通用"></a>1、通用</h4><h5 id="保存-amp-恢复"><a href="#保存-amp-恢复" class="headerlink" title="保存&amp;恢复"></a>保存&amp;恢复</h5><ul>
<li><input checked disabled type="checkbox"> 切换文件时自动保存对上个文件的更改</li>
</ul>
<h4 id="2、外观"><a href="#2、外观" class="headerlink" title="2、外观"></a>2、外观</h4><h5 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h5><p>自定义 16px</p>
<h5 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h5><ul>
<li><input checked disabled type="checkbox"> 像是显示状态栏</li>
</ul>
<h5 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h5><ul>
<li><input checked disabled type="checkbox"> 侧边栏的大纲视图允许折叠和展开</li>
</ul>
<h5 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h5><p>默认Github主题</p>
<a id="more"></a>

<h4 id="3、编辑器"><a href="#3、编辑器" class="headerlink" title="3、编辑器"></a>3、编辑器</h4><h5 id="默认缩进"><a href="#默认缩进" class="headerlink" title="默认缩进"></a>默认缩进</h5><ul>
<li><input checked disabled type="checkbox"> 对齐缩进</li>
</ul>
<h5 id="使用成对的符号"><a href="#使用成对的符号" class="headerlink" title="使用成对的符号"></a>使用成对的符号</h5><ul>
<li><input checked disabled type="checkbox"> 匹配 Markdown 字符</li>
</ul>
<h5 id="即时渲染"><a href="#即时渲染" class="headerlink" title="即时渲染"></a>即时渲染</h5><ul>
<li><input checked disabled type="checkbox"> 显示当前块元素的 Markdown 源码 （支持标题等块元素）</li>
</ul>
<h5 id="拼写检查"><a href="#拼写检查" class="headerlink" title="拼写检查"></a>拼写检查</h5><p>不使用拼写检查</p>
<h4 id="4、图像"><a href="#4、图像" class="headerlink" title="4、图像"></a>4、图像</h4><h5 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h5><p>复制图片到指定路径 <code>./${filename}</code></p>
<ul>
<li><input checked disabled type="checkbox"> 对本地位置的图片应用上述规则</li>
<li><input checked disabled type="checkbox"> 对网络位置的图片应用上述规则</li>
<li><input checked disabled type="checkbox"> 优先使用相对路径</li>
<li><input checked disabled type="checkbox"> 插入时自动转义图片URL</li>
</ul>
<h4 id="5、Markdown"><a href="#5、Markdown" class="headerlink" title="5、Markdown"></a>5、Markdown</h4><h5 id="Markdown-扩展语法"><a href="#Markdown-扩展语法" class="headerlink" title="Markdown 扩展语法"></a>Markdown 扩展语法</h5><ul>
<li><input checked disabled type="checkbox"> 内联公式</li>
<li><input checked disabled type="checkbox"> 高亮</li>
</ul>
<h5 id="智能标点"><a href="#智能标点" class="headerlink" title="智能标点"></a>智能标点</h5><ul>
<li><input checked disabled type="checkbox"> 智能破折号</li>
<li><input checked disabled type="checkbox"> 智能引号</li>
</ul>
<h5 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h5><ul>
<li><input checked disabled type="checkbox"> 显示行号</li>
</ul>
]]></content>
      <categories>
        <category>Typora</category>
      </categories>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>Python相关知识</title>
    <url>/2019/04/21/Python%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="1、文件读写"><a href="#1、文件读写" class="headerlink" title="1、文件读写"></a>1、文件读写</h3><h4 id="1、打开文件"><a href="#1、打开文件" class="headerlink" title="1、打开文件"></a>1、打开文件</h4><p>使用<code>open()</code>函数来进行文件的读写，调用<code>close()</code>来关闭文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = open(file, mode=<span class="string">'r'</span>, buffering=<span class="number">-1</span>, encoding=<span class="literal">None</span>,</span><br><span class="line">            errors=<span class="literal">None</span>, newline=<span class="literal">None</span>, closefd=<span class="literal">True</span>, opener=<span class="literal">None</span>)</span><br><span class="line"><span class="comment"># file 为要打开文件的文件的路径，相对路径或绝对路径都可以</span></span><br><span class="line"><span class="comment"># mode 为打开模式，默认为只读</span></span><br><span class="line"><span class="comment"># encoding 为编码格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>

<p>打开模式：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>意义</th>
</tr>
</thead>
<tbody><tr>
<td><code>&#39;r&#39;</code></td>
<td>读取（默认）</td>
</tr>
<tr>
<td><code>&#39;w&#39;</code></td>
<td>写入，并先截断文件</td>
</tr>
<tr>
<td><code>&#39;x&#39;</code></td>
<td>排它性创建，如果文件已存在则失败</td>
</tr>
<tr>
<td><code>&#39;a&#39;</code></td>
<td>写入，如果文件存在则在末尾追加</td>
</tr>
<tr>
<td><code>&#39;b&#39;</code></td>
<td>二进制模式</td>
</tr>
<tr>
<td><code>&#39;t&#39;</code></td>
<td>文本模式（默认）</td>
</tr>
<tr>
<td><code>&#39;+&#39;</code></td>
<td>更新磁盘文件（读取并写入）</td>
</tr>
</tbody></table>
<a id="more"></a>

<h4 id="2、普通文件读写"><a href="#2、普通文件读写" class="headerlink" title="2、普通文件读写"></a>2、普通文件读写</h4><h5 id="1、文件读取"><a href="#1、文件读取" class="headerlink" title="1、文件读取"></a>1、文件读取</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = open(<span class="string">'./Others/sample.txt'</span>)</span><br><span class="line"><span class="comment"># read() 会一次性读取文件中的所有内容，下次在读取时会返回为空</span></span><br><span class="line">content = file.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># readline() 只会读取一行的内容</span></span><br><span class="line">content = file.readline()</span><br><span class="line"></span><br><span class="line"><span class="comment"># readlines() 会读取所有内容储存在一个列表中，每行的内容作为一个元素</span></span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用for循环遍历文件的每一行(每一行会带着换行符)</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> open(<span class="string">'./Others/sample.txt'</span>):</span><br><span class="line">    print(line, end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>

<h5 id="2、文件写入"><a href="#2、文件写入" class="headerlink" title="2、文件写入"></a>2、文件写入</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file = open(<span class="string">'./Others/sample.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="comment"># write() 写入不会自动换行</span></span><br><span class="line">file.write(<span class="string">'98765\n'</span>)</span><br><span class="line">file.write(<span class="string">'43210\n'</span>)</span><br><span class="line"><span class="comment"># writelines()</span></span><br><span class="line">file.writelines([<span class="string">'01234\n'</span>, <span class="string">'56789\n'</span>])</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure>

<h4 id="3、CSV文件读写"><a href="#3、CSV文件读写" class="headerlink" title="3、CSV文件读写"></a>3、CSV文件读写</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csv_read</span><span class="params">()</span>:</span></span><br><span class="line">    csvfile = open(<span class="string">'./Others/tmp.csv'</span>, <span class="string">'r'</span>)</span><br><span class="line">    reader = csv.reader(csvfile)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        print(row)</span><br><span class="line">    csvfile.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">csv_write</span><span class="params">()</span>:</span></span><br><span class="line">    csvfile = open(<span class="string">'./Others/tmp.csv'</span>, <span class="string">'w'</span>)</span><br><span class="line">    writer = csv.writer(csvfile)</span><br><span class="line">    writer.writerow([<span class="string">'title'</span>, <span class="string">'url'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'6'</span>, <span class="string">'7'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'8'</span>, <span class="string">'9'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'0'</span>, <span class="string">'0'</span>])</span><br><span class="line">    csvfile.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    csv_read()</span><br><span class="line">    csv_write()</span><br></pre></td></tr></table></figure>

<h4 id="4、Json文件读写"><a href="#4、Json文件读写" class="headerlink" title="4、Json文件读写"></a>4、Json文件读写</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">with</span> open(cur_path + <span class="string">'tmp.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="string">'''Json文件写入'''</span></span><br><span class="line">    json.dump(numbers, file)</span><br><span class="line"><span class="keyword">with</span> open(cur_path + <span class="string">'tmp.json'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="string">'''Json文件读入'''</span></span><br><span class="line">    numbers = json.load(file)</span><br><span class="line">    print(numbers)</span><br></pre></td></tr></table></figure>

<h4 id="5、Excel文件读写"><a href="#5、Excel文件读写" class="headerlink" title="5、Excel文件读写"></a>5、Excel文件读写</h4><h5 id="1、安装模块"><a href="#1、安装模块" class="headerlink" title="1、安装模块"></a>1、安装模块</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install xlrd xlwt</span><br></pre></td></tr></table></figure>

<h5 id="2、Excel文件读取"><a href="#2、Excel文件读取" class="headerlink" title="2、Excel文件读取"></a>2、Excel文件读取</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 打开excel</span></span><br><span class="line">    readbook = xlrd.open_workbook(cur_path+<span class="string">'tmp.xlsx'</span>)</span><br><span class="line">    <span class="comment"># 读取文件sheet</span></span><br><span class="line">    sheet: xlrd.sheet.Sheet</span><br><span class="line">    sheet = readbook.sheet_by_index(<span class="number">2</span>)  <span class="comment"># 通过索引，索引从0开始</span></span><br><span class="line">    sheet = readbook.sheet_by_name(<span class="string">'Sheet1'</span>)  <span class="comment"># 通过名称，区分大小写</span></span><br><span class="line">    <span class="comment"># 获取sheet的最大行数和列数</span></span><br><span class="line">    nrows = sheet.nrows</span><br><span class="line">    ncols = sheet.ncols</span><br><span class="line">    print(nrows, ncols)</span><br><span class="line">    <span class="comment"># 获取某个单元格的值</span></span><br><span class="line">    value = sheet.cell(<span class="number">0</span>, <span class="number">0</span>).value</span><br><span class="line">    print(value)</span><br><span class="line">    <span class="comment"># 获取某一列</span></span><br><span class="line">    row = sheet.row(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 获取某一行</span></span><br><span class="line">    col = sheet.col(<span class="number">0</span>)</span><br><span class="line">    print(row)</span><br><span class="line">    print(col)</span><br></pre></td></tr></table></figure>

<h5 id="3、Excel文件写入"><a href="#3、Excel文件写入" class="headerlink" title="3、Excel文件写入"></a>3、Excel文件写入</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 打开一个excel</span></span><br><span class="line">    writebook = xlwt.Workbook()</span><br><span class="line">    <span class="comment"># 添加一个sheet</span></span><br><span class="line">    sheet: xlwt.Worksheet</span><br><span class="line">    sheet = writebook.add_sheet(<span class="string">'Sheet1'</span>)</span><br><span class="line">    <span class="comment"># 将数据写入单元格</span></span><br><span class="line">    value = <span class="string">'test'</span></span><br><span class="line">    <span class="comment"># 将数据写入第0行0列的单元格</span></span><br><span class="line">    sheet.write(<span class="number">0</span>, <span class="number">0</span>, value)</span><br><span class="line">    <span class="comment"># 保存</span></span><br><span class="line">    writebook.save(cur_path+<span class="string">'tmp_1.xlsx'</span>)</span><br></pre></td></tr></table></figure>







<h3 id="2、函数"><a href="#2、函数" class="headerlink" title="2、函数"></a>2、函数</h3><h4 id="1、传递任意数量的实参"><a href="#1、传递任意数量的实参" class="headerlink" title="1、传递任意数量的实参"></a>1、传递任意数量的实参</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 概述要制作的披萨</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(size, *toppings)</span>:</span></span><br><span class="line">    <span class="string">'''多个实参传进来会封装成一个元组'''</span></span><br><span class="line">    print(<span class="string">"Making a %d-inch pizza with the following toppings:"</span> % size)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        print(<span class="string">'- '</span> + topping)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    make_pizza(<span class="number">16</span>, <span class="string">'pepperoni'</span>)</span><br><span class="line">    make_pizza(<span class="number">12</span>, <span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure>



<h4 id="2、使用任意数量的关键字实参"><a href="#2、使用任意数量的关键字实参" class="headerlink" title="2、使用任意数量的关键字实参"></a>2、使用任意数量的关键字实参</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户信息字典</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_profile</span><span class="params">(first, last, **user_info)</span>:</span></span><br><span class="line">    <span class="string">'''多个实参传进来会封装成一个元组'''</span></span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[<span class="string">'first_name'</span>] = first</span><br><span class="line">    profile[<span class="string">'last_name'</span>] = last</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    user_profile = build_profile(</span><br><span class="line">        <span class="string">'albert'</span>, <span class="string">'einstein'</span>, location=<span class="string">'princeton'</span>, field=<span class="string">'physics'</span>)</span><br><span class="line">    print(user_profile)</span><br></pre></td></tr></table></figure>





<h3 id="3、类"><a href="#3、类" class="headerlink" title="3、类"></a>3、类</h3><h4 id="1、定义类"><a href="#1、定义类" class="headerlink" title="1、定义类"></a>1、定义类</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 初始化方法，当类被实例化时会自动调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=None)</span>:</span></span><br><span class="line">        self.name = <span class="string">'null'</span></span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setName</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化</span></span><br><span class="line">tmp = Myclass(<span class="string">'Tom'</span>)</span><br><span class="line"><span class="comment"># 调用类的方法</span></span><br><span class="line">tmp.setName(<span class="string">'Jack'</span>)</span><br><span class="line">tmp.getName()</span><br></pre></td></tr></table></figure>



<h4 id="2、继承"><a href="#2、继承" class="headerlink" title="2、继承"></a>2、继承</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_details</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, branch, year)</span>:</span></span><br><span class="line">        Person.__init__(self, name)</span><br><span class="line">        self.branch = branch</span><br><span class="line">        self.year = year</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写父类中的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_details</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123;&#125; studies &#123;&#125; and is in &#123;&#125; year."</span>.format(self.name, self.branch, self.year)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, papers)</span>:</span></span><br><span class="line">        Person.__init__(self, name)</span><br><span class="line">        self.papers = papers</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写父类中的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_details</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123;&#125; teachers &#123;&#125;."</span>.format(self.name, <span class="string">','</span>.join(self.papers))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Student 和 Teachers 均继承了 Person</span></span><br><span class="line">per = Person(<span class="string">'Sachin'</span>)</span><br><span class="line">stu = Student(<span class="string">'Kushal'</span>, <span class="string">'CSE'</span>, <span class="number">2005</span>)</span><br><span class="line">tea = Teacher(<span class="string">'Prashad'</span>, [<span class="string">'C'</span>, <span class="string">'C++'</span>])</span><br><span class="line">print(per.get_details())</span><br><span class="line">print(stu.get_details())</span><br><span class="line">print(tea.get_details())</span><br></pre></td></tr></table></figure>



<h4 id="3、多继承"><a href="#3、多继承" class="headerlink" title="3、多继承"></a>3、多继承</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(Parentclass1, Parentclass2,...)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        Parentclass1.__init__(self)</span><br><span class="line">        Parentclass2.__init__(self)</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>



<h4 id="4、属性"><a href="#4、属性" class="headerlink" title="4、属性"></a>4、属性</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    person_name = <span class="string">'person name'</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'name'</span>  <span class="comment"># 实例属性</span></span><br><span class="line">        self._name = <span class="string">'_name'</span>  <span class="comment"># 私有属性</span></span><br><span class="line">        self.__name = <span class="string">'__name'</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">per = Person()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类属性直接使用 '类名.属性' 调用，也可以使用 '实例化对象.属性' 调用</span></span><br><span class="line">print(Person.person_name)</span><br><span class="line">print(per.person_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 私有属性，用一个且有一个前导的下划线来表明非公有的方法和实例变量</span></span><br><span class="line">print(per.name)</span><br><span class="line">print(per._name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 双前导的下划线应该仅仅用来避免与其子类属性的命名冲突</span></span><br><span class="line"><span class="comment"># print(per.__name)</span></span><br></pre></td></tr></table></figure>



<h4 id="5、方法"><a href="#5、方法" class="headerlink" title="5、方法"></a>5、方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    country = <span class="string">'China'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'实例方法'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__f2</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'私有方法'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    类方法是类所拥有的方法，需要用修饰器@classmethod来标识其为类方法。</span></span><br><span class="line"><span class="string">    类方法第一个参数必须是类对象，一般以cls作为第一个参数(就像self一样)，也可以有别的参数。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_country1</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.country</span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    静态方法需要通过修饰器 @staticmethod来进行修饰，静态方法不需要多定义参数。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_country2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Person.country</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">per = Person()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例方法</span></span><br><span class="line">per.f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 私有方法无法从外部调用，同私有属性一样</span></span><br><span class="line"><span class="comment"># per.__f2()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类方法，同类属性一样</span></span><br><span class="line">Person.get_country1()</span><br><span class="line">per.get_country1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态方法</span></span><br><span class="line">Person.get_country2()</span><br><span class="line">per.get_country2()</span><br></pre></td></tr></table></figure>



<h4 id="5、装饰器"><a href="#5、装饰器" class="headerlink" title="5、装饰器"></a>5、装饰器</h4><p>更精确的调整控制属性访问权限，可以使用 <code>@property</code> 装饰器，<code>@property</code> 装饰器就是负责把一个方法变成属性调用的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, rate)</span>:</span></span><br><span class="line">        self.__amt = <span class="number">0</span></span><br><span class="line">        self.rate = rate</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">amount</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__amt</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cny</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__amt * self.rate</span><br><span class="line"></span><br><span class="line"><span class="meta">    @amount.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">amount</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"Sorry, no negative amount in the account."</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.__amt = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    acc = Account(<span class="number">6.6</span>)</span><br><span class="line">    acc.amount = <span class="number">20</span></span><br><span class="line">    print(<span class="string">'Dollar amount:'</span>, acc.amount)</span><br><span class="line">    print(<span class="string">'In CNY:'</span>, acc.cny)</span><br><span class="line">    acc.amount = <span class="number">-100</span></span><br><span class="line">    print(<span class="string">'Dollar amount:'</span>, acc.amount)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>



<h3 id="4、模块和包"><a href="#4、模块和包" class="headerlink" title="4、模块和包"></a>4、模块和包</h3><h4 id="1、模块"><a href="#1、模块" class="headerlink" title="1、模块"></a>1、模块</h4><p>Python有一种方法可以把定义放在一个文件里，并在脚本或解释器的交互式实例中使用它们。这样的文件被称作 <em>模块</em> ；模块中的定义可以 <em>导入</em> 到其它模块或者 <em>主</em> 模块（你在顶级和计算器模式下执行的脚本中可以访问的变量集合）。</p>
<p>导入模块，即调用另一个<code>.py</code>文件里的内容(两个文件位于相同目录，或者被调用文件位于Python路径)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">test文件，进行调用测试</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> dividing</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 调用dividing中的函数</span></span><br><span class="line">    dividing.star_line(<span class="number">10</span>)</span><br><span class="line">    dividing.hash_line(<span class="number">10</span>)</span><br><span class="line">    dividing.simple_liem(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">dividing.py</span></span><br><span class="line"><span class="string">定义了分割线的函数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">star_line</span><span class="params">(num)</span>:</span></span><br><span class="line">    print(<span class="string">'*'</span> * num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_line</span><span class="params">(num)</span>:</span></span><br><span class="line">    print(<span class="string">'#'</span> * num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_liem</span><span class="params">(num)</span>:</span></span><br><span class="line">    print(<span class="string">'-'</span> * num)</span><br></pre></td></tr></table></figure>

<p>扩展：模块的搜索路径</p>
<p>模块的搜索路径都储存在<code>sys.path</code>列表中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> sys.path:</span><br><span class="line">    print(path)</span><br></pre></td></tr></table></figure>



<h4 id="2、包"><a href="#2、包" class="headerlink" title="2、包"></a>2、包</h4><p>含有 <code>__init__.py</code> 文件的目录可以用来作为一个包，目录里的所有 <code>.py</code> 文件都是这个包的子模块。</p>
<p>如果 <code>__init__.py</code> 文件内有一个名为 <code>__all__</code> 的列表，那么只有在列表内列出的名字将会被公开。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">tmp_1.py</span></span><br><span class="line"><span class="string">调用mymodule测试</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> mymodule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    mymodule.simple_liem(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">mymodule/__init__.py</span></span><br><span class="line"><span class="string">mymodule包的__init__.py文件</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> mymodule.dividing <span class="keyword">import</span> simple_liem</span><br><span class="line">__all__ = [simple_liem, ]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">dividing.py</span></span><br><span class="line"><span class="string">定义了分割线的函数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">star_line</span><span class="params">(num)</span>:</span></span><br><span class="line">    print(<span class="string">'*'</span> * num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_line</span><span class="params">(num)</span>:</span></span><br><span class="line">    print(<span class="string">'#'</span> * num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_liem</span><span class="params">(num)</span>:</span></span><br><span class="line">    print(<span class="string">'-'</span> * num)</span><br></pre></td></tr></table></figure>

<p>目录结构：需要注意的是<code>tmp_1.py</code>与<code>mymodule</code>包同级别路径</p>
<p><img src="/2019/04/21/Python%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85-1.png" alt="模块和包-1"></p>
<h4 id="3、安装自定义包"><a href="#3、安装自定义包" class="headerlink" title="3、安装自定义包"></a>3、安装自定义包</h4><h5 id="1、自定义包"><a href="#1、自定义包" class="headerlink" title="1、自定义包"></a>1、自定义包</h5><p>目录结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|--MyModules</span><br><span class="line">|  |--setup.py</span><br><span class="line">|  |--src</span><br><span class="line">|  |  |--mm</span><br><span class="line">|  |  |  |--downloader.py</span><br><span class="line">|  |  |  |--tools.py</span><br><span class="line">|  |  |  |--__init__.py</span><br></pre></td></tr></table></figure>

<p><code>mm</code>为自定义包，其中包含自定义模块<code>tools.py</code></p>
<p><code>src/mm/__init__.py</code>中导入模块，使用绝对引入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> tools</span><br><span class="line"></span><br><span class="line">__all__ = [tools]</span><br></pre></td></tr></table></figure>



<h5 id="2、设置自定义包的参数"><a href="#2、设置自定义包的参数" class="headerlink" title="2、设置自定义包的参数"></a>2、设置自定义包的参数</h5><p><code>setup.py</code>文件中设置包的相关参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> find_packages</span><br><span class="line"></span><br><span class="line">setup(name=<span class="string">'mm'</span>,     <span class="comment"># 包名</span></span><br><span class="line">      version=<span class="string">'1.1.0'</span>,  <span class="comment"># 版本号</span></span><br><span class="line">      description=<span class="string">'My common constants and functions'</span>,  <span class="comment"># 描述</span></span><br><span class="line">      author=<span class="string">'Shifa Yang'</span>,  <span class="comment"># 作者</span></span><br><span class="line">      author_email=<span class="string">'ysf504703038@163.com'</span>,  <span class="comment"># 作者邮箱</span></span><br><span class="line">      url=<span class="string">'null'</span>,  <span class="comment"># 包的网址</span></span><br><span class="line">      license=<span class="string">''</span>,</span><br><span class="line">      <span class="comment">#   install_requires=['requests', 'selenium', 'bs4'], # 安装依赖</span></span><br><span class="line">      classifiers=[</span><br><span class="line">          <span class="string">'Intended Audience :: Developers'</span>,</span><br><span class="line">          <span class="string">'Programming Language :: Python'</span>,</span><br><span class="line">          <span class="string">'Programming Language :: Python :: 2'</span>,</span><br><span class="line">          <span class="string">'Programming Language :: Python :: 2.5'</span>,</span><br><span class="line">          <span class="string">'Programming Language :: Python :: 2.6'</span>,</span><br><span class="line">          <span class="string">'Programming Language :: Python :: 2.7'</span>,</span><br><span class="line">          <span class="string">'Programming Language :: Python :: 3'</span>,</span><br><span class="line">          <span class="string">'Programming Language :: Python :: 3.2'</span>,</span><br><span class="line">          <span class="string">'Programming Language :: Python :: 3.3'</span>,</span><br><span class="line">          <span class="string">'Programming Language :: Python :: 3.4'</span>,</span><br><span class="line">          <span class="string">'Programming Language :: Python :: 3.5'</span>,</span><br><span class="line">      ],</span><br><span class="line">      keywords=<span class="string">''</span>,</span><br><span class="line">      packages=find_packages(<span class="string">'src'</span>),  <span class="comment"># 必填</span></span><br><span class="line">      package_dir=&#123;<span class="string">''</span>: <span class="string">'src'</span>&#125;,         <span class="comment"># 必填</span></span><br><span class="line">      include_package_data=<span class="literal">True</span>,</span><br><span class="line">      )</span><br></pre></td></tr></table></figure>



<h5 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h5><p>在命令行执行打包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python setup.py sdist</span><br></pre></td></tr></table></figure>

<p>就会生成一个<code>dist</code>目录，目录中有自定义包的安装包，到<code>dist</code>目录下使用<code>pip</code>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地安装</span></span><br><span class="line">pip3 install packages</span><br><span class="line"><span class="comment"># 或者从git安装</span></span><br><span class="line">pip install git+https://github.com/504703038/My-Python-Modules.git</span><br></pre></td></tr></table></figure>





<h3 id="5、压缩与解压"><a href="#5、压缩与解压" class="headerlink" title="5、压缩与解压"></a>5、压缩与解压</h3><h4 id="1、gz文件"><a href="#1、gz文件" class="headerlink" title="1、gz文件"></a>1、gz文件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress</span><span class="params">(filename)</span>:</span></span><br><span class="line"></span><br><span class="line">    file = open(filename, <span class="string">'rb'</span>)</span><br><span class="line">    content = file.read()</span><br><span class="line">    file.close()</span><br><span class="line">    filename = filename+<span class="string">'.gz'</span></span><br><span class="line">    gz_file = gzip.GzipFile(filename, <span class="string">'wb'</span>)</span><br><span class="line">    gz_file.write(content)</span><br><span class="line">    gz_file.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decompress</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="comment"># 加载.gz文件</span></span><br><span class="line">    gz_file = gzip.GzipFile(filename)</span><br><span class="line">    <span class="comment"># 读取文件内容</span></span><br><span class="line">    content = gz_file.read()</span><br><span class="line">    <span class="comment"># 关闭文件</span></span><br><span class="line">    gz_file.close()</span><br><span class="line">    <span class="comment"># 解压后的文件名</span></span><br><span class="line">    filename = filename.replace(<span class="string">'.gz'</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="comment"># 创建解压后的文件</span></span><br><span class="line">    file = open(filename, <span class="string">'wb+'</span>)</span><br><span class="line">    <span class="comment"># 输出压缩文件的内容</span></span><br><span class="line">    file.write(content)</span><br><span class="line">    <span class="comment"># 关闭文件</span></span><br><span class="line">    file.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    compress(<span class="string">'./Others/sitemap_201103.xml'</span>)</span><br><span class="line">    decompress(<span class="string">'./Others/sitemap_201103.xml.gz'</span>)</span><br></pre></td></tr></table></figure>



<h3 id="6、目录访问"><a href="#6、目录访问" class="headerlink" title="6、目录访问"></a>6、目录访问</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_name</span><span class="params">(file_dir)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(file_dir):</span><br><span class="line">        print(<span class="string">'root_dir:'</span>, root)  <span class="comment"># 当前目录路径</span></span><br><span class="line">        print(<span class="string">'sub_dirs:'</span>, dirs)  <span class="comment"># 当前路径下所有子目录</span></span><br><span class="line">        print(<span class="string">'files:'</span>, files)  <span class="comment"># 当前路径下所有非目录子文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    file_name(<span class="string">'./Others'</span>)</span><br></pre></td></tr></table></figure>





<h3 id="7、字符串编码转换"><a href="#7、字符串编码转换" class="headerlink" title="7、字符串编码转换"></a>7、字符串编码转换</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">'编码'</span></span><br><span class="line">s = s.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">s = s.encode(<span class="string">'gbk'</span>)</span><br><span class="line"><span class="comment"># 转换后变为字节流</span></span><br><span class="line">s = <span class="string">b'\x08'</span></span><br><span class="line">s = s.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 转换后变为 str</span></span><br></pre></td></tr></table></figure>



<h3 id="8、print输出"><a href="#8、print输出" class="headerlink" title="8、print输出"></a>8、print输出</h3><h4 id="1、保留小数"><a href="#1、保留小数" class="headerlink" title="1、保留小数"></a>1、保留小数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">0.123456789</span></span><br><span class="line">b = <span class="number">0.987654321</span></span><br><span class="line"><span class="comment"># 保留5为小数，b保留3位小数</span></span><br><span class="line">print(<span class="string">'a = &#123;:.5f&#125;, b = &#123;:.3f&#125;'</span>.format(a, b))</span><br><span class="line">print(<span class="string">'a = %.5f,b = %.3f'</span> % (a,b))</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; 0.12346, b &#x3D; 0.988</span><br></pre></td></tr></table></figure>

<p>可以看出，保留小数的时候会四舍五入，如果不想四舍五入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">a = <span class="number">0.123456789</span></span><br><span class="line">b = <span class="number">0.987654321</span></span><br><span class="line"><span class="comment"># 保留5为小数，b保留3位小数</span></span><br><span class="line">a = math.floor(a * <span class="number">10</span> ** <span class="number">5</span>) / <span class="number">10</span> ** <span class="number">5</span></span><br><span class="line">b = math.floor(b * <span class="number">10</span> ** <span class="number">3</span>) / <span class="number">10</span> ** <span class="number">3</span></span><br><span class="line">print(a, b)</span><br></pre></td></tr></table></figure>



<h3 id="9、字符串处理"><a href="#9、字符串处理" class="headerlink" title="9、字符串处理"></a>9、字符串处理</h3><table>
<thead>
<tr>
<th align="left"><strong>方法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>string.capitalize()</code></td>
<td>把字符串的第一个字符大写</td>
</tr>
<tr>
<td align="left"><code>string.center(width)</code></td>
<td>返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</td>
</tr>
<tr>
<td align="left"><code>string.count(str, beg=0, end=len(string))</code></td>
<td>返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td>
</tr>
<tr>
<td align="left"><code>string.find(str, beg=0, end=len(string))</code></td>
<td>检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1</td>
</tr>
<tr>
<td align="left"><code>string.rfind(str, beg=0,end=len(string) )</code></td>
<td>类似于 find()函数，不过是从右边开始查找.</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime Text 个性化设置</title>
    <url>/2020/01/28/Sublime-Text%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="1、安装Package-Control"><a href="#1、安装Package-Control" class="headerlink" title="1、安装Package Control"></a>1、安装Package Control</h3><p><code>自动安装</code>：</p>
<p>1、按<code>Ctrl+Shift+P</code>打开命令行</p>
<p>2、输入并执行<code>Install Package Control</code></p>
<p><em>提示：可能需要爬梯子</em></p>
<a id="more"></a>

<p><code>手动安装</code>：</p>
<p>1、<a href="./Package%20Control.sublime-package">下载Package</a></p>
<p>2、菜单栏<code>Preferences -&gt; Browse Packages...</code>，会弹出一个文件夹</p>
<p>3、打开文件夹的父文件夹中的<code>Installed Packages</code>文件夹</p>
<p>4、将下载的package复制到<code>Installed Packages</code>文件夹中</p>
<p>5、重启<code>Sublime Text</code></p>
<p>参考：<a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">官网教程</a></p>
<h3 id="2、常用插件"><a href="#2、常用插件" class="headerlink" title="2、常用插件"></a>2、常用插件</h3><h4 id="1、汉化"><a href="#1、汉化" class="headerlink" title="1、汉化"></a>1、汉化</h4><p><code>ChineseLocalizations</code>：汉化插件，目前支持 <code>简体中文</code>、<code>繁体中文</code>、<code>日本語</code>、<code>德语</code>、<code>法语</code>、<code>俄语</code>等。 </p>
<h4 id="2、文件编码"><a href="#2、文件编码" class="headerlink" title="2、文件编码"></a>2、文件编码</h4><p><code>ConvertToUTF8</code>：将文件转换为<code>UTF-8</code>编码(只是显示，不改变文件的编码)。</p>
<h4 id="3、代码语法检查"><a href="#3、代码语法检查" class="headerlink" title="3、代码语法检查"></a>3、代码语法检查</h4><p><code>SublimeLinter</code>：代码语法检查。</p>
<h4 id="4、代码格式化"><a href="#4、代码格式化" class="headerlink" title="4、代码格式化"></a>4、代码格式化</h4><p><code>CodeFormatter</code>：代码格式化，支持 <code>PHP</code>、 <code>JS/JSON</code>、<code>HTML</code>、<code>CSS</code>、<code>SCSS</code>、<code>Python</code>等。</p>
<h3 id="3、遇到的问题"><a href="#3、遇到的问题" class="headerlink" title="3、遇到的问题"></a>3、遇到的问题</h3><h4 id="1、下载插件无法连接到网络"><a href="#1、下载插件无法连接到网络" class="headerlink" title="1、下载插件无法连接到网络"></a>1、下载插件无法连接到网络</h4><p>1、<code>Ctrl + Shift + p</code>打开命令面板</p>
<p>2、输入并执行<code>Package Control: Add Channel</code></p>
<p>3、添加地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;packagecontrol.cn&#x2F;channel_v3.json</span><br></pre></td></tr></table></figure>

<p>或者将<code>channel_v3.json</code><a href="./channel_v3.zip">下载</a>到本地，之后添加本地地址(<em>本地快的飞起</em>)</p>
<p>菜单栏<code>Preference</code>&gt;<code>Package settings</code>&gt;<code>Package Control</code>&gt;<code>Settings - user</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"channels":</span><br><span class="line">[</span><br><span class="line">	<span class="string">"/home/shifa-yang/.config/sublime-text-3/data/channel_v3.json"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure>



<h4 id="2、关闭更新"><a href="#2、关闭更新" class="headerlink" title="2、关闭更新"></a>2、关闭更新</h4><p>菜单栏 <code>Preference</code>&gt;<code>Settings-User</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"update_check": false,</span><br></pre></td></tr></table></figure>





<h3 id="0、参考"><a href="#0、参考" class="headerlink" title="0、参考"></a>0、参考</h3><p><a href="https://github.com/wilon/wilon.github.io/issues/8" target="_blank" rel="noopener">Sublime Text 3 下载安装插件太慢怎么办?</a></p>
]]></content>
      <categories>
        <category>Sublime Text</category>
      </categories>
      <tags>
        <tag>Sublime Text</tag>
      </tags>
  </entry>
  <entry>
    <title>VS Code个性化设置</title>
    <url>/2019/10/31/VS-Code%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="0、基本配置"><a href="#0、基本配置" class="headerlink" title="0、基本配置"></a>0、基本配置</h3><h4 id="1、字体大小"><a href="#1、字体大小" class="headerlink" title="1、字体大小"></a>1、字体大小</h4><p>​    在设置中搜索<code>font</code>，将<code>Font Family</code>的值改为<code>Consolas, &#39;Courier New&#39;, monospace</code></p>
<p><img src="/2019/10/31/VS-Code%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/%E5%AD%97%E4%BD%93%E8%AE%BE%E7%BD%AE.png" alt="字体设置"></p>
<a id="more"></a>

<h4 id="2、自动格式化"><a href="#2、自动格式化" class="headerlink" title="2、自动格式化"></a>2、自动格式化</h4><p>在设置中修改</p>
<p><img src="/2019/10/31/VS-Code%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/%E6%96%87%E6%A1%A3%E8%87%AA%E5%8A%A8%E6%A0%BC%E5%BC%8F%E5%8C%96.png" alt="文档自动格式化"></p>
<h3 id="1、常用插件"><a href="#1、常用插件" class="headerlink" title="1、常用插件"></a>1、常用插件</h3><p>1、<code>Chinese (Simplified) Language Pack for Visual Studio Code</code> 中文简体插件</p>
<p>2、<code>Sublime Text Keymap and Settings Importer</code> ：Sublime按键映射插件</p>
<p>3、<code>Code Runner</code> ：代码运行插件</p>
<p>4、<code>Bracket Pair Colorizer</code> ：括号高亮</p>
<h3 id="2、Python开发环境设置"><a href="#2、Python开发环境设置" class="headerlink" title="2、Python开发环境设置"></a>2、Python开发环境设置</h3><h4 id="0、添加Python系统变量"><a href="#0、添加Python系统变量" class="headerlink" title="0、添加Python系统变量"></a>0、添加Python系统变量</h4><p>​    在系统变量的Path中添加两个路径，一个是Python目录、另一个是Python的模块目录</p>
<p><img src="/2019/10/31/VS-Code%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/Python%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F.png" alt="Python系统变量"></p>
<h4 id="1、代码提示"><a href="#1、代码提示" class="headerlink" title="1、代码提示"></a>1、代码提示</h4><p>​    在设置中打开 ‘setting.json’文件，在文件中添加如下语句</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"python.jediEnabled": true,</span><br></pre></td></tr></table></figure>



<h4 id="2、语法检查"><a href="#2、语法检查" class="headerlink" title="2、语法检查"></a>2、语法检查</h4><p>​    安装 ‘flake8’</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install flake8</span><br></pre></td></tr></table></figure>

<p>​    在设置中打开 ‘setting.json’文件，在文件中添加如下语句</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"python.linting.flake8Enabled": true,</span><br></pre></td></tr></table></figure>



<h4 id="3、代码格式化"><a href="#3、代码格式化" class="headerlink" title="3、代码格式化"></a>3、代码格式化</h4><p>​    安装‘yapf’,快捷键‘Ctrl + Shift + I’</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install yapf</span><br></pre></td></tr></table></figure>

<p>​    在设置中打开 ‘setting.json’文件，在文件中添加如下语句</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"python.formatting.provider": "yapf",</span><br></pre></td></tr></table></figure>



<h4 id="4、VSCode自动补全的函数不带括号"><a href="#4、VSCode自动补全的函数不带括号" class="headerlink" title="4、VSCode自动补全的函数不带括号"></a>4、VSCode自动补全的函数不带括号</h4><p>在设置中搜索‘addbrackets’打钩。</p>
<p><img src="/2019/10/31/VS-Code%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E4%B8%8D%E5%B8%A6%E6%8B%AC%E5%8F%B7.png" alt="自动填充不带括号"></p>
<h3 id="3、Java开发环境设置"><a href="#3、Java开发环境设置" class="headerlink" title="3、Java开发环境设置"></a>3、Java开发环境设置</h3><h4 id="0、添加Java系统变量"><a href="#0、添加Java系统变量" class="headerlink" title="0、添加Java系统变量"></a>0、添加Java系统变量</h4><p>​    在系统变量中新建两个变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量名：JAVA_HOME</span><br><span class="line">变量值：电脑上JDK安装的绝对路径</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量名：CLASSPATH</span><br><span class="line">变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</span><br></pre></td></tr></table></figure>

<p>​    在系统变量的Path中添加两个路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%JAVA_HOME%\bin</span><br><span class="line">%JAVA_HOME%\jre\bin</span><br></pre></td></tr></table></figure>



<h4 id="1、安装插件"><a href="#1、安装插件" class="headerlink" title="1、安装插件"></a>1、安装插件</h4><p>在商店中搜索并安装<code>Java Extension Pack</code></p>
<h4 id="2、配置Java路径"><a href="#2、配置Java路径" class="headerlink" title="2、配置Java路径"></a>2、配置Java路径</h4><p>在设置中搜索<code>java.home</code>，在<code>setting.json</code>中添加路径</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"java.home": "D:\\APPs\\JDK12",</span><br></pre></td></tr></table></figure>



<h4 id="3、运行java文件"><a href="#3、运行java文件" class="headerlink" title="3、运行java文件"></a>3、运行java文件</h4><p>打开文件夹，新建文件<code>Hello.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"Hell World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建运行配置，<code>Ctrl+Shift+D</code>打开运行并调试界面，创建<code>launch.json</code>文件，内容自动生成无需更改。之后回到<code>Hello.java</code>文件，按<code>F5</code>运行。</p>
<h4 id="4、创建Java项目"><a href="#4、创建Java项目" class="headerlink" title="4、创建Java项目"></a>4、创建Java项目</h4><p>按<code>Ctrl+Shift+P</code>打开命令行，输入<code>java</code>就可以找到“创建Java项目”。</p>
<h4 id="5、自定义代码片段"><a href="#5、自定义代码片段" class="headerlink" title="5、自定义代码片段"></a>5、自定义代码片段</h4><p><code>文件&gt;首选项&gt;用户代码片段</code>，打开<code>java</code>设置。</p>
<p><img src="/2019/10/31/VS-Code%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5.png" alt="自定义代码片段"></p>
<p>代码片段由4部分组成，第一部分是<code>name</code>(名称)；第二部分是<code>prefix</code>，即你输入<code>prefix</code>的值后自动生成相应的代码；第三部分是<code>body</code>，即你自定义的代码；第四部分是<code>description</code>(描述)。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="comment">// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and </span></span><br><span class="line">	<span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line">	<span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span></span><br><span class="line">	<span class="comment">// same ids are connected.</span></span><br><span class="line">	<span class="comment">// Example:</span></span><br><span class="line">	<span class="comment">// "Print to console": &#123;</span></span><br><span class="line">	<span class="comment">// 	"prefix": "log",</span></span><br><span class="line">	<span class="comment">// 	"body": [</span></span><br><span class="line">	<span class="comment">// 		"console.log('$1');",</span></span><br><span class="line">	<span class="comment">// 		"$2"</span></span><br><span class="line">	<span class="comment">// 	],</span></span><br><span class="line">	<span class="comment">// 	"description": "Log output to console"</span></span><br><span class="line">	<span class="comment">// &#125;,</span></span><br><span class="line">	<span class="attr">"Println to console"</span>: &#123;</span><br><span class="line">		<span class="attr">"prefix"</span>: <span class="string">"println"</span>,</span><br><span class="line">		<span class="attr">"body"</span>: [</span><br><span class="line">			<span class="string">"System.out.println(\"$1\");"</span>,</span><br><span class="line">			<span class="string">"$0"</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">"description"</span>: <span class="string">"Println output to console"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">"Print to console"</span>: &#123;</span><br><span class="line">		<span class="attr">"prefix"</span>: <span class="string">"print"</span>,</span><br><span class="line">		<span class="attr">"body"</span>: [</span><br><span class="line">			<span class="string">"System.out.print(\"$1\");"</span>,</span><br><span class="line">			<span class="string">"$0"</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">"description"</span>: <span class="string">"Print output to console"</span></span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4、C-开发环境配置"><a href="#4、C-开发环境配置" class="headerlink" title="4、C++开发环境配置"></a>4、C++开发环境配置</h3><h4 id="1、安装c-插件"><a href="#1、安装c-插件" class="headerlink" title="1、安装c++插件"></a>1、安装<code>c++</code>插件</h4><p>在Vs Code的商店中搜索并安装<code>c++</code>插件</p>
<h4 id="2、下载MingGW并配置系统变量"><a href="#2、下载MingGW并配置系统变量" class="headerlink" title="2、下载MingGW并配置系统变量"></a>2、下载MingGW并配置系统变量</h4><p><a href="./MinGW.zip">文件下载</a>，将文件解压，并在系统变量中添加路径</p>
<p>可以通过在命令行执行<code>gcc -v</code>来查看是否成功配置</p>
<h4 id="3、配置c-运行环境"><a href="#3、配置c-运行环境" class="headerlink" title="3、配置c++运行环境"></a>3、配置c++运行环境</h4><div class="tabs" id><ul class="nav-tabs"><li class="tab active"><a href="#-1">使用 Code Runner插件</a></li><li class="tab"><a href="#-2">手动配置</a></li></ul><div class="tab-content"><div class="tab-pane active" id="-1"><p> 在插件商店搜索并安装<code>code runner</code>插件。在快捷键设置中将<code>调试:切换断点</code>的快捷键修改为<code>Ctrl + F9</code>，将<code>Run Code</code>的快捷键设置为<code>F9</code>。</p>
<p>如果是<code>Linux</code>下面可以忽略</p>
<hr>
<p>使用<code>PowerShell</code>，在<code>setting.json</code>中添加，或者直接在设置中进行设置</p>
<img src="/2019/10/31/VS-Code%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/code%20runner%E8%AE%BE%E7%BD%AE-1.png" alt="code runner设置-1" style="zoom:67%;">

<p>搜索<code>Executor Map</code>，点击<code>在 setting.json 中编辑</code> </p>
<img src="/2019/10/31/VS-Code%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/code%20runner%E8%AE%BE%E7%BD%AE-2.png" alt="code runner设置-2" style="zoom:67%;">

<p>修改<code>cpp</code>内容</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"code-runner.executorMap": &#123;</span><br><span class="line">    "javascript": "node",</span><br><span class="line">    "java": "cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt",</span><br><span class="line">    "c": "cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt",</span><br><span class="line">    <span class="comment">// "cpp": "cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt",</span></span><br><span class="line">    "cpp": "cd $dir ; g++ ./$fileName -o $fileNameWithoutExt ; ./$fileNameWithoutExt",</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果修改完运行时控制台闪退，尝试一下用<code>Windows</code>的<code>Power Shell</code>运行<code>g++ -v</code>是否闪退(不知道为啥，我的只要与g++有关直接闪退)</p>
<p>如果闪退，之前的<code>cpp</code>内容再改回去之后在<code>setting.json</code>中添加</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"terminal.integrated.shell.windows": "C:\\Windows\\System32\\cmd.exe",</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="-2"><p>新建文件<code>main.cpp</code>，按<code>F5</code>执行，生成<code>launch.json</code>文件。</p>
<p><code>launch.json</code>文件如下配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"(gdb) 启动"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 修改执行文件路径 */</span></span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;.exe"</span>,</span><br><span class="line">            </span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">            <span class="attr">"environment"</span>: [],</span><br><span class="line">            <span class="attr">"externalConsole"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"MIMode"</span>: <span class="string">"gdb"</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 修改路径 */</span></span><br><span class="line">            <span class="attr">"miDebuggerPath"</span>: <span class="string">"D:/APPs/MinGW/bin/gdb32.exe"</span>,</span><br><span class="line"></span><br><span class="line">            <span class="attr">"setupCommands"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"description"</span>: <span class="string">"为 gdb 启用整齐打印"</span>,</span><br><span class="line">                    <span class="attr">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,</span><br><span class="line">                    <span class="attr">"ignoreFailures"</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 修改任务 */</span></span><br><span class="line">            <span class="attr">"preLaunchTask"</span>: <span class="string">"g++"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>回到<code>main.cpp</code>，按<code>F5</code>生成<code>task.json</code>文件</p>
<p><code>task.json</code>如下配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span>,</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"g++"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 修改路径 */</span></span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"D:/APPs/MinGW/bin/g++.exe"</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 修改命令参数 */</span></span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"-g"</span>,</span><br><span class="line">                <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">                <span class="string">"-o"</span>,</span><br><span class="line">                <span class="string">"$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe"</span></span><br><span class="line">            ],</span><br><span class="line">            </span><br><span class="line">            <span class="attr">"group"</span>: <span class="string">"build"</span>,</span><br><span class="line">            <span class="attr">"options"</span>: &#123;</span><br><span class="line">                <span class="attr">"cwd"</span>: <span class="string">"D:/APPs/MinGW/bin"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"problemMatcher"</span>: <span class="string">"$gcc"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>



]]></content>
      <categories>
        <category>VS Code</category>
      </categories>
      <tags>
        <tag>VS Code</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10 攻略</title>
    <url>/2020/02/18/Win10%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<h3 id="1、关闭离开模式"><a href="#1、关闭离开模式" class="headerlink" title="1、关闭离开模式"></a>1、关闭离开模式</h3><p>1、打开注册表</p>
<p><code>Windows+R</code>打开运行，输入<code>regedit</code>打开注册表</p>
<img src="/2020/02/18/Win10%E6%94%BB%E7%95%A5/%E6%89%93%E5%BC%80%E6%B3%A8%E5%86%8C%E8%A1%A8-1.png" alt="打开注册表-1" style="zoom:60%;">

<a id="more"></a>

<p>2、找到注册表位置</p>
<p>在注册表的地址栏输入<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Power</code></p>
<p>，并从中找到<code>AwayModeEnabled</code>键值，并将值改为0。</p>
<div>
    <img src="/2020/02/18/Win10%E6%94%BB%E7%95%A5/%E6%89%93%E5%BC%80%E6%B3%A8%E5%86%8C%E8%A1%A8-2.png" alt="打开注册表-2" style="zoom:50%;float:left;border:solid 1px 000;">
    <img src="/2020/02/18/Win10%E6%94%BB%E7%95%A5/%E6%89%93%E5%BC%80%E6%B3%A8%E5%86%8C%E8%A1%A8-3.png" alt="打开注册表-3" style="zoom:55%;float:left;border:solid 1px 000;">
</div><div style="clear:both;">








<h3 id="2、设置输入法热键"><a href="#2、设置输入法热键" class="headerlink" title="2、设置输入法热键"></a>2、设置输入法热键</h3><p>在设置中打开高级键盘设置，点击<code>输入语言热键</code>进行设置</p>
<div>
    <img src="/2020/02/18/Win10%E6%94%BB%E7%95%A5/%E5%88%87%E6%8D%A2%E8%BE%93%E5%85%A5%E6%B3%95%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%BE%E7%BD%AE-1.png" alt="切换输入法快捷键设置-1" style="zoom:50%;float:left;border:solid 1px 000;">
    <img src="/2020/02/18/Win10%E6%94%BB%E7%95%A5/%E5%88%87%E6%8D%A2%E8%BE%93%E5%85%A5%E6%B3%95%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%BE%E7%BD%AE-2.png" alt="切换输入法快捷键设置-2" style="zoom:50%;float:left;border:solid 1px 000;">
</div><div style="clear:both;">



<h3 id="3、控制台输出带颜色的字符"><a href="#3、控制台输出带颜色的字符" class="headerlink" title="3、控制台输出带颜色的字符"></a>3、控制台输出带颜色的字符</h3><p>1、安装<code>ANSI</code>转义序列支持</p>
<p><a href="https://github.com/adoxa/ansicon/releases" target="_blank" rel="noopener">下载地址</a>（<em>如果下载不下来，可以点击<a href="./ansi189-bin.zip">这里</a>下载</em>）</p>
<p>下载后将<code>x64</code>文件夹解压到<code>C:\Windows\System32</code>(或者其他已经添加环境变量的路径)，到<code>x64</code>文件夹内执行下列命令完成安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;ansicon.exe -i</span><br><span class="line">.&#x2F;ansicon.exe -l</span><br></pre></td></tr></table></figure>

<p>2、输出格式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">格式：\<span class="number">033</span>[显示方式;前景色;背景色m</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前景色            背景色           颜色</span><br><span class="line">---------------------------------------</span><br><span class="line">30                40              黑色</span><br><span class="line">31                 41              红色</span><br><span class="line">32                42              绿色</span><br><span class="line">33                43              黃色</span><br><span class="line">34                44              蓝色</span><br><span class="line">35                45              紫红色</span><br><span class="line">36                46              青蓝色</span><br><span class="line">37                47              白色</span><br><span class="line"></span><br><span class="line">显示方式           意义</span><br><span class="line">-------------------------</span><br><span class="line">0                终端默认设置</span><br><span class="line">1                高亮显示</span><br><span class="line">4                使用下划线</span><br><span class="line">5                闪烁</span><br><span class="line">7                反白显示</span><br><span class="line">8                不可见</span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">print(<span class="string">"\033[1;31;40m带颜色的字符\033[0m"</span>)  </span><br><span class="line">print(<span class="string">"\033[0;31m%s\033[0m"</span> % <span class="string">"带颜色的字符"</span>)</span><br><span class="line">print(<span class="string">'\033[1;31;42m 带颜色的字符 \033[0m'</span>)</span><br></pre></td></tr></table></figure>

<p>效果</p>
<img src="/2020/02/18/Win10%E6%94%BB%E7%95%A5/%E5%B8%A6%E9%A2%9C%E8%89%B2%E8%BE%93%E5%87%BA.png" alt="带颜色输出" style="zoom: 80%;">





<h3 id="0、参考"><a href="#0、参考" class="headerlink" title="0、参考"></a>0、参考</h3><p><a href="https://cloud.tencent.com/developer/article/1142372" target="_blank" rel="noopener">控制台输出颜色控制</a></p>
</div></div>]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派的应用</title>
    <url>/2020/10/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h3 id="1、搭建-LAMP-服务器"><a href="#1、搭建-LAMP-服务器" class="headerlink" title="1、搭建 LAMP 服务器"></a>1、搭建 LAMP 服务器</h3><p><code>LAMP(Linux, Apache, MySQL, PHP)</code> </p>
<a id="more"></a>

<h4 id="1、安装-Apache"><a href="#1、安装-Apache" class="headerlink" title="1、安装 Apache"></a>1、安装 Apache</h4><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install apache2</span><br></pre></td></tr></table></figure>

<p>安装成功后浏览器访问 <code>http://localhost</code> (也可以直接在浏览器输入你树莓派的IP地址)，如果看到以下页面就表示安装成功。</p>
<img src="/2020/10/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BA%94%E7%94%A8/%E5%AE%89%E8%A3%85%20Apache-1.png" alt="安装 Apache-1" style="zoom:67%;">

<p>默认主页在 <code>/var/www/html</code> 目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html</span><br><span class="line">ls -al</span><br><span class="line"><span class="comment"># 修改文件权限</span></span><br><span class="line">sudo chmod 777 /var/www/html</span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BA%94%E7%94%A8/%E5%AE%89%E8%A3%85%20Apache-2.png" alt="安装 Apache-2"></p>
<p>设置 <code>utf-8</code> 编码，修改 <code>/etc/apache2/conf-available/charset.conf</code> 配置文件，添加下列语句</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">AddDefaultCharset UTF-8AddDefaultCharset UTF-8</span><br></pre></td></tr></table></figure>





<h4 id="2、安装PHP"><a href="#2、安装PHP" class="headerlink" title="2、安装PHP"></a>2、安装PHP</h4><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install php</span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看PHP版本</span></span><br><span class="line">php -v</span><br></pre></td></tr></table></figure>

<p>测试PHP</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html</span><br><span class="line">sudo rm index.html</span><br><span class="line">sudo touch index.php</span><br><span class="line">sudo vi index.php</span><br></pre></td></tr></table></figure>

<p>在index.php中输入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">"Hello World!"</span>; <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> date(<span class="string">'Y-m-d H:i:s'</span>); <span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>在浏览器中访问 <code>http://localhost</code></p>
<img src="/2020/10/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BA%94%E7%94%A8/%E5%AE%89%E8%A3%85PHP.png" alt="安装PHP" style="zoom:50%;">



<h4 id="3、安装-MySQL"><a href="#3、安装-MySQL" class="headerlink" title="3、安装 MySQL"></a>3、安装 MySQL</h4><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装MySQL</span></span><br><span class="line">sudo apt-get install mariadb-server php-mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化配置</span></span><br><span class="line">sudo mysql_secure_installation</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看运行状态</span></span><br><span class="line">sudo service mysql status</span><br></pre></td></tr></table></figure>

<p>遇到的问题</p>
<p>1、<code>mysql</code> 安装失败</p>
<blockquote>
<img src="/2020/10/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BA%94%E7%94%A8/%E5%AE%89%E8%A3%85%20MySQL-1.png" alt="安装 MySQL-1" style="zoom:67%;">

<p>解决方法</p>
<p>可能是因为更换源引起的，我换回国外源就可以安装了。</p>
</blockquote>
<p>2、<code>mysql</code> 登录无权限</p>
<blockquote>
<img src="/2020/10/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BA%94%E7%94%A8/%E5%AE%89%E8%A3%85%20MySQL-2.png" alt="安装 MySQL-2" style="zoom:67%;">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用超级用户进入mysql</span></span><br><span class="line">sudo mysql</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择mysql数据库</span></span><br><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户验证方式及密码</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">"yangSHIFA12345"</span>),<span class="keyword">plugin</span>=<span class="string">'mysql_native_password'</span> <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改完验证方式后初始化数据库</span></span><br><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>


</blockquote>
<p>安装 <code>phpmyadmin</code></p>
<p><a href="https://www.phpmyadmin.net/downloads/" target="_blank" rel="noopener">官网下载安装包</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将安装包复制到 /var/www/html</span></span><br><span class="line">sudo cp /home/pi/Downloads/phpMyAdmin-4.9.6-all-languages.tar.gz /var/www/html/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line"><span class="built_in">cd</span> /var/www/html/</span><br><span class="line">sudo tar xzf phpMyAdmin-4.9.6-all-languages.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除安装包</span></span><br><span class="line">sudo rm phpMyAdmin-4.9.6-all-languages.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给文件夹重命名</span></span><br><span class="line">sudo mv phpMyAdmin-4.9.6-all-languages phpMyAdmin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 apache2</span></span><br><span class="line">service apache2 restart</span><br></pre></td></tr></table></figure>

<p>访问 <code>http://localhost/phpMyAdmin</code> ，输入数据库用户名(<code>root</code>)和密码(<code>YourPassWord</code>)登录</p>
<img src="/2020/10/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BA%94%E7%94%A8/%E7%99%BB%E5%BD%95phpMyAdmin-1.png" alt="登录phpMyAdmin-1" style="zoom:67%;">

<img src="/2020/10/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BA%94%E7%94%A8/%E7%99%BB%E5%BD%95phpMyAdmin-2.png" alt="登录phpMyAdmin-2" style="zoom:67%;">

<p><code>phpmyadmin</code> 功能完善</p>
<p>在主页面下方会提示“功能不完善”</p>
<img src="/2020/10/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BA%94%E7%94%A8/%E5%AE%8C%E5%96%84phpMyAdmin%E5%8A%9F%E8%83%BD.png" alt="完善phpMyAdmin功能" style="zoom:67%;">

<p>警告1：</p>
<blockquote>
<p>点击查找原因，会提示创建名为<code>phpmyadmin</code> 的数据库，点击创建即可。</p>
</blockquote>
<p>警告2：</p>
<blockquote>
<p>修改配置文件 <code>phpMyAdmin/libraries/config.default.php</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /var/www/html/phpMyAdmin/libraries/config.default.php</span><br><span class="line"><span class="comment"># 不熟悉 vi 可以使用 nano</span></span><br><span class="line">sudo nano /var/www/html/phpMyAdmin/libraries/config.default.php</span><br></pre></td></tr></table></figure>

<p>找到 <code>$cfg[&#39;blowfish_secret&#39;] = &#39;&#39;;</code> 修改为 <code>$cfg[&#39;blowfish_secret&#39;] = &#39;d456g465df132sf48sdf489sdfgtwe78twerf32wer1ff&#39;;</code> (可以是随意非空字符 <em>建议长一点，不然主页还会提示太短</em>)</p>
</blockquote>
<p>警告3：</p>
<blockquote>
<p>原因：在 <code>phpMyAdmin</code> 目录下没有 <code>tmp</code> 文件夹，或者对 <code>tmp</code> 文件夹的权限不足。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html/phpMyAdmin/</span><br><span class="line">sudo mkdir tmp</span><br><span class="line">sudo chmod 777 tmp</span><br></pre></td></tr></table></figure>


</blockquote>
<h4 id="4、Pi-DashBoard"><a href="#4、Pi-DashBoard" class="headerlink" title="4、Pi DashBoard"></a>4、Pi DashBoard</h4><p>在安装好 <code>Apache</code> 和 <code>PHP</code> 后就可以搭建一个树莓派的运行信息页面</p>
<p>安装 <code>Git</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>

<p>从 <code>Git</code> 下载 <code>Pi DashBoard</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html</span><br><span class="line">sudo git <span class="built_in">clone</span> https://github.com/spoonysonny/pi-dashboard.git</span><br><span class="line">sudo chown -R www-data: pi-dashboard</span><br></pre></td></tr></table></figure>

<p>完成后浏览器访问 <code>http://localhost/pi-dashboard/</code> 就可以看到树莓派运行信息页面</p>
<h4 id="5、内网穿透"><a href="#5、内网穿透" class="headerlink" title="5、内网穿透"></a>5、内网穿透</h4><p>使用花生壳进行内网穿透</p>
<p>1、在<a href="https://hsk.oray.com/download/" target="_blank" rel="noopener">花生壳官网</a>下载树莓派版本安装包（<em>要下载树莓派系统对应版本，否则无法安装</em>）</p>
<p>2、在树莓派上安装花生壳</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i phtunnel_5_0_rapi_armhf.deb</span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BA%94%E7%94%A8/image-20210311111012787.png" alt="image-20210311111012787"></p>
<p>3、花生壳命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">phddns  |start|status|stop|restart|reset|<span class="built_in">enable</span>|<span class="built_in">disable</span>|version</span><br></pre></td></tr></table></figure>

<p>4、配置花生壳</p>
<p>打开<a href="http://b.oray.com" target="_blank" rel="noopener">配置网址</a>，使用SN码登录，默认密码 <code>admin</code>，登录后激活账号</p>
<p>在内网穿透中新增映射即可</p>
<h4 id="5、遇到的问题"><a href="#5、遇到的问题" class="headerlink" title="5、遇到的问题"></a>5、遇到的问题</h4><h5 id="1、Apache-中文乱码"><a href="#1、Apache-中文乱码" class="headerlink" title="1、Apache 中文乱码"></a>1、Apache 中文乱码</h5><p>问题描述：</p>
<blockquote>
<p>在 <code>/var/www/html/</code> 目录下的中文文件以及文件中的中文都乱码了。</p>
</blockquote>
<p>解决方法一：</p>
<blockquote>
<p>在 <code>HTML</code> 文件的 <code>&lt;head&gt;</code> 中添加字符编码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">META</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>


</blockquote>
<p>解决方法二：</p>
<blockquote>
<p>修改 <code>/etc/httpd/conf/httpd.conf</code> 文件</p>
<p>将</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AddDefaultCharset ISO-8859-1</span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># AddDefaultCharset ISO-8859-1</span><br><span class="line">AddDefaultCharset off</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="2、搭建个人网站"><a href="#2、搭建个人网站" class="headerlink" title="2、搭建个人网站"></a>2、搭建个人网站</h3><p>使用 <code>WordPress</code> 搭建个人网站</p>
<h4 id="1、安装-WordPress"><a href="#1、安装-WordPress" class="headerlink" title="1、安装 WordPress"></a>1、安装 WordPress</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除 /var/www/html/ 下的文件</span></span><br><span class="line"><span class="built_in">cd</span> /var/www/html/</span><br><span class="line">sudo rm *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 WordPress</span></span><br><span class="line">sudo wget http://wordpress.org/latest.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 lastest.tar.gz 文件中 wordpress 文件夹下的文件解压到当前目录</span></span><br><span class="line">sudo tar xzf latest.tar.gz</span><br><span class="line">sudo mv wordpress/* .</span><br><span class="line">sudo rm -rf wordpress latest.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前目录结构</span></span><br><span class="line">tree -L 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件所有者</span></span><br><span class="line">sudo chown -R www-data: .</span><br></pre></td></tr></table></figure>



<h4 id="2、配置WordPress数据库"><a href="#2、配置WordPress数据库" class="headerlink" title="2、配置WordPress数据库"></a>2、配置WordPress数据库</h4><p>运行 <code>mysql</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>创建数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database wordpress;</span><br></pre></td></tr></table></figure>

<p>给用户授权(<em>注意是你的密码</em>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON wordpress.* TO &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;YOURPASSWORD&#39;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>



<h4 id="3、配置WordPress"><a href="#3、配置WordPress" class="headerlink" title="3、配置WordPress"></a>3、配置WordPress</h4><p>浏览器访问 <code>http://localhost/</code> 可以看到 <code>WordPress</code> 选择语言的页面</p>
<img src="/2020/10/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BA%94%E7%94%A8/WordPress%E9%80%89%E6%8B%A9%E8%AF%AD%E8%A8%80.png" alt="WordPress选择语言" style="zoom:67%;">

<p>接下来配置数据库信息</p>
<img src="/2020/10/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BA%94%E7%94%A8/%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BF%A1%E6%81%AF.png" alt="配置数据库信息" style="zoom:67%;">

<p>接下来设置用户名和密码，完成后访问 <code>http://localhost/wp-admin/</code> 就可以看到使用 <code>WordPress</code> 搭建的网站</p>
<img src="/2020/10/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BA%94%E7%94%A8/%E7%AB%99%E7%82%B9%E7%AE%A1%E7%90%86%E9%A1%B5%E9%9D%A2.png" alt="站点管理页面" style="zoom:67%;">



<h4 id="4、让-WordPress-有单独的文件夹"><a href="#4、让-WordPress-有单独的文件夹" class="headerlink" title="4、让 WordPress 有单独的文件夹"></a>4、让 WordPress 有单独的文件夹</h4><p><a href="https://wordpress.org/support/article/giving-wordpress-its-own-directory/" target="_blank" rel="noopener">参考官网教程</a></p>
<p>1、修改 <code>WordPress</code> 配置</p>
<p>在 <code>WordPress</code> 管理页面中修改 <code>WordPress地址</code> 和 <code>站点地址</code> ，如果前期已经给树莓派分配了固定IP的话可以将 <code>localhost</code> 改成树莓派的IP地址，然后保存更改</p>
<img src="/2020/10/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BA%94%E7%94%A8/%E9%85%8D%E7%BD%AEWordPress%E7%AB%99%E7%82%B9%E5%9C%B0%E5%9D%80.png" alt="配置WordPress站点地址" style="zoom:67%;">

<p>2、在根目录下安装好 <code>WordPress</code> 后将所有文件移到子文件夹下</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html</span><br><span class="line">sudo mkdir /var/www/tmp</span><br><span class="line">sudo mv ./* /var/www/tmp/</span><br><span class="line">sudo mkdir WordPress</span><br><span class="line">sudo mv /var/www/tmp/* WordPress/</span><br><span class="line">sudo rm -r /var/www/tmp</span><br></pre></td></tr></table></figure>

<p> 3、创建 <code>.htaccess</code> 文件</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/html</span><br><span class="line">sudo touch .htaccess</span><br><span class="line">sudo vi .htaccess</span><br></pre></td></tr></table></figure>

<p> 并修改内容</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteBase &#x2F;WordPress&#x2F;</span><br><span class="line">RewriteCond %&#123;REQUEST_URI&#125; !^&#x2F;WordPress&#x2F;</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">RewriteRule ^(.*)$ &#x2F;WordPress&#x2F;$1</span><br><span class="line">RewriteRule ^(&#x2F;)?$ WordPress&#x2F;index.php [L]</span><br><span class="line">&lt;&#x2F;IfModule&gt;</span><br></pre></td></tr></table></figure>





<h3 id="3、文件共享服务"><a href="#3、文件共享服务" class="headerlink" title="3、文件共享服务"></a>3、文件共享服务</h3><p>安装 <code>Samba</code> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 Samba</span></span><br><span class="line">sudo apt-get install samba samba-common-bin</span><br><span class="line"><span class="comment"># 添加 Samba 用户</span></span><br><span class="line">sudo smbpasswd -a pi</span><br><span class="line"><span class="comment"># 配置 Samba</span></span><br><span class="line">sudo nano /etc/samba/smb.conf</span><br></pre></td></tr></table></figure>

<p>在文件末尾添加配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Pulic Storage]</span><br><span class="line">path &#x3D; &#x2F;media&#x2F;pi&#x2F;GM</span><br><span class="line">comment &#x3D; Public Storage</span><br><span class="line">valid users &#x3D; pi</span><br><span class="line">writeable &#x3D; yes</span><br><span class="line">browseable &#x3D; yes</span><br><span class="line">create mask &#x3D; 0777</span><br><span class="line">public &#x3D; yes</span><br></pre></td></tr></table></figure>

<p>重启 <code>Samba</code>服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service smbd restart</span><br></pre></td></tr></table></figure>

<p>在 <code>PC</code> 端 <code>Win+R</code> 输入 <code>\\192.168.1.150</code> 访问共享文件服务</p>
<h3 id="4、搭建FTP服务"><a href="#4、搭建FTP服务" class="headerlink" title="4、搭建FTP服务"></a>4、搭建FTP服务</h3><h4 id="1、安装vsftpd"><a href="#1、安装vsftpd" class="headerlink" title="1、安装vsftpd"></a>1、安装vsftpd</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure>

<h4 id="2、配置vsftpd"><a href="#2、配置vsftpd" class="headerlink" title="2、配置vsftpd"></a>2、配置vsftpd</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>

<p>修改内容如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">listen</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">listen_ipv6</span>=<span class="literal">NO</span></span><br><span class="line"><span class="attr">utf8_filesystem</span>=<span class="literal">YES</span></span><br></pre></td></tr></table></figure>

<h4 id="3、完善服务"><a href="#3、完善服务" class="headerlink" title="3、完善服务"></a>3、完善服务</h4><p>修改完成后重启 <code>vsftpd</code> 服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service vsftpd restart</span><br></pre></td></tr></table></figure>

<p>设置开机启动 <code>vsftpd</code> 服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="5、搭建-Minecraft-Server"><a href="#5、搭建-Minecraft-Server" class="headerlink" title="5、搭建 Minecraft Server"></a>5、搭建 Minecraft Server</h3><p>搭建一个 《我的世界》服务器 与舍友击剑。</p>
<p>使用 <code>mcrcon (A client for handling Remote Commands (RCON) to a Minecraft server.)</code>  实用程序连接 Minecraft </p>
<h4 id="1、配置-mcrcon-所需环境"><a href="#1、配置-mcrcon-所需环境" class="headerlink" title="1、配置 mcrcon 所需环境"></a>1、配置 mcrcon 所需环境</h4><p>1、安装 <code>build-essential</code> 工具包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install git build-essential</span><br></pre></td></tr></table></figure>

<p>2、配置 <code>raspberry</code> ，开启GL驱动程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure>

<p><code>Advance Options -&gt; GL Driver -&gt; GL (Fake KMS)</code> 完成后重启树莓派</p>
<img src="/2020/10/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BC%80%E5%90%AFGL%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F-1.png" alt="开启GL驱动程序-1" style="zoom:67%;">

<img src="/2020/10/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BC%80%E5%90%AFGL%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F-2.png" alt="开启GL驱动程序-2" style="zoom:67%;">

<img src="/2020/10/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BA%94%E7%94%A8/%E5%BC%80%E5%90%AFGL%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F-3.png" alt="开启GL驱动程序-3" style="zoom:67%;">

<p>3、安装 <code>Java</code> 运行环境</p>
<p>一般 <code>Raspbian Os</code> 都会自带  <code>java</code> ，这里不再提供安装教程</p>
<h4 id="2、创建-Minecraft-用户"><a href="#2、创建-Minecraft-用户" class="headerlink" title="2、创建 Minecraft 用户"></a>2、创建 Minecraft 用户</h4><p>为了安全起见，<code>Minecraft</code> 不在 <code>root</code> 用户下运行，新建一个 <code>minecraft</code> 系统用户和组来运行 <code>Minecraft</code> 服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo useradd -r -m -U -d /opt/minecraft -s /bin/bash minecraft</span><br><span class="line"><span class="comment"># 为 minecraft 用户添加密码</span></span><br><span class="line">sudo passwd minecraft</span><br></pre></td></tr></table></figure>

<p>切换到 <code>minecraft</code> 用户，安装 <code>Minecraft</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su - minecraft</span><br></pre></td></tr></table></figure>

<p>在用户主目录创建两个目录</p>
<blockquote>
<ul>
<li><code>tools</code> 目录用来存储 <code>mcrcon</code> 客户端和备份脚本</li>
<li><code>server</code> 目录用来存储 <code>Minecraft</code> 服务器及数据</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/&#123;tools,server&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3、下载和编译-mcrcon"><a href="#3、下载和编译-mcrcon" class="headerlink" title="3、下载和编译 mcrcon"></a>3、下载和编译 mcrcon</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line"><span class="built_in">cd</span> ~/tools &amp;&amp; git <span class="built_in">clone</span> https://github.com/Tiiffi/mcrcon.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="built_in">cd</span> ~/tools/mcrcon</span><br><span class="line">gcc -std=gnu11 -pedantic -Wall -Wextra -O2 -s -o mcrcon mcrcon.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">./mcrcon -h</span><br></pre></td></tr></table></figure>



<h4 id="4、下载并配置-Minecraft-服务器"><a href="#4、下载并配置-Minecraft-服务器" class="headerlink" title="4、下载并配置 Minecraft 服务器"></a>4、下载并配置 Minecraft 服务器</h4><p><a href="https://www.minecraft.net/zh-hans/download/server" target="_blank" rel="noopener">官网下载地址</a></p>
<p>使用浏览器下载</p>
<p>或者使用 <code>wget</code> 下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://launcher.mojang.com/v1/objects/f02f4473dbf152c23d7d484952121db0b36698cb/server.jar -P ~/server</span><br></pre></td></tr></table></figure>

<p>配置 <code>Minecraft</code> 服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/server</span><br><span class="line">java -Xmx1024M -Xms1024M -jar server.jar nogui</span><br></pre></td></tr></table></figure>

<p>首次启动，服务器将执行一些操作并创建<code>server.properties</code>和<code>eula.txt</code>文件并停止。并提示你要同意<code>Minecraft EULA</code> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[16:22:43] [main/ERROR]: Failed to load properties from file: server.properties</span><br><span class="line">[16:22:44] [main/WARN]: Failed to load eula.txt</span><br><span class="line">[16:22:44] [main/INFO]: You need to agree to the EULA <span class="keyword">in</span> order to run the server. Go to eula.txt <span class="keyword">for</span> more info.</span><br></pre></td></tr></table></figure>

<p>同意 <code>Minecraft EULA</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nano ~&#x2F;server&#x2F;eula.txt</span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E5%BA%94%E7%94%A8/%E5%90%8C%E6%84%8FMinecraft%20EULA.png" alt="同意Minecraft EULA"></p>
<p>编辑 <code>server.properties</code> 文件以启用 <code>rcon</code> 协议并设置 <code>rcon</code> 密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano ~/server/server.properties</span><br></pre></td></tr></table></figure>

<p>修改下列几行</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">rcon.port</span>=<span class="number">25575</span></span><br><span class="line"><span class="attr">rcon.password</span>=[YOUR PASSWORD]</span><br><span class="line"><span class="attr">enable-rcon</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><em>各参数含义详情参考 <a href="https://minecraft-zh.gamepedia.com/Server.properties" target="_blank" rel="noopener">server.properties</a></em></p>
<h4 id="5、创建系统服务文件"><a href="#5、创建系统服务文件" class="headerlink" title="5、创建系统服务文件"></a>5、创建系统服务文件</h4><p>使用 <code>pi</code> 用户在 <code>/etc/systemd/system/</code> 中创建一个名为 <code>minecraft.service</code> 的文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/systemd/system/minecraft.service</span><br></pre></td></tr></table></figure>

<p>填写下列内容</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Minecraft Server</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">User</span>=minecraft</span><br><span class="line"><span class="attr">Nice</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">KillMode</span>=none</span><br><span class="line"><span class="attr">SuccessExitStatus</span>=<span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="attr">ProtectHome</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">ProtectSystem</span>=full</span><br><span class="line"><span class="attr">PrivateDevices</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">NoNewPrivileges</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">WorkingDirectory</span>=/opt/minecraft/server</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/java -Xmx768M -Xms512M -jar server.jar nogui</span><br><span class="line"><span class="attr">ExecStop</span>=/opt/minecraft/tools/mcrcon/mcrcon -H <span class="number">127.0</span>.<span class="number">0.1</span> -P <span class="number">25575</span> -p [YOUR PassWord] stop</span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>

<p>重新加载 <code>systemd</code> 配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<p>启动 <code>Minecraft</code> 服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start minecraft</span><br></pre></td></tr></table></figure>

<p>查看 <code>Minecraft</code> 服务器运行状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl status minecraft</span><br></pre></td></tr></table></figure>

<p>查看  <code>Minecraft</code> 服务器日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail -f /opt/minecraft/server/logs/latest.log</span><br></pre></td></tr></table></figure>

<p>让   <code>Minecraft</code> 服务器能够自动启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> minecraft</span><br></pre></td></tr></table></figure>

<p>访问 <code>Minecraft</code> 控制台</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/minecraft/tools/mcrcon/mcrcon -H 127.0.0.1 -P 25575 -p [YOUR PASSWORD] -t</span><br></pre></td></tr></table></figure>



<h4 id="6、创建配置备份"><a href="#6、创建配置备份" class="headerlink" title="6、创建配置备份"></a>6、创建配置备份</h4><p>创建一个备份 <code>Shell</code> 脚本和 <code>cronjob</code>来自动备份 <code>Minecraft</code> 服务器</p>
<p>切换到 <code>minecraft</code> 用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su - minecraft</span><br></pre></td></tr></table></figure>

<p>创建备份脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano /opt/minecraft/tools/backup.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">function</span> rcon &#123;</span><br><span class="line">  /opt/minecraft/tools/mcrcon/mcrcon -H 127.0.0.1 -P 25575 -p [YOUR PASSWORD] <span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rcon <span class="string">"save-off"</span></span><br><span class="line">rcon <span class="string">"save-all"</span></span><br><span class="line">tar -cvpzf /opt/minecraft/backups/server-$(date +%F_%R).tar.gz /opt/minecraft/server</span><br><span class="line">rcon <span class="string">"save-on"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Delete older backups</span></span><br><span class="line">find /opt/minecraft/backups/ -<span class="built_in">type</span> f -mtime +7 -name <span class="string">'*.gz'</span> -delete</span><br></pre></td></tr></table></figure>

<p>修改文件属性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x /opt/minecraft/tools/backup.sh</span><br></pre></td></tr></table></figure>

<p>创建 cron 作业，每天23:00运行备份脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 23 * * * /opt/minecraft/tools/backup.sh</span><br></pre></td></tr></table></figure>





<h3 id="6、制作游戏机"><a href="#6、制作游戏机" class="headerlink" title="6、制作游戏机"></a>6、制作游戏机</h3><h4 id="1、烧录LAKKA系统"><a href="#1、烧录LAKKA系统" class="headerlink" title="1、烧录LAKKA系统"></a>1、烧录LAKKA系统</h4><p><a href="http://www.lakka.tv/" target="_blank" rel="noopener">下载 <code>LAKKA</code> 镜像</a></p>
]]></content>
  </entry>
  <entry>
    <title>文档</title>
    <url>/2020/05/03/%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h3 id="1、Python文档"><a href="#1、Python文档" class="headerlink" title="1、Python文档"></a>1、Python文档</h3><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">Beautiful Soup 4.2.0 文档</a></p>
<p><a href="https://selenium-python-zh.readthedocs.io/en/latest/" target="_blank" rel="noopener">Selenium-Python中文文档</a></p>
<p><a href>Pygame 中文文档</a></p>
<a id="more"></a>

<h3 id="2、C-文档"><a href="#2、C-文档" class="headerlink" title="2、C++文档"></a>2、C++文档</h3><p><a href="https://zh.cppreference.com/w/cpp" target="_blank" rel="noopener">C++ 参考手册</a></p>
<h3 id="3、Java文档"><a href="#3、Java文档" class="headerlink" title="3、Java文档"></a>3、Java文档</h3>]]></content>
      <categories>
        <category>文档</category>
      </categories>
      <tags>
        <tag>文档</tag>
        <tag>API</tag>
      </tags>
  </entry>
  <entry>
    <title>神经网络 - TensorFlow</title>
    <url>/2020/04/05/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-TensorFlow/</url>
    <content><![CDATA[<h3 id="1、安装TensorFlow"><a href="#1、安装TensorFlow" class="headerlink" title="1、安装TensorFlow"></a>1、安装TensorFlow</h3><p>1、安装</p>
<p>建议安装<code>1.12.0</code>版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install tensorflow==1.12.0</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>2、TensorFlow与NumPy版本不兼容</p>
<p><code>1.18.0</code>版本的<code>NumPy</code>与<code>TensorFlow</code>不兼容，改用<code>1.14.0</code>版本的<code>NumPy</code></p>
<p><img src="/2020/04/05/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-TensorFlow/%E4%B8%8ENumPy%E7%89%88%E6%9C%AC%E4%B8%8D%E5%85%BC%E5%AE%B9.png" alt="与NumPy版本不兼容"></p>
<p>安装<code>1.14.0</code>版本的<code>Numpy</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install numpy==1.14.0</span><br></pre></td></tr></table></figure>



<p>3、取消警告提示</p>
<p><img src="/2020/04/05/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-TensorFlow/%E5%8F%96%E6%B6%88%E8%AD%A6%E5%91%8A.png" alt="取消警告"></p>
<p><code>TensorFlow</code>在运行时会提示警告，将下列语句添加到程序文件中来取消提示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 不提示警告信息</span></span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br></pre></td></tr></table></figure>



<h3 id="2、基础"><a href="#2、基础" class="headerlink" title="2、基础"></a>2、基础</h3><h4 id="1、简单程序-a-b"><a href="#1、简单程序-a-b" class="headerlink" title="1、简单程序 a+b"></a>1、简单程序 a+b</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前文件路径</span></span><br><span class="line">cur_path = <span class="string">'./神经网络/TensorFlow教程/'</span></span><br><span class="line"><span class="comment"># 不提示警告信息</span></span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    a = tf.constant(<span class="number">10</span>)</span><br><span class="line">    b = tf.constant(<span class="number">20</span>)</span><br><span class="line">    c = a + b</span><br><span class="line">    print(c)</span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        value = sess.run(c)</span><br><span class="line">        print(<span class="string">"value:"</span>, value)</span><br></pre></td></tr></table></figure>



<h4 id="2、查看默认图"><a href="#2、查看默认图" class="headerlink" title="2、查看默认图"></a>2、查看默认图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前文件路径</span></span><br><span class="line">cur_path = <span class="string">'./神经网络/TensorFlow教程/'</span></span><br><span class="line"><span class="comment"># 不提示警告信息</span></span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(tf.get_default_graph())</span><br><span class="line">    a = tf.constant(<span class="number">10</span>)</span><br><span class="line">    print(a.graph)</span><br><span class="line">    b = tf.constant(<span class="number">20</span>)</span><br><span class="line">    print(b.graph)</span><br><span class="line">    c = a + b</span><br><span class="line">    print(c.graph)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        c_value = sess.run(c)</span><br><span class="line">        print(sess.graph)</span><br><span class="line">        print(c_value)</span><br></pre></td></tr></table></figure>



<h4 id="3、自定义图"><a href="#3、自定义图" class="headerlink" title="3、自定义图"></a>3、自定义图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前文件路径</span></span><br><span class="line">cur_path = <span class="string">'./神经网络/TensorFlow教程/'</span></span><br><span class="line"><span class="comment"># 不提示警告信息</span></span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">graph_demo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 默认图</span></span><br><span class="line">    a = tf.constant(<span class="number">10</span>)</span><br><span class="line">    b = tf.constant(<span class="number">20</span>)</span><br><span class="line">    c = a + b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        c_value = sess.run(c)</span><br><span class="line">        print(<span class="string">'默认图：'</span>, sess.graph)</span><br><span class="line">        print(c_value)</span><br><span class="line">    <span class="comment"># 自定义图</span></span><br><span class="line">    new_g = tf.Graph()</span><br><span class="line">    <span class="keyword">with</span> new_g.as_default():</span><br><span class="line">        a_new = tf.constant(<span class="number">100</span>)</span><br><span class="line">        b_new = tf.constant(<span class="number">200</span>)</span><br><span class="line">        c_new = a_new + b_new</span><br><span class="line">    <span class="keyword">with</span> tf.Session(graph=new_g) <span class="keyword">as</span> sess:</span><br><span class="line">        c_new_value = sess.run(c_new)</span><br><span class="line">        print(<span class="string">'自定义图：'</span>, sess.graph)</span><br><span class="line">        print(c_new_value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    graph_demo()</span><br></pre></td></tr></table></figure>



<h4 id="4、图的可视化"><a href="#4、图的可视化" class="headerlink" title="4、图的可视化"></a>4、图的可视化</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前文件路径</span></span><br><span class="line">cur_path = <span class="string">'./神经网络/TensorFlow教程/'</span></span><br><span class="line"><span class="comment"># 不提示警告信息</span></span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">event_demo</span><span class="params">()</span>:</span></span><br><span class="line">    a = tf.constant(<span class="number">10</span>)</span><br><span class="line">    b = tf.constant(<span class="number">20</span>)</span><br><span class="line">    c = a + b</span><br><span class="line">    print(c)</span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        c_value = sess.run(c)</span><br><span class="line">        print(c_value)</span><br><span class="line">        print(sess.graph)</span><br><span class="line">        writer = tf.summary.FileWriter(</span><br><span class="line">            cur_path + <span class="string">'06图的可视化'</span>, graph=tf.get_default_graph())</span><br><span class="line">        writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    event_demo()</span><br></pre></td></tr></table></figure>

<p>运行程序会在<code>./神经网络/TensorFlow教程/06图的可视化/</code>目录下生成<code>event</code>文件，在终端执行如下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tensorboard --logdir=<span class="string">'./神经网络/TensorFlow教程/06图的可视化/'</span></span><br></pre></td></tr></table></figure>



<h4 id="5、会话Session"><a href="#5、会话Session" class="headerlink" title="5、会话Session"></a>5、会话Session</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前文件路径</span></span><br><span class="line">cur_path = <span class="string">'./神经网络/TensorFlow教程/'</span></span><br><span class="line"><span class="comment"># 不提示警告信息</span></span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sess_demo</span><span class="params">()</span>:</span></span><br><span class="line">    a = tf.constant(<span class="number">10</span>)</span><br><span class="line">    b = tf.constant(<span class="number">20</span>)</span><br><span class="line">    c = a + b</span><br><span class="line">    print(c)</span><br><span class="line">    config = tf.ConfigProto(allow_soft_placement=<span class="literal">True</span>,</span><br><span class="line">                            log_device_placement=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">with</span> tf.Session(config=config) <span class="keyword">as</span> sess:</span><br><span class="line">        values = sess.run([a, b, c])</span><br><span class="line">        print(values)</span><br><span class="line">        c_value = c.eval()</span><br><span class="line">        print(c_value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sess_demo()</span><br></pre></td></tr></table></figure>



<h4 id="6、feed-dict的使用"><a href="#6、feed-dict的使用" class="headerlink" title="6、feed_dict的使用"></a>6、feed_dict的使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前文件路径</span></span><br><span class="line">cur_path = <span class="string">'./神经网络/TensorFlow教程/'</span></span><br><span class="line"><span class="comment"># 不提示警告信息</span></span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    a = tf.placeholder(tf.float32)</span><br><span class="line">    b = tf.placeholder(<span class="string">'float32'</span>)</span><br><span class="line">    c = a + b</span><br><span class="line">    cc = tf.add(a, b)</span><br><span class="line">    x = tf.placeholder(tf.float32, <span class="literal">None</span>)</span><br><span class="line">    y = x * <span class="number">20</span> + <span class="number">100</span></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        c_value = sess.run(c, feed_dict=&#123;a: <span class="number">10</span>, b: <span class="number">20</span>&#125;)</span><br><span class="line">        cc_value = sess.run(cc, feed_dict=&#123;a: <span class="number">10</span>, b: <span class="number">20</span>&#125;)</span><br><span class="line">        print(c_value)</span><br><span class="line">        print(cc_value)</span><br><span class="line">        y_value = sess.run(y, feed_dict=&#123;x: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]&#125;)</span><br><span class="line">        print(y_value)</span><br></pre></td></tr></table></figure>



<h4 id="7、创建张量"><a href="#7、创建张量" class="headerlink" title="7、创建张量"></a>7、创建张量</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前文件路径</span></span><br><span class="line">cur_path = <span class="string">'./神经网络/TensorFlow教程/'</span></span><br><span class="line"><span class="comment"># 不提示警告信息</span></span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'demo 1:'</span>)</span><br><span class="line">    tensor1 = tf.constant(<span class="number">5.0</span>)</span><br><span class="line">    tensor2 = tf.constant([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">    tensor3 = tf.constant([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line">    print(tensor1)</span><br><span class="line">    print(tensor2)</span><br><span class="line">    print(tensor3)</span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        value_1 = sess.run(tensor1)</span><br><span class="line">        value_2 = sess.run(tensor2)</span><br><span class="line">        value_3 = sess.run(tensor3)</span><br><span class="line">        print(value_1)</span><br><span class="line">        print(value_2)</span><br><span class="line">        print(value_3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'demo 2:'</span>)</span><br><span class="line">    <span class="comment"># 全为1的张量</span></span><br><span class="line">    tensor1 = tf.ones(shape=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">    <span class="comment"># 全为0的张量</span></span><br><span class="line">    tensor2 = tf.zeros(shape=[<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">    <span class="comment"># 均匀分布</span></span><br><span class="line">    tensor3 = tf.random_uniform([<span class="number">2</span>, <span class="number">3</span>], minval=<span class="number">0</span>, maxval=<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># 标准差的正太分布</span></span><br><span class="line">    tensor4 = tf.random_normal([<span class="number">2</span>, <span class="number">3</span>], mean=<span class="number">5</span>, stddev=<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        value_1 = sess.run(tensor1)</span><br><span class="line">        value_2 = sess.run(tensor2)</span><br><span class="line">        value_3 = sess.run(tensor3)</span><br><span class="line">        value_4 = sess.run(tensor4)</span><br><span class="line">        print(value_1)</span><br><span class="line">        print(value_2)</span><br><span class="line">        print(value_3)</span><br><span class="line">        print(value_4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    demo_1()</span><br><span class="line">    demo_2()</span><br></pre></td></tr></table></figure>



<h4 id="8、改变张量形状"><a href="#8、改变张量形状" class="headerlink" title="8、改变张量形状"></a>8、改变张量形状</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前文件路径</span></span><br><span class="line">cur_path = <span class="string">'./神经网络/TensorFlow教程/'</span></span><br><span class="line"><span class="comment"># 不提示警告信息</span></span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'demo 1:'</span>)</span><br><span class="line">    a = tf.placeholder(dtype=tf.float32, shape=[<span class="literal">None</span>, <span class="literal">None</span>])</span><br><span class="line">    b = tf.placeholder(dtype=tf.float32, shape=[<span class="literal">None</span>, <span class="number">5</span>])</span><br><span class="line">    print(<span class="string">'修改前：'</span>)</span><br><span class="line">    print(<span class="string">'a:'</span>, a)</span><br><span class="line">    print(<span class="string">'b:'</span>, b)</span><br><span class="line">    a.set_shape([<span class="number">2</span>, <span class="number">5</span>])</span><br><span class="line">    b.set_shape([<span class="number">5</span>, <span class="number">5</span>])</span><br><span class="line">    print(<span class="string">'修改后：'</span>)</span><br><span class="line">    print(<span class="string">'a:'</span>, a)</span><br><span class="line">    print(<span class="string">'b:'</span>, b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'demo 2:'</span>)</span><br><span class="line">    a = tf.placeholder(dtype=tf.float32, shape=[<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">    print(<span class="string">'修改前：'</span>)</span><br><span class="line">    print(<span class="string">'a:'</span>, a)</span><br><span class="line">    a = tf.reshape(a, shape=[<span class="number">2</span>, <span class="number">6</span>])</span><br><span class="line">    print(<span class="string">'修改后：'</span>)</span><br><span class="line">    print(<span class="string">'a:'</span>, a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    demo_1()</span><br><span class="line">    demo_2()</span><br></pre></td></tr></table></figure>



<h4 id="9、矩阵运算"><a href="#9、矩阵运算" class="headerlink" title="9、矩阵运算"></a>9、矩阵运算</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前文件路径</span></span><br><span class="line">cur_path = <span class="string">'./神经网络/TensorFlow教程/'</span></span><br><span class="line"><span class="comment"># 不提示警告信息</span></span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    sess = tf.Session()</span><br><span class="line">    A = tf.random_uniform([<span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">    B = tf.fill([<span class="number">2</span>, <span class="number">4</span>], <span class="number">3.5</span>)</span><br><span class="line">    C = tf.random_normal([<span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">    print(<span class="string">'A:\n'</span>, sess.run(A))</span><br><span class="line">    print(<span class="string">'B:\n'</span>, sess.run(B))</span><br><span class="line">    print(<span class="string">'C:\n'</span>, sess.run(C))</span><br><span class="line">    print(<span class="string">'A*B:\n'</span>, sess.run(tf.matmul(A, B)))</span><br><span class="line">    print(<span class="string">'A*B+C:\n'</span>, sess.run(tf.matmul(A, B)+C))</span><br></pre></td></tr></table></figure>



<h3 id="3、案例"><a href="#3、案例" class="headerlink" title="3、案例"></a>3、案例</h3><h4 id="1、线性回归模型"><a href="#1、线性回归模型" class="headerlink" title="1、线性回归模型"></a>1、线性回归模型</h4><h5 id="1、线性回归原理"><a href="#1、线性回归原理" class="headerlink" title="1、线性回归原理"></a>1、线性回归原理</h5><p>1、构造模型</p>
<p>$    y = w_1<em>x_1 + w_2</em>x_2 + … + w_n*x_n + b $</p>
<p>2、损失函数</p>
<p>​    均方误差</p>
<p>3、优化损失</p>
<p>​    梯度下降</p>
<h5 id="2、设计方案"><a href="#2、设计方案" class="headerlink" title="2、设计方案"></a>2、设计方案</h5><p>1、准备数据</p>
<p>​    随机100个点，只有一个特征，x和ｙ之间满足关系$ y = kx + b$</p>
<p>​    <code>X.shape = (100, 1)</code></p>
<p>​    <code>y.shape = (100, 1)</code></p>
<p>​    数据分布满足 $y = 0.8x + 0.7$</p>
<p>​    <code>y_predict = tf.matual(X, weight) + bias</code></p>
<p>2、构造损失函数</p>
<p>​    <code>error = tf.reduce_mean(tf.square(y_predicty-y))</code></p>
<p>3、优化损失</p>
<p>​    <code>tf.train.GradientDescentOptimizer(learning_rate=0.01).minimize(error)</code></p>
<h5 id="3、实现"><a href="#3、实现" class="headerlink" title="3、实现"></a>3、实现</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前文件路径</span></span><br><span class="line">cur_path = <span class="string">'./神经网络/TensorFlow教程/线性回归案例/'</span></span><br><span class="line"><span class="comment"># 不提示警告信息</span></span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_regression</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># １、准备数据</span></span><br><span class="line">    X = tf.random_normal(shape=[<span class="number">100</span>, <span class="number">1</span>])</span><br><span class="line">    y = tf.matmul(X, [[<span class="number">0.8</span>]]) + <span class="number">0.7</span></span><br><span class="line">    <span class="comment"># 2、构建模型</span></span><br><span class="line">    weight = tf.Variable(initial_value=tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line">    bias = tf.Variable(initial_value=tf.random_normal(shape=[<span class="number">1</span>]))</span><br><span class="line">    y_predict = tf.matmul(X, weight) + bias</span><br><span class="line">    <span class="comment"># 3、构建损失函数</span></span><br><span class="line">    error = tf.reduce_mean(tf.square(y_predict-y))</span><br><span class="line">    <span class="comment"># 4、优化损失函数</span></span><br><span class="line">    optimizer = tf.train.GradientDescentOptimizer(</span><br><span class="line">        learning_rate=<span class="number">0.01</span>).minimize(error)</span><br><span class="line"></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        sess.run(init)</span><br><span class="line">        print(<span class="string">'查看训练前模型参数:\n权重：%f，偏量：%f，损失：%f'</span> %</span><br><span class="line">              (weight.eval(), bias.eval(), error.eval()))</span><br><span class="line">        <span class="comment"># 开始训练</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">            sess.run(optimizer)</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">'训练第%d次后模型参数:\n权重：%f，偏量：%f，损失：%f'</span> %</span><br><span class="line">                      ((i+<span class="number">1</span>), weight.eval(), bias.eval(), error.eval()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    linear_regression()</span><br></pre></td></tr></table></figure>

<h5 id="4、添加变量显示"><a href="#4、添加变量显示" class="headerlink" title="4、添加变量显示"></a>4、添加变量显示</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前文件路径</span></span><br><span class="line">cur_path = <span class="string">'./神经网络/TensorFlow教程/线性回归案例/'</span></span><br><span class="line"><span class="comment"># 不提示警告信息</span></span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_regression</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># １、准备数据</span></span><br><span class="line">    X = tf.random_normal(shape=[<span class="number">100</span>, <span class="number">1</span>])</span><br><span class="line">    y = tf.matmul(X, [[<span class="number">0.8</span>]]) + <span class="number">0.7</span></span><br><span class="line">    <span class="comment"># 2、构建模型</span></span><br><span class="line">    weight = tf.Variable(initial_value=tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line">    bias = tf.Variable(initial_value=tf.random_normal(shape=[<span class="number">1</span>]))</span><br><span class="line">    y_predict = tf.matmul(X, weight) + bias</span><br><span class="line">    <span class="comment"># 3、构建损失函数</span></span><br><span class="line">    error = tf.reduce_mean(tf.square(y_predict-y))</span><br><span class="line">    <span class="comment"># 4、优化损失函数</span></span><br><span class="line">    optimizer = tf.train.GradientDescentOptimizer(</span><br><span class="line">        learning_rate=<span class="number">0.01</span>).minimize(error)</span><br><span class="line"></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">    <span class="comment"># 收集变量</span></span><br><span class="line">    tf.summary.scalar(<span class="string">'error'</span>, error)</span><br><span class="line">    tf.summary.histogram(<span class="string">'weight'</span>, weight)</span><br><span class="line">    tf.summary.histogram(<span class="string">'bias'</span>, bias)</span><br><span class="line">    <span class="comment"># 合并变量</span></span><br><span class="line">    merge = tf.summary.merge_all()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        sess.run(init)</span><br><span class="line">        print(<span class="string">'查看训练前模型参数:\n权重：%f，偏量：%f，损失：%f'</span> %</span><br><span class="line">              (weight.eval(), bias.eval(), error.eval()))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建事件文件</span></span><br><span class="line">        fileWriter = tf.summary.FileWriter(</span><br><span class="line">            cur_path+<span class="string">'14添加变量显示'</span>, graph=sess.graph)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始训练</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">            sess.run(optimizer)</span><br><span class="line">            <span class="comment"># 运行合并变量</span></span><br><span class="line">            summary = sess.run(merge)</span><br><span class="line">            <span class="comment"># 将变量写入事件文件</span></span><br><span class="line">            fileWriter.add_summary(summary, i)</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">'训练第%d次后模型参数:\n权重：%f，偏量：%f，损失：%f'</span> %</span><br><span class="line">                      ((i+<span class="number">1</span>), weight.eval(), bias.eval(), error.eval()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    linear_regression()</span><br></pre></td></tr></table></figure>

<h5 id="5、增加命名空间"><a href="#5、增加命名空间" class="headerlink" title="5、增加命名空间"></a>5、增加命名空间</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前文件路径</span></span><br><span class="line">cur_path = <span class="string">'./神经网络/TensorFlow教程/线性回归案例/'</span></span><br><span class="line"><span class="comment"># 不提示警告信息</span></span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_regression</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># １、准备数据</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'prepare_data'</span>):</span><br><span class="line">        X = tf.random_normal(shape=[<span class="number">100</span>, <span class="number">1</span>], name=<span class="string">'feature'</span>)</span><br><span class="line">        y = tf.matmul(X, [[<span class="number">0.8</span>]]) + <span class="number">0.7</span></span><br><span class="line">    <span class="comment"># 2、构建模型</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'create_mode'</span>):</span><br><span class="line">        weight = tf.Variable(initial_value=tf.random_normal(</span><br><span class="line">            shape=[<span class="number">1</span>, <span class="number">1</span>]), name=<span class="string">'weight'</span>)</span><br><span class="line">        bias = tf.Variable(</span><br><span class="line">            initial_value=tf.random_normal(shape=[<span class="number">1</span>]), name=<span class="string">'bias'</span>)</span><br><span class="line">        y_predict = tf.matmul(X, weight) + bias</span><br><span class="line">    <span class="comment"># 3、构建损失函数</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'loss_function'</span>):</span><br><span class="line">        error = tf.reduce_mean(tf.square(y_predict - y))</span><br><span class="line">    <span class="comment"># 4、优化损失函数</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'optimizer'</span>):</span><br><span class="line">        optimizer = tf.train.GradientDescentOptimizer(</span><br><span class="line">            learning_rate=<span class="number">0.01</span>).minimize(error)</span><br><span class="line"></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">    <span class="comment"># 收集变量</span></span><br><span class="line">    tf.summary.scalar(<span class="string">'error'</span>, error)</span><br><span class="line">    tf.summary.histogram(<span class="string">'weight'</span>, weight)</span><br><span class="line">    tf.summary.histogram(<span class="string">'bias'</span>, bias)</span><br><span class="line">    <span class="comment"># 合并变量</span></span><br><span class="line">    merge = tf.summary.merge_all()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        sess.run(init)</span><br><span class="line">        print(<span class="string">'查看训练前模型参数:\n权重：%f，偏量：%f，损失：%f'</span> %</span><br><span class="line">              (weight.eval(), bias.eval(), error.eval()))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建事件文件</span></span><br><span class="line">        fileWriter = tf.summary.FileWriter(</span><br><span class="line">            cur_path+<span class="string">'15增加命名空间'</span>, graph=sess.graph)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始训练</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">            sess.run(optimizer)</span><br><span class="line">            <span class="comment"># 运行合并变量</span></span><br><span class="line">            summary = sess.run(merge)</span><br><span class="line">            <span class="comment"># 将变量写入事件文件</span></span><br><span class="line">            fileWriter.add_summary(summary, i)</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">'训练第%d次后模型参数:\n权重：%f，偏量：%f，损失：%f'</span> %</span><br><span class="line">                      ((i+<span class="number">1</span>), weight.eval(), bias.eval(), error.eval()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    linear_regression()</span><br></pre></td></tr></table></figure>

<h5 id="6、保存模型"><a href="#6、保存模型" class="headerlink" title="6、保存模型"></a>6、保存模型</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前文件路径</span></span><br><span class="line">cur_path = <span class="string">'./神经网络/TensorFlow教程/线性回归案例/'</span></span><br><span class="line"><span class="comment"># 不提示警告信息</span></span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_regression</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># １、准备数据</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'prepare_data'</span>):</span><br><span class="line">        X = tf.random_normal(shape=[<span class="number">100</span>, <span class="number">1</span>], name=<span class="string">'feature'</span>)</span><br><span class="line">        y = tf.matmul(X, [[<span class="number">0.8</span>]]) + <span class="number">0.7</span></span><br><span class="line">    <span class="comment"># 2、构建模型</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'create_mode'</span>):</span><br><span class="line">        weight = tf.Variable(initial_value=tf.random_normal(</span><br><span class="line">            shape=[<span class="number">1</span>, <span class="number">1</span>]), name=<span class="string">'weight'</span>)</span><br><span class="line">        bias = tf.Variable(</span><br><span class="line">            initial_value=tf.random_normal(shape=[<span class="number">1</span>]), name=<span class="string">'bias'</span>)</span><br><span class="line">        y_predict = tf.matmul(X, weight) + bias</span><br><span class="line">    <span class="comment"># 3、构建损失函数</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'loss_function'</span>):</span><br><span class="line">        error = tf.reduce_mean(tf.square(y_predict - y))</span><br><span class="line">    <span class="comment"># 4、优化损失函数</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'optimizer'</span>):</span><br><span class="line">        optimizer = tf.train.GradientDescentOptimizer(</span><br><span class="line">            learning_rate=<span class="number">0.01</span>).minimize(error)</span><br><span class="line"></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">    <span class="comment"># 收集变量</span></span><br><span class="line">    tf.summary.scalar(<span class="string">'error'</span>, error)</span><br><span class="line">    tf.summary.histogram(<span class="string">'weight'</span>, weight)</span><br><span class="line">    tf.summary.histogram(<span class="string">'bias'</span>, bias)</span><br><span class="line">    <span class="comment"># 合并变量</span></span><br><span class="line">    merge = tf.summary.merge_all()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存模型</span></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        sess.run(init)</span><br><span class="line">        print(<span class="string">'查看训练前模型参数:\n权重：%f，偏量：%f，损失：%f'</span> %</span><br><span class="line">              (weight.eval(), bias.eval(), error.eval()))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建事件文件</span></span><br><span class="line">        fileWriter = tf.summary.FileWriter(</span><br><span class="line">            cur_path+<span class="string">'15增加命名空间'</span>, graph=sess.graph)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始训练</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">            sess.run(optimizer)</span><br><span class="line">            <span class="comment"># 运行合并变量</span></span><br><span class="line">            summary = sess.run(merge)</span><br><span class="line">            <span class="comment"># 将变量写入事件文件</span></span><br><span class="line">            fileWriter.add_summary(summary, i)</span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">'训练第%d次后模型参数:\n权重：%f，偏量：%f，损失：%f'</span> %</span><br><span class="line">                      ((i+<span class="number">1</span>), weight.eval(), bias.eval(), error.eval()))</span><br><span class="line">                <span class="comment"># 保存模型</span></span><br><span class="line">                saver.save(sess, cur_path+<span class="string">'ckpt/linear_regression.ckpt'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    linear_regression()</span><br></pre></td></tr></table></figure>

<h5 id="7、读取模型"><a href="#7、读取模型" class="headerlink" title="7、读取模型"></a>7、读取模型</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前文件路径</span></span><br><span class="line">cur_path = <span class="string">'./神经网络/TensorFlow教程/线性回归案例/'</span></span><br><span class="line"><span class="comment"># 不提示警告信息</span></span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linear_regression</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># １、准备数据</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'prepare_data'</span>):</span><br><span class="line">        X = tf.random_normal(shape=[<span class="number">100</span>, <span class="number">1</span>], name=<span class="string">'feature'</span>)</span><br><span class="line">        y = tf.matmul(X, [[<span class="number">0.8</span>]]) + <span class="number">0.7</span></span><br><span class="line">    <span class="comment"># 2、构建模型</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'create_mode'</span>):</span><br><span class="line">        weight = tf.Variable(initial_value=tf.random_normal(</span><br><span class="line">            shape=[<span class="number">1</span>, <span class="number">1</span>]), name=<span class="string">'weight'</span>)</span><br><span class="line">        bias = tf.Variable(</span><br><span class="line">            initial_value=tf.random_normal(shape=[<span class="number">1</span>]), name=<span class="string">'bias'</span>)</span><br><span class="line">        y_predict = tf.matmul(X, weight) + bias</span><br><span class="line">    <span class="comment"># 3、构建损失函数</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'loss_function'</span>):</span><br><span class="line">        error = tf.reduce_mean(tf.square(y_predict-y))</span><br><span class="line">    <span class="comment"># 4、优化损失函数</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'opterimizer'</span>):</span><br><span class="line">        optimizer = tf.train.GradientDescentOptimizer(</span><br><span class="line">            learning_rate=<span class="number">0.01</span>).minimize(error)</span><br><span class="line"></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">    <span class="comment"># 收集变量</span></span><br><span class="line">    tf.summary.scalar(<span class="string">'error'</span>, error)</span><br><span class="line">    tf.summary.histogram(<span class="string">'weight'</span>, weight)</span><br><span class="line">    tf.summary.histogram(<span class="string">'bias'</span>, bias)</span><br><span class="line">    <span class="comment"># 合并变量</span></span><br><span class="line">    merge = tf.summary.merge_all()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存模型</span></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        sess.run(init)</span><br><span class="line">        print(<span class="string">'查看训练前模型参数:\n权重：%f，偏量：%f，损失：%f'</span> %</span><br><span class="line">              (weight.eval(), bias.eval(), error.eval()))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建事件文件</span></span><br><span class="line">        fileWriter = tf.summary.FileWriter(</span><br><span class="line">            cur_path+<span class="string">'15增加命名空间'</span>, graph=sess.graph)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取模型</span></span><br><span class="line">        <span class="comment"># 判断模型是否存在</span></span><br><span class="line">        ckpt = tf.train.get_checkpoint_state(cur_path + <span class="string">'/ckpt/'</span>)</span><br><span class="line">        <span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</span><br><span class="line">            saver.restore(sess, cur_path + <span class="string">'ckpt/linear_regression.ckpt'</span>)</span><br><span class="line">        print(<span class="string">'训练后模型参数:\n权重：%f，偏量：%f，损失：%f'</span> %</span><br><span class="line">              (weight.eval(), bias.eval(), error.eval()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    linear_regression()</span><br></pre></td></tr></table></figure>



<h4 id="2、手写数字识别"><a href="#2、手写数字识别" class="headerlink" title="2、手写数字识别"></a>2、手写数字识别</h4><h5 id="1、数据准备"><a href="#1、数据准备" class="headerlink" title="1、数据准备"></a>1、数据准备</h5><p><a href="data.zip">手写数字数据下载</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># import tensorflow</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前文件路径</span></span><br><span class="line">cur_path = <span class="string">'./神经网络/TensorFlow教程/手写数字识别/'</span></span><br><span class="line"><span class="comment"># 不提示警告信息</span></span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    mnist = input_data.read_data_sets(cur_path + <span class="string">'data/'</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># load images</span></span><br><span class="line">    train_X = mnist.train.images</span><br><span class="line">    validation_X = mnist.validation.images</span><br><span class="line">    test_X = mnist.test.images</span><br><span class="line">    <span class="comment"># load labels</span></span><br><span class="line">    train_y = mnist.train.labels</span><br><span class="line">    validation_y = mnist.validation.labels</span><br><span class="line">    test_y = mnist.test.labels</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出训练集样本和标签的大小</span></span><br><span class="line">    print(train_X.shape, train_y.shape)</span><br><span class="line">    <span class="comment"># 查看训练集中第一个样本的 image 和 label</span></span><br><span class="line">    print(train_X[<span class="number">0</span>])</span><br><span class="line">    print(train_y[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 获取数据集中的１００行</span></span><br><span class="line">    image, label = mnist.train.next_batch(<span class="number">100</span>)</span><br><span class="line">    print(image.shape, label.shape)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可视化样本，提取训练集中前20个样本</span></span><br><span class="line">    fig, ax = plt.subplots(nrows=<span class="number">4</span>, ncols=<span class="number">5</span>, sharex=<span class="string">'all'</span>, sharey=<span class="string">'all'</span>)</span><br><span class="line">    ax = ax.flatten()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">        img = train_X[i].reshape(<span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">        ax[i].imshow(img, cmap=<span class="string">'Greys'</span>)</span><br><span class="line">    ax[<span class="number">0</span>].set_xticks([])</span><br><span class="line">    ax[<span class="number">0</span>].set_yticks([])</span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>



<h5 id="2、实现"><a href="#2、实现" class="headerlink" title="2、实现"></a>2、实现</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前文件路径</span></span><br><span class="line">cur_path = <span class="string">'./神经网络/TensorFlow教程/手写数字识别/'</span></span><br><span class="line"><span class="comment"># 不提示警告信息</span></span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mnist</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.load_data()</span><br><span class="line">        self.create_mode()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 准备数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'prepare_data'</span>):</span><br><span class="line">            self.mnist = input_data.read_data_sets(</span><br><span class="line">                cur_path + <span class="string">'data/'</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line">            self.X = tf.placeholder(dtype=tf.float32, shape=[</span><br><span class="line">                <span class="literal">None</span>, <span class="number">784</span>], name=<span class="string">'train_images'</span>)</span><br><span class="line">            self.y = tf.placeholder(dtype=tf.float32, shape=[</span><br><span class="line">                <span class="literal">None</span>, <span class="number">10</span>], name=<span class="string">'train_labels'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建模型</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_mode</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 构建模型</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'create_mode'</span>):</span><br><span class="line">            self.weight = tf.Variable(initial_value=tf.random_normal(</span><br><span class="line">                shape=[<span class="number">784</span>, <span class="number">10</span>]), name=<span class="string">'weight'</span>)</span><br><span class="line">            self.bias = tf.Variable(</span><br><span class="line">                initial_value=tf.random_normal(shape=[<span class="number">10</span>]), name=<span class="string">'bias'</span>)</span><br><span class="line">            self.y_predict = tf.matmul(self.X, self.weight) + self.bias</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 损失函数</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'loss_function'</span>):</span><br><span class="line">            <span class="comment"># 激活函数：softmax</span></span><br><span class="line">            <span class="comment"># 损失函数：交叉熵</span></span><br><span class="line">            self.error = tf.reduce_mean(</span><br><span class="line">                tf.nn.softmax_cross_entropy_with_logits(labels=self.y,</span><br><span class="line">                                                        logits=self.y_predict))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 优化</span></span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(<span class="string">'optimizer'</span>):</span><br><span class="line">            self.optimizer = tf.train.GradientDescentOptimizer(</span><br><span class="line">                learning_rate=<span class="number">0.1</span>).minimize(self.error)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 准确率</span></span><br><span class="line">        predict = tf.equal(tf.argmax(self.y, <span class="number">1</span>),</span><br><span class="line">                           tf.argmax(self.y_predict, <span class="number">1</span>))</span><br><span class="line">        self.accurate = tf.reduce_mean(tf.cast(predict, tf.float32))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 模型初始化</span></span><br><span class="line">        self.sess = tf.Session()</span><br><span class="line">        self.sess.run(tf.global_variables_initializer())</span><br><span class="line">        self.saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练模型</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># print('Start training.')</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">            images, labels = self.mnist.train.next_batch(<span class="number">100</span>)</span><br><span class="line">            op, loss = self.sess.run([self.optimizer, self.error], feed_dict=&#123;</span><br><span class="line">                self.X: images, self.y: labels&#125;)</span><br><span class="line">            <span class="comment"># 保存模型</span></span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 保存模型</span></span><br><span class="line">                self.saver.save(self.sess, cur_path +</span><br><span class="line">                                <span class="string">'ckpt/mnist_demo.ckpt'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试模型</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># print('Start test.')</span></span><br><span class="line">        acc = <span class="number">0</span></span><br><span class="line">        images = self.mnist.test.images</span><br><span class="line">        labels = self.mnist.test.labels</span><br><span class="line">        acc = self.sess.run(self.accurate, feed_dict=&#123;</span><br><span class="line">            self.X: images, self.y: labels&#125;)</span><br><span class="line">        <span class="keyword">return</span> acc</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存模型</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        self.saver.save(self.sess, path+<span class="string">'mnist_demo.ckpt'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取模型</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">restore</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        ckpt = tf.train.get_checkpoint_state(path)</span><br><span class="line">        <span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</span><br><span class="line">            self.saver.restore(self.sess, path+<span class="string">'mnist_demo.ckpt'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sess.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    path = cur_path + <span class="string">'ckpt/'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练并保存模型</span></span><br><span class="line">    <span class="comment"># mnist_1 = Mnist()</span></span><br><span class="line">    <span class="comment"># mnist_1.train()</span></span><br><span class="line">    <span class="comment"># mnist_1.save(path)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取并测试模型</span></span><br><span class="line">    mnist_2 = Mnist()</span><br><span class="line">    mnist_2.restore(path)</span><br><span class="line">    acc = mnist_2.test()</span><br><span class="line">    print(acc)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>神经网络</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派</title>
    <url>/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/</url>
    <content><![CDATA[<h3 id="1、相关设备信息"><a href="#1、相关设备信息" class="headerlink" title="1、相关设备信息"></a>1、相关设备信息</h3><p><code>Raspberry Pi : 4B(2G)</code><br><code>TF卡 : 32G</code><br><code>电源 : 5.1V/3A</code></p>
<a id="more"></a>

<h3 id="2、系统安装"><a href="#2、系统安装" class="headerlink" title="2、系统安装"></a>2、系统安装</h3><h4 id="1、系统映像下载"><a href="#1、系统映像下载" class="headerlink" title="1、系统映像下载"></a>1、系统映像下载</h4><p>在 <a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="noopener">官网下载地址</a> 下载 <code>Raspberry Pi OS</code></p>
<p><img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F%E4%B8%8B%E8%BD%BD-1.png" alt="系统镜像下载-1"></p>
<p>选择含推荐软件的桌面版</p>
<p><img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F%E4%B8%8B%E8%BD%BD-2.png" alt="系统镜像下载-2"></p>
<p>下载完成后解压 <code>zip</code> 文件得到 后缀名为 <code>img</code> 的系统映像文件</p>
<h4 id="2、将映像写入TF卡"><a href="#2、将映像写入TF卡" class="headerlink" title="2、将映像写入TF卡"></a>2、将映像写入TF卡</h4><p>首先将TF卡格式化</p>
<img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/TF%E5%8D%A1%E6%A0%BC%E5%BC%8F%E5%8C%96.png" alt="TF卡格式化" style="zoom:50%;">

<p>使用 <code>Win32DiskImager</code> 工具将映像写入TF卡(<a href="./win32diskimager-1.0.0-install.exe">Win32DiskImager下载</a>)</p>
<img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E6%98%A0%E5%83%8F%E5%86%99%E5%85%A5.png" alt="映像写入" style="zoom:67%;">

<p>完成后TF卡会有两个分区</p>
<p><img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E6%98%A0%E5%83%8F%E5%86%99%E5%85%A5%E5%AE%8C%E6%88%90.png" alt="映像写入完成"></p>
<p>系统默认关闭了 <code>SSH</code> 连接，想要使用 <code>SSH</code> 需要在 <code>boot</code> 分区中新建空白文件 <code>ssh</code> (<strong>注意：没有后缀名</strong>) </p>
<h3 id="3、运行"><a href="#3、运行" class="headerlink" title="3、运行"></a>3、运行</h3><h4 id="1、无屏幕"><a href="#1、无屏幕" class="headerlink" title="1、无屏幕"></a>1、无屏幕</h4><p><del>个人比较穷所以没有买屏幕</del></p>
<h5 id="0、工具"><a href="#0、工具" class="headerlink" title="0、工具"></a>0、工具</h5><ul>
<li>一台PC<del>(废话)</del></li>
<li><a href="https://www.advanced-ip-scanner.com/cn/" target="_blank" rel="noopener">Advanced IP Scanner</a></li>
<li><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/" target="_blank" rel="noopener">PuTTY</a></li>
<li><a href="https://www.realvnc.com/en/connect/download/viewer/" target="_blank" rel="noopener">VNC Viewer</a></li>
</ul>
<h5 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h5><p>将之前准备好的TF卡插入树莓派并接通电源，给树莓派连接网络(让PC与树莓派处于同一局域网内)。</p>
<h5 id="2、获取树莓派IP"><a href="#2、获取树莓派IP" class="headerlink" title="2、获取树莓派IP"></a>2、获取树莓派IP</h5><p>使用 <code>Advanced IP Scanner</code> 扫描IP地址，找到树莓派的地址</p>
<img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/IP%E6%89%AB%E6%8F%8F.png" alt="IP扫描" style="zoom: 67%;">

<p>当成功使用PuTTY连接到树莓派后就可以给树莓派分配静态IP地址，之后就不需要再扫描IP地址了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 vi 编辑文件，增加下列配置项</span></span><br><span class="line">sudo vi /etc/dhcpcd.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 制定接口 eth0 //有线</span></span><br><span class="line"><span class="comment"># interface eth0</span></span><br><span class="line"><span class="comment"># 指定接口 wlan0 //无线</span></span><br><span class="line">interface wlan0</span><br><span class="line"><span class="comment"># 指定静态IP，/24表示子网掩码为 255.255.255.0</span></span><br><span class="line">static ip_address=192.168.1.150/24</span><br><span class="line"><span class="comment"># 路由器/网关IP地址</span></span><br><span class="line">static routers=192.168.1.1</span><br><span class="line"><span class="comment"># 手动自定义DNS服务器</span></span><br><span class="line">static domain_name_servers=114.114.114.114</span><br></pre></td></tr></table></figure>

<p>也可以再使用 <code>VNC</code> 连接树莓派后，右键点击 <code>WLAN</code> 图标选择网络设置</p>
<img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E5%88%86%E9%85%8D%E9%9D%99%E6%80%81IP-1.png" alt="分配静态IP-1" style="zoom:67%;">

<img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E5%88%86%E9%85%8D%E9%9D%99%E6%80%81IP-2.png" alt="分配静态IP-2" style="zoom:67%;">

<p>配置完后重启树莓派</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>





<h5 id="3、使用PuTTY连接树莓派"><a href="#3、使用PuTTY连接树莓派" class="headerlink" title="3、使用PuTTY连接树莓派"></a>3、使用PuTTY连接树莓派</h5><p>使用 <code>PuTTY</code> 连接树莓派，<del>如果不确定那个是树莓派的IP地址就挨个尝试一下。。。。。</del></p>
<img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E8%BF%9E%E6%8E%A5%E6%A0%91%E8%8E%93%E6%B4%BE-1.png" alt="连接树莓派-1" style="zoom:67%;">

<p>如果连接成功会提示你输入登录用户名以及密码</p>
<img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E8%BF%9E%E6%8E%A5%E6%A0%91%E8%8E%93%E6%B4%BE-2.png" alt="连接树莓派-2" style="zoom: 67%;">

<p>登录账号及密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 树莓派默认用户名及密码</span><br><span class="line">username: pi</span><br><span class="line">password: raspberry</span><br></pre></td></tr></table></figure>

<p>连接成功界面</p>
<img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E8%BF%9E%E6%8E%A5%E6%A0%91%E8%8E%93%E6%B4%BE-3.png" alt="连接树莓派-3" style="zoom: 67%;">



<h5 id="4、使用远程桌面访问树莓派"><a href="#4、使用远程桌面访问树莓派" class="headerlink" title="4、使用远程桌面访问树莓派"></a>4、使用远程桌面访问树莓派</h5><p>先使用 <code>PuTTY</code> 连接树莓派安装 <code>xrdp</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install xrdp</span><br></pre></td></tr></table></figure>

<p><em>可能因为网络原因需要切换源</em> </p>
<p>切换为国内源</p>
<p>编辑 <code>sources.list</code> 注释或删除原有的源添加新的源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 不习惯vi可以用nano</span></span><br><span class="line">sudo nano /etc/apt/sources.list</span><br><span class="line"><span class="comment"># 最后更新一下 apt-get </span></span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

<p>常用源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 中国科学技术大学</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ stretch main contrib non-free</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ stretch main contrib non-free</span><br><span class="line"></span><br><span class="line"><span class="comment"># 阿里云</span></span><br><span class="line">deb http://mirrors.aliyun.com/raspbian/raspbian/ stretch main contrib non-free</span><br><span class="line">deb-src http://mirrors.aliyun.com/raspbian/raspbian/ stretch main contrib non-free</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清华大学</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free</span><br><span class="line"></span><br><span class="line"><span class="comment"># 华中科技大学</span></span><br><span class="line">deb http://mirrors.hustunique.com/raspbian/raspbian/ stretch main contrib non-free</span><br><span class="line">deb-src http://mirrors.hustunique.com/raspbian/raspbian/ stretch main contrib non-free</span><br><span class="line"></span><br><span class="line"><span class="comment"># 华南农业大学</span></span><br><span class="line">deb http://mirrors.scau.edu.cn/raspbian/ stretch main contrib non-free</span><br><span class="line">deb-src http://mirrors.scau.edu.cn/raspbian/ stretch main contrib non-free</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大连东软信息学院</span></span><br><span class="line">deb http://mirrors.neusoft.edu.cn/raspbian/raspbian/ stretch main contrib non-free</span><br><span class="line">deb-src http://mirrors.neusoft.edu.cn/raspbian/raspbian/ stretch main contrib non-free</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重庆大学</span></span><br><span class="line">deb http://mirrors.cqu.edu.cn/Raspbian/raspbian/ stretch main contrib non-free</span><br><span class="line">deb-src http://mirrors.cqu.edu.cn/Raspbian/raspbian/ stretch main contrib non-free</span><br></pre></td></tr></table></figure>



<p>运行 <code>xrdp</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo xrdp</span><br></pre></td></tr></table></figure>

<p>在 <code>PC</code> 上启动 <em>远程桌面连接</em> </p>
<img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E8%BF%9E%E6%8E%A5-1.png" alt="远程桌面连接-1" style="zoom:67%;">

<p>输入密码</p>
<img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E8%BF%9E%E6%8E%A5-2.png" alt="远程桌面连接-2" style="zoom:67%;">

<p>成功连接到树莓派</p>
<img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E8%BF%9E%E6%8E%A5-3.png" alt="远程桌面连接-3" style="zoom:67%;">



<h5 id="5、使用VNC访问树莓派"><a href="#5、使用VNC访问树莓派" class="headerlink" title="5、使用VNC访问树莓派"></a>5、使用VNC访问树莓派</h5><p>1、开启树莓派VNC功能</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo raspi-config</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>

<div align="left"><img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E5%BC%80%E5%90%AF%E6%A0%91%E8%8E%93%E6%B4%BEVNC%E5%8A%9F%E8%83%BD-1.png" alt="开启树莓派VNC功能-1" style="zoom:50%;"><img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E5%BC%80%E5%90%AF%E6%A0%91%E8%8E%93%E6%B4%BEVNC%E5%8A%9F%E8%83%BD-2.png" alt="开启树莓派VNC功能-2" style="zoom:50%;"><img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E5%BC%80%E5%90%AF%E6%A0%91%E8%8E%93%E6%B4%BEVNC%E5%8A%9F%E8%83%BD-3.png" alt="开启树莓派VNC功能-3" style="zoom:50%;">
</div><div style="clear:both;">



<p>2、连接树莓派</p>
<p>输入树莓派IP地址进行连接，输入账号密码登录</p>
<img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E4%BD%BF%E7%94%A8VNC%E8%AE%BF%E9%97%AE%E6%A0%91%E8%8E%93%E6%B4%BE-1.png" alt="使用VNC访问树莓派-1" style="zoom:67%;">



<p>3、遇到的问题</p>
<p><code>VNC Viewer</code> 无法显示界面</p>
<p><img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E7%95%8C%E9%9D%A2%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA.png" alt="界面无法显示"></p>
<p>解决方法：修改树莓派的分辨率</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure>

<div align="left"><img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E4%BF%AE%E6%94%B9%E5%88%86%E8%BE%A8%E7%8E%87-1.png" alt="修改分辨率-1" style="zoom:50%;"><img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E4%BF%AE%E6%94%B9%E5%88%86%E8%BE%A8%E7%8E%87-2.png" alt="修改分辨率-2" style="zoom:50%;"><img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E4%BF%AE%E6%94%B9%E5%88%86%E8%BE%A8%E7%8E%87-3.png" alt="修改分辨率-3" style="zoom:50%;">
</div><div style="clear:both;">

<p>重启树莓派</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>



<h3 id="4、备份与还原"><a href="#4、备份与还原" class="headerlink" title="4、备份与还原"></a>4、备份与还原</h3><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p>1、调整TF卡中系统分区容量，使其没有空闲空间</p>
<img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E8%B0%83%E6%95%B4%E5%88%86%E5%8C%BA%E5%AE%B9%E9%87%8F.png" alt="调整分区容量" style="zoom: 50%;">



<p>2、使用 <code>Win32DiskImager</code> 从TF卡中读取并生成镜像</p>
<img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E7%94%9F%E6%88%90%E9%95%9C%E5%83%8F.png" alt="生成镜像" style="zoom:67%;">

<p>3、最后不要忘了将分区容量调整回原始大小</p>
<h4 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h4><p>1、使用 <code>Win32DiskImager</code> 工具将映像写入TF卡</p>
<img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E6%98%A0%E5%83%8F%E5%86%99%E5%85%A5.png" alt="映像写入" style="zoom:67%;">

<p>2、使用分区工具调整系统分区容量</p>
<img src="/2020/10/08/%E6%A0%91%E8%8E%93%E6%B4%BE/%E7%B3%BB%E7%BB%9F%E5%88%86%E5%8C%BA%E6%89%A9%E5%AE%B9.png" alt="系统分区扩容" style="zoom:50%;">



</div></div>]]></content>
      <categories>
        <category>Raspberry Pi</category>
      </categories>
      <tags>
        <tag>Raspberry Pi</tag>
      </tags>
  </entry>
</search>
